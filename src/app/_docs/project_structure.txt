---  Folder Structure ---
[admin]
    ├── [b2b]
        └── page.tsx
    ├── [categories]
        └── page.tsx
    ├── [contacts]
        └── page.tsx
    ├── [dashboard]
        └── page.tsx
    ├── layout.tsx
    ├── [login]
        └── page.tsx
    ├── [lucky-draw]
        └── page.tsx
    ├── page.tsx
    ├── [settings]
        └── page.tsx
    ├── [study-pages]
        └── page.tsx
    └── [testimonials]
        └── page.tsx
[api]
    ├── [admin]
        ├── [cards]
            ├── route.ts
            └── [[id]]
                └── route.ts
        ├── [categories]
            ├── route.ts
            └── [[id]]
                └── route.ts
        ├── [change-password]
            └── route.ts
        ├── [dashboard]
            └── [stats]
                └── route.ts
        ├── [detail-pages]
            └── route.ts
        ├── [navbar-links]
            └── route.ts
        ├── [settings]
            └── route.ts
        ├── [study-pages]
            ├── route.ts
            └── [[id]]
                ├── [duplicate]
                    └── route.ts
                ├── route.ts
                └── [toggle]
                    └── route.ts
        ├── [tables]
            ├── route.ts
            └── [[id]]
                └── route.ts
        ├── [testimonials]
            ├── route.ts
            └── [[id]]
                ├── [featured]
                    └── route.ts
                ├── route.ts
                └── [toggle]
                    └── route.ts
        └── [upload]
            └── route.ts
    ├── [auth]
        └── [[...nextauth]]
            └── route.ts
    ├── [b2b]
        ├── route.ts
        └── [[id]]
            └── [status]
                └── route.ts
    ├── [clear-sample-data]
        └── route.ts
    ├── [contact]
        ├── route.ts
        └── [[id]]
            └── [status]
                └── route.ts
    ├── [health]
        └── route.ts
    ├── [lucky-draw]
        ├── [reset]
            └── route.ts
        ├── route.ts
        └── [[id]]
            └── [winner]
                └── route.ts
    ├── [newsletter]
        └── route.ts
    ├── [study-pages]
        └── route.ts
    └── [testimonials]
        └── route.ts
[b2b]
    └── page.tsx
[contact]
    └── page.tsx
favicon.ico
globals.css
layout.tsx
[lucky-draw]
    └── page.tsx
page.tsx
[study]
    ├── page.tsx
    └── [[slug]]
        ├── page.tsx
        ├── page.tsx.backup
        └── [[cardId]]
            └── page.tsx
[tables]
    └── page.tsx
[_docs]
    └── .project_structure_ignore

--- File Contents ---

--- File: admin\b2b\page.tsx ---
'use client'

import { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from '@/components/ui/table'
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from '@/components/ui/select'
import { 
  Dialog, 
  DialogContent, 
  DialogDescription, 
  DialogHeader, 
  DialogTitle, 
  DialogTrigger 
} from '@/components/ui/dialog'
import { Label } from '@/components/ui/label'
import { 
  Handshake, 
  Search, 
  Filter, 
  Download, 
  Eye, 
  Mail,
  Phone,
  Building,
  Globe,
  Calendar,
  CheckCircle,
  Clock,
  XCircle
} from 'lucide-react'
import { toast } from 'sonner'

interface B2BSubmission {
  id: number
  name: string
  company: string
  email: string
  phone: string
  country: string
  message: string
  createdAt: string
  status?: 'new' | 'reviewed' | 'interested' | 'partnered' | 'rejected'
}

export default function AdminB2BPage() {
  const [submissions, setSubmissions] = useState<B2BSubmission[]>([])
  const [filteredSubmissions, setFilteredSubmissions] = useState<B2BSubmission[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [countryFilter, setCountryFilter] = useState<string>('all')
  const [statusFilter, setStatusFilter] = useState<string>('all')
  const [selectedSubmission, setSelectedSubmission] = useState<B2BSubmission | null>(null)
  const [statusUpdating, setStatusUpdating] = useState<number | null>(null)

  useEffect(() => {
    fetchSubmissions()
  }, [])

  useEffect(() => {
    filterSubmissions()
  }, [submissions, searchTerm, countryFilter, statusFilter])

  const fetchSubmissions = async () => {
    try {
      const response = await fetch('/api/b2b')
      if (response.ok) {
        const data = await response.json()
        setSubmissions(data)
      }
    } catch (error) {
      toast.error('Failed to fetch B2B submissions')
    } finally {
      setLoading(false)
    }
  }

  const filterSubmissions = () => {
    let filtered = submissions

    if (searchTerm) {
      filtered = filtered.filter(submission =>
        submission.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        submission.company.toLowerCase().includes(searchTerm.toLowerCase()) ||
        submission.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
        submission.message.toLowerCase().includes(searchTerm.toLowerCase())
      )
    }

    if (countryFilter !== 'all') {
      filtered = filtered.filter(submission => submission.country === countryFilter)
    }

    if (statusFilter !== 'all') {
      filtered = filtered.filter(submission => submission.status === statusFilter)
    }

    setFilteredSubmissions(filtered)
  }

  const updateSubmissionStatus = async (submissionId: number, status: string) => {
    setStatusUpdating(submissionId)
    try {
      const response = await fetch(`/api/b2b/${submissionId}/status`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ status })
      })

      if (response.ok) {
        setSubmissions(prev => 
          prev.map(submission => 
            submission.id === submissionId 
              ? { ...submission, status: status as any }
              : submission
          )
        )
        toast.success('B2B submission status updated successfully')
      }
    } catch (error) {
      toast.error('Failed to update submission status')
    } finally {
      setStatusUpdating(null)
    }
  }

  const exportToCSV = () => {
    const headers = ['Name', 'Company', 'Email', 'Phone', 'Country', 'Message', 'Date', 'Status']
    const csvContent = [
      headers.join(','),
      ...filteredSubmissions.map(submission => [
        submission.name,
        submission.company,
        submission.email,
        submission.phone,
        submission.country,
        `"${submission.message.replace(/"/g, '""')}"`,
        new Date(submission.createdAt).toLocaleDateString(),
        submission.status || 'new'
      ].join(','))
    ].join('\n')

    const blob = new Blob([csvContent], { type: 'text/csv' })
    const url = window.URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `b2b_submissions_${new Date().toISOString().split('T')[0]}.csv`
    a.click()
    window.URL.revokeObjectURL(url)
  }

  const getStatusBadge = (status?: string) => {
    const statusConfig = {
      new: { label: 'New', className: 'bg-blue-100 text-blue-800' },
      reviewed: { label: 'Reviewed', className: 'bg-yellow-100 text-yellow-800' },
      interested: { label: 'Interested', className: 'bg-purple-100 text-purple-800' },
      partnered: { label: 'Partnered', className: 'bg-green-100 text-green-800' },
      rejected: { label: 'Rejected', className: 'bg-red-100 text-red-800' }
    }

    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.new
    return (
      <Badge className={config.className}>
        {config.label}
      </Badge>
    )
  }

  const getUniqueCountries = () => {
    const countries = [...new Set(submissions.map(s => s.country))]
    return countries.sort()
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-primary"></div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">B2B Requests</h1>
          <p className="text-gray-600">Manage partnership inquiries and collaborations</p>
        </div>
        <Button onClick={exportToCSV} variant="outline">
          <Download className="w-4 h-4 mr-2" />
          Export CSV
        </Button>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center">
              <Handshake className="h-8 w-8 text-blue-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Total Requests</p>
                <p className="text-2xl font-bold">{submissions.length}</p>
              </div>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center">
              <Clock className="h-8 w-8 text-yellow-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">New</p>
                <p className="text-2xl font-bold">
                  {submissions.filter(s => !s.status || s.status === 'new').length}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center">
              <Building className="h-8 w-8 text-purple-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Reviewed</p>
                <p className="text-2xl font-bold">
                  {submissions.filter(s => s.status === 'reviewed').length}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center">
              <CheckCircle className="h-8 w-8 text-green-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Partnered</p>
                <p className="text-2xl font-bold">
                  {submissions.filter(s => s.status === 'partnered').length}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Filters */}
      <Card>
        <CardHeader>
          <CardTitle>Filters</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <Input
                placeholder="Search submissions..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
              />
            </div>
            <Select value={countryFilter} onValueChange={setCountryFilter}>
              <SelectTrigger>
                <SelectValue placeholder="Filter by country" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Countries</SelectItem>
                {getUniqueCountries().map(country => (
                  <SelectItem key={country} value={country}>
                    {country}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            <Select value={statusFilter} onValueChange={setStatusFilter}>
              <SelectTrigger>
                <SelectValue placeholder="Filter by status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Statuses</SelectItem>
                <SelectItem value="new">New</SelectItem>
                <SelectItem value="reviewed">Reviewed</SelectItem>
                <SelectItem value="interested">Interested</SelectItem>
                <SelectItem value="partnered">Partnered</SelectItem>
                <SelectItem value="rejected">Rejected</SelectItem>
              </SelectContent>
            </Select>
            <Button 
              variant="outline" 
              onClick={() => {
                setSearchTerm('')
                setCountryFilter('all')
                setStatusFilter('all')
              }}
            >
              <Filter className="w-4 h-4 mr-2" />
              Clear Filters
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Submissions Table */}
      <Card>
        <CardHeader>
          <CardTitle>Partnership Submissions ({filteredSubmissions.length})</CardTitle>
          <CardDescription>
            Manage and respond to B2B partnership inquiries
          </CardDescription>
        </CardHeader>
        <CardContent>
          {filteredSubmissions.length === 0 ? (
            <div className="text-center py-8">
              <Handshake className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">No submissions found</h3>
              <p className="text-gray-500">
                {searchTerm || countryFilter !== 'all' || statusFilter !== 'all'
                  ? 'Try adjusting your filters'
                  : 'No B2B submissions yet'
                }
              </p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Company</TableHead>
                    <TableHead>Contact Person</TableHead>
                    <TableHead>Email</TableHead>
                    <TableHead>Country</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Date</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredSubmissions.map((submission) => (
                    <TableRow key={submission.id}>
                      <TableCell className="font-medium">
                        <div className="flex items-center">
                          <Building className="w-4 h-4 mr-2 text-gray-400" />
                          {submission.company}
                        </div>
                      </TableCell>
                      <TableCell>
                        <div>
                          <p className="font-medium">{submission.name}</p>
                          <p className="text-sm text-gray-500 flex items-center">
                            <Phone className="w-3 h-3 mr-1" />
                            {submission.phone}
                          </p>
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center">
                          <Mail className="w-4 h-4 mr-2 text-gray-400" />
                          {submission.email}
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center">
                          <Globe className="w-4 h-4 mr-2 text-gray-400" />
                          {submission.country}
                        </div>
                      </TableCell>
                      <TableCell>
                        <Select
                          value={submission.status || 'new'}
                          onValueChange={(value) => updateSubmissionStatus(submission.id, value)}
                          disabled={statusUpdating === submission.id}
                        >
                          <SelectTrigger className="w-32">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="new">New</SelectItem>
                            <SelectItem value="reviewed">Reviewed</SelectItem>
                            <SelectItem value="interested">Interested</SelectItem>
                            <SelectItem value="partnered">Partnered</SelectItem>
                            <SelectItem value="rejected">Rejected</SelectItem>
                          </SelectContent>
                        </Select>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center">
                          <Calendar className="w-4 h-4 mr-2 text-gray-400" />
                          {new Date(submission.createdAt).toLocaleDateString()}
                        </div>
                      </TableCell>
                      <TableCell>
                        <Dialog>
                          <DialogTrigger asChild>
                            <Button 
                              variant="outline" 
                              size="sm"
                              onClick={() => setSelectedSubmission(submission)}
                            >
                              <Eye className="w-4 h-4 mr-2" />
                              View
                            </Button>
                          </DialogTrigger>
                          <DialogContent className="max-w-2xl">
                            <DialogHeader>
                              <DialogTitle>Partnership Details</DialogTitle>
                              <DialogDescription>
                                Full information about this partnership inquiry
                              </DialogDescription>
                            </DialogHeader>
                            {selectedSubmission && (
                              <div className="space-y-4">
                                <div className="grid grid-cols-2 gap-4">
                                  <div>
                                    <Label>Company Name</Label>
                                    <p className="font-medium">{selectedSubmission.company}</p>
                                  </div>
                                  <div>
                                    <Label>Contact Person</Label>
                                    <p className="font-medium">{selectedSubmission.name}</p>
                                  </div>
                                  <div>
                                    <Label>Email</Label>
                                    <p className="font-medium">{selectedSubmission.email}</p>
                                  </div>
                                  <div>
                                    <Label>Phone</Label>
                                    <p className="font-medium">{selectedSubmission.phone}</p>
                                  </div>
                                  <div>
                                    <Label>Country</Label>
                                    <div className="flex items-center mt-1">
                                      <Globe className="w-4 h-4 mr-2 text-gray-400" />
                                      <p className="font-medium">{selectedSubmission.country}</p>
                                    </div>
                                  </div>
                                  <div>
                                    <Label>Status</Label>
                                    <div className="mt-1">
                                      {getStatusBadge(selectedSubmission.status)}
                                    </div>
                                  </div>
                                </div>
                                <div>
                                  <Label>Message/Proposal</Label>
                                  <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                                    <p className="whitespace-pre-wrap">{selectedSubmission.message}</p>
                                  </div>
                                </div>
                                <div>
                                  <Label>Submitted Date</Label>
                                  <p className="font-medium">
                                    {new Date(selectedSubmission.createdAt).toLocaleString()}
                                  </p>
                                </div>
                              </div>
                            )}
                          </DialogContent>
                        </Dialog>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  )
}

--- File: admin\categories\page.tsx ---
'use client'

import { useState, useEffect } from 'react'
import { useSession } from 'next-auth/react'
import { useRouter } from 'next/navigation'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { 
  Plus, 
  Edit, 
  Trash2, 
  FolderOpen, 
  FileText,
  Save,
  X,
  ChevronDown,
  ChevronRight,
  Eye
} from 'lucide-react'
import { toast } from 'sonner'
import ImageUpload from '@/components/ui/image-upload'

interface StudyPage {
  id: number
  title: string
  slug: string
}

interface Card {
  id: number
  title: string
  description: string
  imageUrl: string | null
  createdAt: string
}

interface Category {
  id: number
  title: string
  description: string | null
  studyPageId: number
  createdAt: string
  studyPage: StudyPage
  cards: Card[]
}

export default function CategoriesManagement() {
  const { data: session, status } = useSession()
  const router = useRouter()
  const [studyPages, setStudyPages] = useState<StudyPage[]>([])
  const [categories, setCategories] = useState<Category[]>([])
  const [loading, setLoading] = useState(true)
  const [expandedCategories, setExpandedCategories] = useState<Set<number>>(new Set())
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false)
  const [isCardModalOpen, setIsCardModalOpen] = useState(false)
  const [editingCategory, setEditingCategory] = useState<Category | null>(null)
  const [editingCard, setEditingCard] = useState<Card | null>(null)
  const [selectedCategoryId, setSelectedCategoryId] = useState<number | null>(null)
  const [categoryForm, setCategoryForm] = useState({
    title: '',
    description: '',
    studyPageId: ''
  })
  const [cardForm, setCardForm] = useState({
    title: '',
    description: '',
    imageUrl: ''
  })

  useEffect(() => {
    if (status === 'unauthenticated') {
      router.push('/admin/login')
    }
  }, [status, router])

  useEffect(() => {
    if (session) {
      fetchStudyPages()
      fetchCategories()
    }
  }, [session])

  const fetchStudyPages = async () => {
    try {
      const response = await fetch('/api/admin/study-pages')
      if (response.ok) {
        const data = await response.json()
        setStudyPages(data)
      }
    } catch (error) {
      toast.error('Failed to fetch study pages')
    }
  }

  const fetchCategories = async () => {
    try {
      const response = await fetch('/api/admin/categories')
      if (response.ok) {
        const data = await response.json()
        setCategories(data)
      }
    } catch (error) {
      toast.error('Failed to fetch categories')
    } finally {
      setLoading(false)
    }
  }

  const toggleCategoryExpansion = (categoryId: number) => {
    const newExpanded = new Set(expandedCategories)
    if (newExpanded.has(categoryId)) {
      newExpanded.delete(categoryId)
    } else {
      newExpanded.add(categoryId)
    }
    setExpandedCategories(newExpanded)
  }

  const handleCategorySubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    try {
      const url = editingCategory 
        ? `/api/admin/categories/${editingCategory.id}`
        : '/api/admin/categories'
      
      const method = editingCategory ? 'PUT' : 'POST'
      
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(categoryForm),
      })

      if (response.ok) {
        toast.success(editingCategory ? 'Category updated successfully' : 'Category created successfully')
        setIsCreateModalOpen(false)
        setEditingCategory(null)
        setCategoryForm({ title: '', description: '', studyPageId: '' })
        fetchCategories()
      } else {
        toast.error('Failed to save category')
      }
    } catch (error) {
      toast.error('Failed to save category')
    }
  }

  const handleCardSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!selectedCategoryId) {
      toast.error('Please select a category first')
      return
    }
    
    try {
      const url = editingCard 
        ? `/api/admin/cards/${editingCard.id}`
        : '/api/admin/cards'
      
      const method = editingCard ? 'PUT' : 'POST'
      
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ...cardForm,
          categoryId: selectedCategoryId
        }),
      })

      if (response.ok) {
        toast.success(editingCard ? 'Card updated successfully' : 'Card created successfully')
        setIsCardModalOpen(false)
        setEditingCard(null)
        setSelectedCategoryId(null)
        setCardForm({ title: '', description: '', imageUrl: '' })
        fetchCategories()
      } else {
        toast.error('Failed to save card')
      }
    } catch (error) {
      toast.error('Failed to save card')
    }
  }

  const handleEditCategory = (category: Category) => {
    setEditingCategory(category)
    setCategoryForm({
      title: category.title,
      description: category.description || '',
      studyPageId: category.studyPageId.toString()
    })
    setIsCreateModalOpen(true)
  }

  const handleEditCard = (card: Card, categoryId: number) => {
    setEditingCard(card)
    setSelectedCategoryId(categoryId)
    setCardForm({
      title: card.title,
      description: card.description,
      imageUrl: card.imageUrl || ''
    })
    setIsCardModalOpen(true)
  }

  const handleDeleteCategory = async (id: number) => {
    if (!confirm('Are you sure you want to delete this category and all its cards? This action cannot be undone.')) {
      return
    }

    try {
      const response = await fetch(`/api/admin/categories/${id}`, {
        method: 'DELETE',
      })

      if (response.ok) {
        toast.success('Category deleted successfully')
        fetchCategories()
      } else {
        toast.error('Failed to delete category')
      }
    } catch (error) {
      toast.error('Failed to delete category')
    }
  }

  const handleDeleteCard = async (id: number) => {
    if (!confirm('Are you sure you want to delete this card? This action cannot be undone.')) {
      return
    }

    try {
      const response = await fetch(`/api/admin/cards/${id}`, {
        method: 'DELETE',
      })

      if (response.ok) {
        toast.success('Card deleted successfully')
        fetchCategories()
      } else {
        toast.error('Failed to delete card')
      }
    } catch (error) {
      toast.error('Failed to delete card')
    }
  }

  const openAddCardModal = (categoryId: number) => {
    setSelectedCategoryId(categoryId)
    setEditingCard(null)
    setCardForm({ title: '', description: '', imageUrl: '' })
    setIsCardModalOpen(true)
  }

  if (status === 'loading' || loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-primary"></div>
      </div>
    )
  }

  if (!session) {
    return null
  }

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-3xl font-bold">Categories & Cards Management</h1>
          <p className="text-gray-600">Manage content categories and information cards</p>
        </div>
        <Button onClick={() => setIsCreateModalOpen(true)}>
          <Plus className="w-4 h-4 mr-2" />
          Add Category
        </Button>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Total Categories</p>
                <p className="text-2xl font-bold">{categories.length}</p>
              </div>
              <FolderOpen className="w-8 h-8 text-blue-500" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Total Cards</p>
                <p className="text-2xl font-bold">{categories.reduce((acc, cat) => acc + cat.cards.length, 0)}</p>
              </div>
              <FileText className="w-8 h-8 text-green-500" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Study Pages</p>
                <p className="text-2xl font-bold">{studyPages.length}</p>
              </div>
              <Eye className="w-8 h-8 text-purple-500" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Categories List */}
      <Card>
        <CardHeader>
          <CardTitle>Categories & Cards</CardTitle>
          <CardDescription>Manage your content categories and information cards</CardDescription>
        </CardHeader>
        <CardContent>
          {categories.length === 0 ? (
            <div className="text-center py-8">
              <FolderOpen className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">No categories found</h3>
              <p className="text-gray-600 mb-4">Create your first category to get started</p>
              <Button onClick={() => setIsCreateModalOpen(true)}>
                <Plus className="w-4 h-4 mr-2" />
                Create Category
              </Button>
            </div>
          ) : (
            <div className="space-y-4">
              {categories.map((category) => (
                <div key={category.id} className="border rounded-lg">
                  <div className="p-4">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => toggleCategoryExpansion(category.id)}
                        >
                          {expandedCategories.has(category.id) ? (
                            <ChevronDown className="w-4 h-4" />
                          ) : (
                            <ChevronRight className="w-4 h-4" />
                          )}
                        </Button>
                        <div>
                          <div className="flex items-center gap-2 mb-1">
                            <h3 className="text-lg font-medium">{category.title}</h3>
                            <Badge variant="outline">{category.cards.length} cards</Badge>
                          </div>
                          <p className="text-sm text-gray-600">
                            Page: {category.studyPage.title}
                          </p>
                          {category.description && (
                            <p className="text-sm text-gray-500 mt-1">{category.description}</p>
                          )}
                        </div>
                      </div>
                      <div className="flex items-center gap-2">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => openAddCardModal(category.id)}
                        >
                          <Plus className="w-4 h-4 mr-1" />
                          Add Card
                        </Button>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handleEditCategory(category)}
                        >
                          <Edit className="w-4 h-4" />
                        </Button>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handleDeleteCategory(category.id)}
                          className="text-red-600 hover:text-red-700"
                        >
                          <Trash2 className="w-4 h-4" />
                        </Button>
                      </div>
                    </div>
                  </div>
                  
                  {expandedCategories.has(category.id) && (
                    <div className="border-t bg-gray-50 p-4">
                      <h4 className="text-sm font-medium text-gray-700 mb-3">Cards in this category</h4>
                      {category.cards.length === 0 ? (
                        <p className="text-sm text-gray-500 text-center py-4">
                          No cards in this category yet. Click "Add Card" to create one.
                        </p>
                      ) : (
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                          {category.cards.map((card) => (
                            <div key={card.id} className="bg-white p-3 rounded border">
                              <div className="flex justify-between items-start">
                                <div className="flex-1">
                                  <h5 className="font-medium text-sm">{card.title}</h5>
                                  <p className="text-xs text-gray-600 mt-1 line-clamp-2">{card.description}</p>
                                  {card.imageUrl && (
                                    <p className="text-xs text-blue-600 mt-1">Has image</p>
                                  )}
                                </div>
                                <div className="flex gap-1 ml-2">
                                  <Button
                                    variant="ghost"
                                    size="sm"
                                    onClick={() => handleEditCard(card, category.id)}
                                  >
                                    <Edit className="w-3 h-3" />
                                  </Button>
                                  <Button
                                    variant="ghost"
                                    size="sm"
                                    onClick={() => handleDeleteCard(card.id)}
                                    className="text-red-600 hover:text-red-700"
                                  >
                                    <Trash2 className="w-3 h-3" />
                                  </Button>
                                </div>
                              </div>
                            </div>
                          ))}
                        </div>
                      )}
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Category Create/Edit Modal */}
      {isCreateModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-bold">
                {editingCategory ? 'Edit Category' : 'Create Category'}
              </h2>
              <Button
                variant="outline"
                size="sm"
                onClick={() => {
                  setIsCreateModalOpen(false)
                  setEditingCategory(null)
                  setCategoryForm({ title: '', description: '', studyPageId: '' })
                }}
              >
                <X className="w-4 h-4" />
              </Button>
            </div>

            <form onSubmit={handleCategorySubmit} className="space-y-4">
              <div>
                <Label htmlFor="studyPageId">Study Page *</Label>
                <Select
                  value={categoryForm.studyPageId}
                  onValueChange={(value) => setCategoryForm(prev => ({ ...prev, studyPageId: value }))}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select a study page" />
                  </SelectTrigger>
                  <SelectContent>
                    {studyPages.map((page) => (
                      <SelectItem key={page.id} value={page.id.toString()}>
                        {page.title}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label htmlFor="title">Category Title *</Label>
                <Input
                  id="title"
                  value={categoryForm.title}
                  onChange={(e) => setCategoryForm(prev => ({ ...prev, title: e.target.value }))}
                  placeholder="e.g., Universities"
                  required
                />
              </div>

              <div>
                <Label htmlFor="description">Description</Label>
                <Textarea
                  id="description"
                  value={categoryForm.description}
                  onChange={(e) => setCategoryForm(prev => ({ ...prev, description: e.target.value }))}
                  placeholder="Brief description of the category"
                />
              </div>

              <div className="flex justify-end gap-2">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => {
                    setIsCreateModalOpen(false)
                    setEditingCategory(null)
                    setCategoryForm({ title: '', description: '', studyPageId: '' })
                  }}
                >
                  Cancel
                </Button>
                <Button type="submit">
                  <Save className="w-4 h-4 mr-2" />
                  {editingCategory ? 'Update' : 'Create'}
                </Button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Card Create/Edit Modal */}
      {isCardModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-bold">
                {editingCard ? 'Edit Card' : 'Create Card'}
              </h2>
              <Button
                variant="outline"
                size="sm"
                onClick={() => {
                  setIsCardModalOpen(false)
                  setEditingCard(null)
                  setSelectedCategoryId(null)
                  setCardForm({ title: '', description: '', imageUrl: '' })
                }}
              >
                <X className="w-4 h-4" />
              </Button>
            </div>

            <form onSubmit={handleCardSubmit} className="space-y-4">
              <div>
                <Label htmlFor="cardTitle">Card Title *</Label>
                <Input
                  id="cardTitle"
                  value={cardForm.title}
                  onChange={(e) => setCardForm(prev => ({ ...prev, title: e.target.value }))}
                  placeholder="e.g., University of Milan"
                  required
                />
              </div>

              <div>
                <Label htmlFor="cardDescription">Description *</Label>
                <Textarea
                  id="cardDescription"
                  value={cardForm.description}
                  onChange={(e) => setCardForm(prev => ({ ...prev, description: e.target.value }))}
                  placeholder="Detailed information about this item"
                  required
                />
              </div>

              <div>
                <Label>Card Image</Label>
                <ImageUpload
                  value={cardForm.imageUrl}
                  onChange={(url) => setCardForm(prev => ({ ...prev, imageUrl: url || '' }))}
                  placeholder="Upload a card image or enter URL"
                />
              </div>

              <div className="flex justify-end gap-2">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => {
                    setIsCardModalOpen(false)
                    setEditingCard(null)
                    setSelectedCategoryId(null)
                    setCardForm({ title: '', description: '', imageUrl: '' })
                  }}
                >
                  Cancel
                </Button>
                <Button type="submit">
                  <Save className="w-4 h-4 mr-2" />
                  {editingCard ? 'Update' : 'Create'}
                </Button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  )
}

--- File: admin\contacts\page.tsx ---
'use client'

import { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from '@/components/ui/table'
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from '@/components/ui/select'
import { 
  Dialog, 
  DialogContent, 
  DialogDescription, 
  DialogHeader, 
  DialogTitle, 
  DialogTrigger 
} from '@/components/ui/dialog'
import { Textarea } from '@/components/ui/textarea'
import { Label } from '@/components/ui/label'
import { 
  MessageSquare, 
  Search, 
  Filter, 
  Download, 
  Eye, 
  Mail,
  Phone,
  Calendar,
  CheckCircle,
  Clock,
  XCircle
} from 'lucide-react'
import { toast } from 'sonner'

interface ContactSubmission {
  id: number
  name: string
  email: string
  phone: string
  purpose: string
  message: string
  createdAt: string
  status?: 'new' | 'contacted' | 'resolved' | 'closed'
}

export default function AdminContactsPage() {
  const [contacts, setContacts] = useState<ContactSubmission[]>([])
  const [filteredContacts, setFilteredContacts] = useState<ContactSubmission[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [purposeFilter, setPurposeFilter] = useState<string>('all')
  const [statusFilter, setStatusFilter] = useState<string>('all')
  const [selectedContact, setSelectedContact] = useState<ContactSubmission | null>(null)
  const [statusUpdating, setStatusUpdating] = useState<number | null>(null)

  useEffect(() => {
    fetchContacts()
  }, [])

  useEffect(() => {
    filterContacts()
  }, [contacts, searchTerm, purposeFilter, statusFilter])

  const fetchContacts = async () => {
    try {
      const response = await fetch('/api/contact')
      if (response.ok) {
        const data = await response.json()
        setContacts(data)
      }
    } catch (error) {
      toast.error('Failed to fetch contacts')
    } finally {
      setLoading(false)
    }
  }

  const filterContacts = () => {
    let filtered = contacts

    if (searchTerm) {
      filtered = filtered.filter(contact =>
        contact.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        contact.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
        contact.message.toLowerCase().includes(searchTerm.toLowerCase())
      )
    }

    if (purposeFilter !== 'all') {
      filtered = filtered.filter(contact => contact.purpose === purposeFilter)
    }

    if (statusFilter !== 'all') {
      filtered = filtered.filter(contact => contact.status === statusFilter)
    }

    setFilteredContacts(filtered)
  }

  const updateContactStatus = async (contactId: number, status: string) => {
    setStatusUpdating(contactId)
    try {
      const response = await fetch(`/api/contact/${contactId}/status`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ status })
      })

      if (response.ok) {
        setContacts(prev => 
          prev.map(contact => 
            contact.id === contactId 
              ? { ...contact, status: status as any }
              : contact
          )
        )
        toast.success('Contact status updated successfully')
      }
    } catch (error) {
      toast.error('Failed to update contact status')
    } finally {
      setStatusUpdating(null)
    }
  }

  const exportToCSV = () => {
    const headers = ['Name', 'Email', 'Phone', 'Purpose', 'Message', 'Date', 'Status']
    const csvContent = [
      headers.join(','),
      ...filteredContacts.map(contact => [
        contact.name,
        contact.email,
        contact.phone,
        contact.purpose,
        `"${contact.message.replace(/"/g, '""')}"`,
        new Date(contact.createdAt).toLocaleDateString(),
        contact.status || 'new'
      ].join(','))
    ].join('\n')

    const blob = new Blob([csvContent], { type: 'text/csv' })
    const url = window.URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `contacts_${new Date().toISOString().split('T')[0]}.csv`
    a.click()
    window.URL.revokeObjectURL(url)
  }

  const getStatusBadge = (status?: string) => {
    const statusConfig = {
      new: { label: 'New', className: 'bg-blue-100 text-blue-800' },
      contacted: { label: 'Contacted', className: 'bg-yellow-100 text-yellow-800' },
      resolved: { label: 'Resolved', className: 'bg-green-100 text-green-800' },
      closed: { label: 'Closed', className: 'bg-gray-100 text-gray-800' }
    }

    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.new
    return (
      <Badge className={config.className}>
        {config.label}
      </Badge>
    )
  }

  const getPurposeBadge = (purpose: string) => {
    const colors = {
      'Study Visa': 'bg-purple-100 text-purple-800',
      'Admission Help': 'bg-blue-100 text-blue-800',
      'Scholarship': 'bg-green-100 text-green-800',
      'General': 'bg-gray-100 text-gray-800'
    }
    return (
      <Badge className={colors[purpose as keyof typeof colors] || 'bg-gray-100 text-gray-800'}>
        {purpose}
      </Badge>
    )
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-primary"></div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Contact Requests</h1>
          <p className="text-gray-600">Manage student inquiries and follow-ups</p>
        </div>
        <Button onClick={exportToCSV} variant="outline">
          <Download className="w-4 h-4 mr-2" />
          Export CSV
        </Button>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center">
              <MessageSquare className="h-8 w-8 text-blue-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Total Contacts</p>
                <p className="text-2xl font-bold">{contacts.length}</p>
              </div>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center">
              <Clock className="h-8 w-8 text-yellow-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">New</p>
                <p className="text-2xl font-bold">
                  {contacts.filter(c => !c.status || c.status === 'new').length}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center">
              <Mail className="h-8 w-8 text-blue-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Contacted</p>
                <p className="text-2xl font-bold">
                  {contacts.filter(c => c.status === 'contacted').length}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center">
              <CheckCircle className="h-8 w-8 text-green-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Resolved</p>
                <p className="text-2xl font-bold">
                  {contacts.filter(c => c.status === 'resolved').length}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Filters */}
      <Card>
        <CardHeader>
          <CardTitle>Filters</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <Input
                placeholder="Search contacts..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
              />
            </div>
            <Select value={purposeFilter} onValueChange={setPurposeFilter}>
              <SelectTrigger>
                <SelectValue placeholder="Filter by purpose" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Purposes</SelectItem>
                <SelectItem value="Study Visa">Study Visa</SelectItem>
                <SelectItem value="Admission Help">Admission Help</SelectItem>
                <SelectItem value="Scholarship">Scholarship</SelectItem>
                <SelectItem value="General">General</SelectItem>
              </SelectContent>
            </Select>
            <Select value={statusFilter} onValueChange={setStatusFilter}>
              <SelectTrigger>
                <SelectValue placeholder="Filter by status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Statuses</SelectItem>
                <SelectItem value="new">New</SelectItem>
                <SelectItem value="contacted">Contacted</SelectItem>
                <SelectItem value="resolved">Resolved</SelectItem>
                <SelectItem value="closed">Closed</SelectItem>
              </SelectContent>
            </Select>
            <Button 
              variant="outline" 
              onClick={() => {
                setSearchTerm('')
                setPurposeFilter('all')
                setStatusFilter('all')
              }}
            >
              <Filter className="w-4 h-4 mr-2" />
              Clear Filters
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Contacts Table */}
      <Card>
        <CardHeader>
          <CardTitle>Contact Submissions ({filteredContacts.length})</CardTitle>
          <CardDescription>
            Manage and respond to student inquiries
          </CardDescription>
        </CardHeader>
        <CardContent>
          {filteredContacts.length === 0 ? (
            <div className="text-center py-8">
              <MessageSquare className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">No contacts found</h3>
              <p className="text-gray-500">
                {searchTerm || purposeFilter !== 'all' || statusFilter !== 'all'
                  ? 'Try adjusting your filters'
                  : 'No contact submissions yet'
                }
              </p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Name</TableHead>
                    <TableHead>Email</TableHead>
                    <TableHead>Phone</TableHead>
                    <TableHead>Purpose</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Date</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredContacts.map((contact) => (
                    <TableRow key={contact.id}>
                      <TableCell className="font-medium">{contact.name}</TableCell>
                      <TableCell>
                        <div className="flex items-center">
                          <Mail className="w-4 h-4 mr-2 text-gray-400" />
                          {contact.email}
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center">
                          <Phone className="w-4 h-4 mr-2 text-gray-400" />
                          {contact.phone}
                        </div>
                      </TableCell>
                      <TableCell>{getPurposeBadge(contact.purpose)}</TableCell>
                      <TableCell>
                        <Select
                          value={contact.status || 'new'}
                          onValueChange={(value) => updateContactStatus(contact.id, value)}
                          disabled={statusUpdating === contact.id}
                        >
                          <SelectTrigger className="w-32">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="new">New</SelectItem>
                            <SelectItem value="contacted">Contacted</SelectItem>
                            <SelectItem value="resolved">Resolved</SelectItem>
                            <SelectItem value="closed">Closed</SelectItem>
                          </SelectContent>
                        </Select>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center">
                          <Calendar className="w-4 h-4 mr-2 text-gray-400" />
                          {new Date(contact.createdAt).toLocaleDateString()}
                        </div>
                      </TableCell>
                      <TableCell>
                        <Dialog>
                          <DialogTrigger asChild>
                            <Button 
                              variant="outline" 
                              size="sm"
                              onClick={() => setSelectedContact(contact)}
                            >
                              <Eye className="w-4 h-4 mr-2" />
                              View
                            </Button>
                          </DialogTrigger>
                          <DialogContent className="max-w-2xl">
                            <DialogHeader>
                              <DialogTitle>Contact Details</DialogTitle>
                              <DialogDescription>
                                Full information about this contact submission
                              </DialogDescription>
                            </DialogHeader>
                            {selectedContact && (
                              <div className="space-y-4">
                                <div className="grid grid-cols-2 gap-4">
                                  <div>
                                    <Label>Name</Label>
                                    <p className="font-medium">{selectedContact.name}</p>
                                  </div>
                                  <div>
                                    <Label>Email</Label>
                                    <p className="font-medium">{selectedContact.email}</p>
                                  </div>
                                  <div>
                                    <Label>Phone</Label>
                                    <p className="font-medium">{selectedContact.phone}</p>
                                  </div>
                                  <div>
                                    <Label>Purpose</Label>
                                    <div className="mt-1">
                                      {getPurposeBadge(selectedContact.purpose)}
                                    </div>
                                  </div>
                                </div>
                                <div>
                                  <Label>Message</Label>
                                  <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                                    <p className="whitespace-pre-wrap">{selectedContact.message}</p>
                                  </div>
                                </div>
                                <div className="grid grid-cols-2 gap-4">
                                  <div>
                                    <Label>Submitted Date</Label>
                                    <p className="font-medium">
                                      {new Date(selectedContact.createdAt).toLocaleString()}
                                    </p>
                                  </div>
                                  <div>
                                    <Label>Status</Label>
                                    <div className="mt-1">
                                      {getStatusBadge(selectedContact.status)}
                                    </div>
                                  </div>
                                </div>
                              </div>
                            )}
                          </DialogContent>
                        </Dialog>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  )
}

--- File: admin\dashboard\page.tsx ---
'use client'

import { useEffect, useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { useToast } from '@/hooks/use-toast'
import { 
  Users, 
  MessageSquare, 
  Handshake, 
  Gift, 
  TrendingUp,
  FileText,
  Plus,
  Database,
  Globe,
  Trash2
} from 'lucide-react'
import Link from 'next/link'

interface DashboardStats {
  contacts: number
  b2bRequests: number
  luckyDrawEntries: number
  studyPages: number
  recentContacts: any[]
  recentB2B: any[]
}

export default function AdminDashboard() {
  const { toast } = useToast()
  const [stats, setStats] = useState<DashboardStats>({
    contacts: 0,
    b2bRequests: 0,
    luckyDrawEntries: 0,
    studyPages: 0,
    recentContacts: [],
    recentB2B: []
  })
  const [loading, setLoading] = useState(true)
  const [creatingSamples, setCreatingSamples] = useState(false)

  useEffect(() => {
    fetchStats()
  }, [])

  const fetchStats = async () => {
    try {
      const response = await fetch('/api/admin/dashboard/stats')
      const data = await response.json()
      setStats(data)
    } catch (error) {
      console.error('Failed to fetch stats:', error)
    } finally {
      setLoading(false)
    }
  }

  const deleteAllStudyPages = async () => {
    if (!confirm('Are you sure you want to delete ALL study pages? This action cannot be undone.')) {
      return
    }

    try {
      const response = await fetch('/api/admin/study-pages', {
        method: 'DELETE',
      })

      if (response.ok) {
        fetchStats()
        toast({
          title: "Success",
          description: "All study pages deleted successfully",
        })
      } else {
        throw new Error('Failed to delete study pages')
      }
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to delete study pages",
        variant: "destructive",
      })
    }
  }

  const createSampleStudyPages = async () => {
    setCreatingSamples(true)
    try {
      const templatePages = [
        {
          title: 'Study Destination Template',
          slug: 'study-destination-template',
          description: 'A template for creating study destination pages. Customize this with specific country information.',
          bannerUrl: 'https://images.unsplash.com/photo-1524178232363-1fb2b075b655?w=800&h=400&fit=crop',
          seoTitle: 'Study Destination Template - Universities, Scholarships & Visa Guide',
          seoDescription: 'Template guide for study destinations. Customize with specific country information, universities, scholarships, visa requirements, and application process.',
          isActive: true
        }
      ]

      let createdCount = 0
      for (const pageData of templatePages) {
        try {
          const response = await fetch('/api/admin/study-pages', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(pageData),
          })
          if (response.ok) {
            createdCount++
          }
        } catch (error) {
          console.error('Failed to create template page:', pageData.title)
        }
      }

      if (createdCount > 0) {
        fetchStats() // Refresh stats
        alert(`Successfully created ${createdCount} template page!`)
      } else {
        alert('Failed to create sample pages. They may already exist.')
      }
    } catch (error) {
      console.error('Failed to create sample pages:', error)
      alert('Failed to create sample pages')
    } finally {
      setCreatingSamples(false)
    }
  }

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {[...Array(4)].map((_, i) => (
            <Card key={i} className="animate-pulse">
              <CardHeader className="pb-2">
                <div className="h-4 bg-gray-200 rounded w-3/4"></div>
              </CardHeader>
              <CardContent>
                <div className="h-8 bg-gray-200 rounded w-1/2"></div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Dashboard</h1>
          <p className="text-gray-600">Welcome back! Here's an overview of your site.</p>
        </div>
        <Link href="/admin/pages">
          <Button>
            <Plus className="h-4 w-4 mr-2" />
            Create New Page
          </Button>
        </Link>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Contact Requests</CardTitle>
            <MessageSquare className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.contacts}</div>
            <p className="text-xs text-muted-foreground">
              Total contact submissions
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">B2B Requests</CardTitle>
            <Handshake className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.b2bRequests}</div>
            <p className="text-xs text-muted-foreground">
              Partner inquiries
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Lucky Draw Entries</CardTitle>
            <Gift className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.luckyDrawEntries}</div>
            <p className="text-xs text-muted-foreground">
              Contest participants
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Study Pages</CardTitle>
            <FileText className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.studyPages}</div>
            <p className="text-xs text-muted-foreground">
              Active country pages
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Recent Activity */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Recent Contact Requests */}
        <Card>
          <CardHeader>
            <CardTitle>Recent Contact Requests</CardTitle>
            <CardDescription>
              Latest student inquiries
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {stats.recentContacts.length === 0 ? (
                <p className="text-sm text-gray-500">No contact requests yet</p>
              ) : (
                stats.recentContacts.map((contact: any) => (
                  <div key={contact.id} className="flex items-center justify-between">
                    <div className="flex-1 min-w-0">
                      <p className="text-sm font-medium text-gray-900 truncate">
                        {contact.name}
                      </p>
                      <p className="text-sm text-gray-500 truncate">
                        {contact.email}
                      </p>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Badge variant="secondary">{contact.purpose}</Badge>
                      <span className="text-xs text-gray-500">
                        {new Date(contact.createdAt).toLocaleDateString()}
                      </span>
                    </div>
                  </div>
                ))
              )}
            </div>
            {stats.recentContacts.length > 0 && (
              <div className="mt-4">
                <Link href="/admin/contacts">
                  <Button variant="outline" size="sm" className="w-full">
                    View All Contacts
                  </Button>
                </Link>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Recent B2B Requests */}
        <Card>
          <CardHeader>
            <CardTitle>Recent B2B Requests</CardTitle>
            <CardDescription>
              Latest partner inquiries
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {stats.recentB2B.length === 0 ? (
                <p className="text-sm text-gray-500">No B2B requests yet</p>
              ) : (
                stats.recentB2B.map((b2b: any) => (
                  <div key={b2b.id} className="flex items-center justify-between">
                    <div className="flex-1 min-w-0">
                      <p className="text-sm font-medium text-gray-900 truncate">
                        {b2b.company}
                      </p>
                      <p className="text-sm text-gray-500 truncate">
                        {b2b.name}
                      </p>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Badge variant="outline">{b2b.country}</Badge>
                      <span className="text-xs text-gray-500">
                        {new Date(b2b.createdAt).toLocaleDateString()}
                      </span>
                    </div>
                  </div>
                ))
              )}
            </div>
            {stats.recentB2B.length > 0 && (
              <div className="mt-4">
                <Link href="/admin/b2b">
                  <Button variant="outline" size="sm" className="w-full">
                    View All B2B Requests
                  </Button>
                </Link>
              </div>
            )}
          </CardContent>
        </Card>
      </div>

      {/* Quick Actions */}
      <Card>
        <CardHeader>
          <CardTitle>Quick Actions</CardTitle>
          <CardDescription>
            Common tasks you might want to perform
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <Link href="/admin/study-pages">
              <Button variant="outline" className="w-full justify-start">
                <FileText className="h-4 w-4 mr-2" />
                Create Study Page
              </Button>
            </Link>
            <Link href="/admin/contacts">
              <Button variant="outline" className="w-full justify-start">
                <MessageSquare className="h-4 w-4 mr-2" />
                Review Contacts
              </Button>
            </Link>
            <Link href="/admin/lucky-draw">
              <Button variant="outline" className="w-full justify-start">
                <Gift className="h-4 w-4 mr-2" />
                Manage Lucky Draw
              </Button>
            </Link>
            <Button 
              variant="outline" 
              className="w-full justify-start"
              onClick={createSampleStudyPages}
              disabled={creatingSamples}
            >
              <Database className="h-4 w-4 mr-2" />
              {creatingSamples ? 'Creating...' : 'Create Template Page'}
            </Button>
            <Button 
              variant="outline" 
              className="w-full justify-start"
              onClick={deleteAllStudyPages}
            >
              <Trash2 className="h-4 w-4 mr-2" />
              Delete All Study Pages
            </Button>
          </div>
          {stats.studyPages === 0 && (
            <div className="mt-4 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
              <div className="flex items-center">
                <Globe className="h-5 w-5 text-yellow-600 mr-2" />
                <div className="text-sm text-yellow-800">
                  <strong>No study pages found!</strong> Create sample data to see the dropdown menu and Popular Study Destinations section in action.
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  )
}

--- File: admin\layout.tsx ---
'use client'

import { useSession, signOut } from 'next-auth/react'
import { useRouter, usePathname } from 'next/navigation'
import { useEffect, useState } from 'react'
import Link from 'next/link'
import { cn } from '@/lib/utils'
import { Button } from '@/components/ui/button'
import { ScrollArea } from '@/components/ui/scroll-area'
import { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet'
import { 
  LayoutDashboard, 
  MessageSquare, 
  Handshake, 
  FileText, 
  Table, 
  Gift, 
  Settings, 
  Menu,
  LogOut,
  Home,
  Star,
  BarChart3
} from 'lucide-react'

const navigation = [
  { name: 'Dashboard', href: '/admin/dashboard', icon: LayoutDashboard },
  { name: 'Contact Requests', href: '/admin/contacts', icon: MessageSquare },
  { name: 'B2B Requests', href: '/admin/b2b', icon: Handshake },
  { name: 'Study Pages', href: '/admin/study-pages', icon: FileText },
  { name: 'Categories & Cards', href: '/admin/categories', icon: Table },
  { name: 'Testimonials', href: '/admin/testimonials', icon: Star },
  { name: 'Comparison Tables', href: '/tables', icon: BarChart3 },
  { name: 'Lucky Draw', href: '/admin/lucky-draw', icon: Gift },
  { name: 'Settings', href: '/admin/settings', icon: Settings },
]

export default function AdminLayout({
  children,
}: {
  children: React.ReactNode
}) {
  const { data: session, status } = useSession()
  const router = useRouter()
  const pathname = usePathname()
  const [sidebarOpen, setSidebarOpen] = useState(false)

  // Skip authentication check for login page
  const isLoginPage = pathname === '/admin/login'

  useEffect(() => {
    if (status === 'loading') return
    
    if (!isLoginPage && status === 'unauthenticated') {
      router.push('/admin/login')
    }
  }, [status, router, pathname, isLoginPage])

  if (status === 'loading') {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-primary"></div>
      </div>
    )
  }

  // For login page, render without admin layout
  if (isLoginPage) {
    return <>{children}</>
  }

  if (!session) {
    return null
  }

  const Sidebar = () => (
    <div className="flex h-full w-64 flex-col bg-gray-50 border-r">
      <div className="flex h-16 items-center px-6 border-b">
        <Link href="/admin/dashboard" className="flex items-center space-x-2">
          <div className="w-8 h-8 bg-primary rounded-lg flex items-center justify-center">
            <span className="text-primary-foreground font-bold text-sm">SH</span>
          </div>
          <span className="font-semibold text-lg">Study Admin</span>
        </Link>
      </div>
      <ScrollArea className="flex-1 px-4 py-6">
        <nav className="space-y-2">
          {navigation.map((item) => {
            const isActive = pathname === item.href
            return (
              <Link
                key={item.name}
                href={item.href}
                className={cn(
                  'flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors',
                  isActive
                    ? 'bg-primary text-primary-foreground'
                    : 'text-gray-700 hover:bg-gray-100'
                )}
                onClick={() => setSidebarOpen(false)}
              >
                <item.icon className="mr-3 h-4 w-4" />
                {item.name}
              </Link>
            )
          })}
        </nav>
      </ScrollArea>
      <div className="p-4 border-t">
        <div className="flex items-center space-x-3 mb-4">
          <div className="w-8 h-8 bg-primary rounded-full flex items-center justify-center">
            <span className="text-primary-foreground text-sm font-medium">
              {session.user?.name?.charAt(0).toUpperCase()}
            </span>
          </div>
          <div className="flex-1 min-w-0">
            <p className="text-sm font-medium text-gray-900 truncate">
              {session.user?.name}
            </p>
            <p className="text-xs text-gray-500 truncate">
              {session.user?.email}
            </p>
          </div>
        </div>
        <div className="flex space-x-2">
          <Link href="/" className="flex-1">
            <Button variant="outline" size="sm" className="w-full">
              <Home className="h-4 w-4 mr-2" />
              Site
            </Button>
          </Link>
          <Button 
            variant="outline" 
            size="sm" 
            onClick={() => signOut()}
            className="flex-1"
          >
            <LogOut className="h-4 w-4 mr-2" />
            Logout
          </Button>
        </div>
      </div>
    </div>
  )

  return (
    <div className="min-h-screen bg-gray-100">
      {/* Mobile sidebar */}
      <Sheet open={sidebarOpen} onOpenChange={setSidebarOpen}>
        <SheetTrigger asChild>
          <Button
            variant="outline"
            size="icon"
            className="md:hidden fixed top-4 left-4 z-40"
          >
            <Menu className="h-4 w-4" />
          </Button>
        </SheetTrigger>
        <SheetContent side="left" className="p-0 w-64">
          <Sidebar />
        </SheetContent>
      </Sheet>

      {/* Desktop sidebar */}
      <div className="hidden md:fixed md:inset-y-0 md:flex md:z-50">
        <Sidebar />
      </div>

      {/* Main content */}
      <div className="md:pl-64">
        <div className="sticky top-0 z-10 bg-white border-b">
          <div className="flex h-16 items-center px-6">
            <h1 className="text-xl font-semibold text-gray-900">
              {navigation.find(item => item.href === pathname)?.name || 'Admin Panel'}
            </h1>
          </div>
        </div>
        <main className="p-6">
          {children}
        </main>
      </div>
    </div>
  )
}

--- File: admin\login\page.tsx ---
'use client'

import { useState, useEffect } from 'react'
import { signIn, getSession } from 'next-auth/react'
import { useRouter, useSearchParams } from 'next/navigation'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Loader2 } from 'lucide-react'

export default function AdminLogin() {
  const [email, setEmail] = useState('admin@example.com')
  const [password, setPassword] = useState('admin123')
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState('')
  const router = useRouter()
  const searchParams = useSearchParams()

  useEffect(() => {
    // Check for error in URL params
    const urlError = searchParams.get('error')
    if (urlError) {
      setError('Authentication failed. Please try again.')
    }
  }, [searchParams])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    setError('')

    try {
      const result = await signIn('credentials', {
        email,
        password,
        redirect: true,
        callbackUrl: '/admin/dashboard'
      })

      // If signIn returns without error, check session and redirect
      if (!result?.error) {
        // Wait a moment for session to be established
        await new Promise(resolve => setTimeout(resolve, 100))
        
        // Verify session exists before redirecting
        const session = await getSession()
        if (session) {
          router.push('/admin/dashboard')
          router.refresh()
        } else {
          setError('Login failed. Please check your credentials.')
        }
      } else {
        setError('Invalid email or password')
      }
    } catch (error) {
      setError('An error occurred. Please try again.')
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50">
      <Card className="w-full max-w-md">
        <CardHeader className="space-y-1">
          <CardTitle className="text-2xl font-bold text-center">
            Admin Login
          </CardTitle>
          <CardDescription className="text-center">
            Study Abroad with Hadi CMS
          </CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                type="email"
                placeholder="admin@example.com"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="password">Password</Label>
              <Input
                id="password"
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
              />
            </div>
            {error && (
              <Alert variant="destructive">
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}
            <Button
              type="submit"
              className="w-full"
              disabled={isLoading}
            >
              {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
              Sign In
            </Button>
          </form>
          <div className="mt-4 text-sm text-gray-600 text-center">
            <p>Demo credentials:</p>
            <p>Email: admin@example.com</p>
            <p>Password: admin123</p>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

--- File: admin\lucky-draw\page.tsx ---
'use client'

import { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from '@/components/ui/table'
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from '@/components/ui/select'
import { 
  Dialog, 
  DialogContent, 
  DialogDescription, 
  DialogHeader, 
  DialogTitle, 
  DialogTrigger 
} from '@/components/ui/dialog'
import { 
  Switch
} from '@/components/ui/switch'
import { Label } from '@/components/ui/label'
import { 
  Gift, 
  Search, 
  Filter, 
  Download, 
  Eye, 
  Mail,
  Phone,
  Globe,
  Calendar,
  Trophy,
  Users,
  Crown,
  Dice1
} from 'lucide-react'
import { toast } from 'sonner'

interface LuckyDrawEntry {
  id: number
  name: string
  email: string
  phone: string
  country: string
  reason: string
  createdAt: string
  isWinner?: boolean
}

export default function AdminLuckyDrawPage() {
  const [entries, setEntries] = useState<LuckyDrawEntry[]>([])
  const [filteredEntries, setFilteredEntries] = useState<LuckyDrawEntry[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [countryFilter, setCountryFilter] = useState<string>('all')
  const [winnerFilter, setWinnerFilter] = useState<string>('all')
  const [selectedEntry, setSelectedEntry] = useState<LuckyDrawEntry | null>(null)
  const [isDrawActive, setIsDrawActive] = useState(true)
  const [isDrawing, setIsDrawing] = useState(false)
  const [currentWinner, setCurrentWinner] = useState<LuckyDrawEntry | null>(null)
  const [winnerHistory, setWinnerHistory] = useState<LuckyDrawEntry[]>([])

  useEffect(() => {
    fetchEntries()
  }, [])

  useEffect(() => {
    filterEntries()
  }, [entries, searchTerm, countryFilter, winnerFilter])

  const fetchEntries = async () => {
    try {
      const response = await fetch('/api/lucky-draw')
      if (response.ok) {
        const data = await response.json()
        setEntries(data)
      }
    } catch (error) {
      toast.error('Failed to fetch lucky draw entries')
    } finally {
      setLoading(false)
    }
  }

  const filterEntries = () => {
    let filtered = entries

    if (searchTerm) {
      filtered = filtered.filter(entry =>
        entry.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        entry.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
        entry.reason.toLowerCase().includes(searchTerm.toLowerCase())
      )
    }

    if (countryFilter !== 'all') {
      filtered = filtered.filter(entry => entry.country === countryFilter)
    }

    if (winnerFilter !== 'all') {
      if (winnerFilter === 'winners') {
        filtered = filtered.filter(entry => entry.isWinner)
      } else if (winnerFilter === 'participants') {
        filtered = filtered.filter(entry => !entry.isWinner)
      }
    }

    setFilteredEntries(filtered)
  }

  const selectRandomWinner = async () => {
    if (entries.length === 0) {
      toast.error('No entries available for drawing')
      return
    }

    setIsDrawing(true)
    
    // Simulate drawing animation
    let iterations = 0
    const maxIterations = 20
    const interval = setInterval(() => {
      const randomIndex = Math.floor(Math.random() * entries.length)
      setCurrentWinner(entries[randomIndex])
      iterations++
      
      if (iterations >= maxIterations) {
        clearInterval(interval)
        const finalWinner = entries[Math.floor(Math.random() * entries.length)]
        setCurrentWinner(finalWinner)
        
        // Mark as winner in database
        markAsWinner(finalWinner.id)
        setIsDrawing(false)
      }
    }, 100)
  }

  const markAsWinner = async (entryId: number) => {
    try {
      const response = await fetch(`/api/lucky-draw/${entryId}/winner`, {
        method: 'PATCH'
      })

      if (response.ok) {
        const result = await response.json()
        setEntries(prev => 
          prev.map(entry => 
            entry.id === entryId 
              ? { ...entry, isWinner: true }
              : entry
          )
        )
        setWinnerHistory(prev => [...prev, result.winner])
        toast.success(`🎉 Winner selected: ${result.winner.name}!`)
      }
    } catch (error) {
      toast.error('Failed to mark winner')
    }
  }

  const resetDraw = async () => {
    try {
      const response = await fetch('/api/lucky-draw/reset', {
        method: 'POST'
      })

      if (response.ok) {
        setEntries(prev => 
          prev.map(entry => ({ ...entry, isWinner: false }))
        )
        setCurrentWinner(null)
        setWinnerHistory([])
        toast.success('Lucky draw has been reset')
      }
    } catch (error) {
      toast.error('Failed to reset lucky draw')
    }
  }

  const exportToCSV = () => {
    const headers = ['Name', 'Email', 'Phone', 'Country', 'Reason', 'Date', 'Winner']
    const csvContent = [
      headers.join(','),
      ...filteredEntries.map(entry => [
        entry.name,
        entry.email,
        entry.phone,
        entry.country,
        `"${entry.reason.replace(/"/g, '""')}"`,
        new Date(entry.createdAt).toLocaleDateString(),
        entry.isWinner ? 'Yes' : 'No'
      ].join(','))
    ].join('\n')

    const blob = new Blob([csvContent], { type: 'text/csv' })
    const url = window.URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `lucky_draw_entries_${new Date().toISOString().split('T')[0]}.csv`
    a.click()
    window.URL.revokeObjectURL(url)
  }

  const getUniqueCountries = () => {
    const countries = [...new Set(entries.map(e => e.country))]
    return countries.sort()
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-primary"></div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Lucky Draw Management</h1>
          <p className="text-gray-600">Manage contest entries and select winners</p>
        </div>
        <div className="flex items-center space-x-2">
          <div className="flex items-center space-x-2">
            <Label htmlFor="draw-active">Contest Active</Label>
            <Switch
              id="draw-active"
              checked={isDrawActive}
              onCheckedChange={setIsDrawActive}
            />
          </div>
          <Button onClick={exportToCSV} variant="outline">
            <Download className="w-4 h-4 mr-2" />
            Export CSV
          </Button>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center">
              <Users className="h-8 w-8 text-blue-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Total Entries</p>
                <p className="text-2xl font-bold">{entries.length}</p>
              </div>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center">
              <Globe className="h-8 w-8 text-green-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Countries</p>
                <p className="text-2xl font-bold">{getUniqueCountries().length}</p>
              </div>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center">
              <Trophy className="h-8 w-8 text-yellow-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Winners</p>
                <p className="text-2xl font-bold">
                  {entries.filter(e => e.isWinner).length}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center">
              <Gift className="h-8 w-8 text-purple-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Status</p>
                <p className="text-2xl font-bold">
                  {isDrawActive ? 'Active' : 'Inactive'}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Winner Selection */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center">
            <Dice1 className="w-5 h-5 mr-2" />
            Winner Selection
          </CardTitle>
          <CardDescription>
            Select a random winner from all participants
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="flex items-center space-x-4">
              <Button
                onClick={selectRandomWinner}
                disabled={isDrawing || entries.length === 0 || !isDrawActive}
                size="lg"
                className="bg-gradient-to-r from-yellow-500 to-orange-500 hover:from-yellow-600 hover:to-orange-600"
              >
                {isDrawing ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    Drawing...
                  </>
                ) : (
                  <>
                    <Trophy className="w-4 h-4 mr-2" />
                    Select Random Winner
                  </>
                )}
              </Button>
              <Button
                onClick={resetDraw}
                variant="outline"
                disabled={isDrawing}
              >
                Reset Draw
              </Button>
            </div>

            {currentWinner && (
              <div className="bg-gradient-to-r from-yellow-50 to-orange-50 border border-yellow-200 rounded-lg p-6">
                <div className="flex items-center space-x-4">
                  <div className="w-16 h-16 bg-yellow-100 rounded-full flex items-center justify-center">
                    <Crown className="w-8 h-8 text-yellow-600" />
                  </div>
                  <div>
                    <h3 className="text-xl font-bold text-gray-900">
                      🎉 Current Winner: {currentWinner.name}
                    </h3>
                    <p className="text-gray-600">
                      {currentWinner.email} • {currentWinner.country}
                    </p>
                    {currentWinner.isWinner && (
                      <Badge className="mt-2 bg-green-100 text-green-800">
                        Official Winner
                      </Badge>
                    )}
                  </div>
                </div>
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Filters */}
      <Card>
        <CardHeader>
          <CardTitle>Filters</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <Input
                placeholder="Search entries..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
              />
            </div>
            <Select value={countryFilter} onValueChange={setCountryFilter}>
              <SelectTrigger>
                <SelectValue placeholder="Filter by country" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Countries</SelectItem>
                {getUniqueCountries().map(country => (
                  <SelectItem key={country} value={country}>
                    {country}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            <Select value={winnerFilter} onValueChange={setWinnerFilter}>
              <SelectTrigger>
                <SelectValue placeholder="Filter by status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Entries</SelectItem>
                <SelectItem value="participants">Participants</SelectItem>
                <SelectItem value="winners">Winners</SelectItem>
              </SelectContent>
            </Select>
            <Button 
              variant="outline" 
              onClick={() => {
                setSearchTerm('')
                setCountryFilter('all')
                setWinnerFilter('all')
              }}
            >
              <Filter className="w-4 h-4 mr-2" />
              Clear Filters
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Entries Table */}
      <Card>
        <CardHeader>
          <CardTitle>Lucky Draw Entries ({filteredEntries.length})</CardTitle>
          <CardDescription>
            View and manage all contest participants
          </CardDescription>
        </CardHeader>
        <CardContent>
          {filteredEntries.length === 0 ? (
            <div className="text-center py-8">
              <Gift className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">No entries found</h3>
              <p className="text-gray-500">
                {searchTerm || countryFilter !== 'all' || winnerFilter !== 'all'
                  ? 'Try adjusting your filters'
                  : 'No lucky draw entries yet'
                }
              </p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Name</TableHead>
                    <TableHead>Email</TableHead>
                    <TableHead>Phone</TableHead>
                    <TableHead>Country</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Date</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredEntries.map((entry) => (
                    <TableRow key={entry.id} className={entry.isWinner ? 'bg-yellow-50' : ''}>
                      <TableCell className="font-medium">
                        <div className="flex items-center">
                          {entry.isWinner && <Crown className="w-4 h-4 mr-2 text-yellow-600" />}
                          {entry.name}
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center">
                          <Mail className="w-4 h-4 mr-2 text-gray-400" />
                          {entry.email}
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center">
                          <Phone className="w-4 h-4 mr-2 text-gray-400" />
                          {entry.phone}
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center">
                          <Globe className="w-4 h-4 mr-2 text-gray-400" />
                          {entry.country}
                        </div>
                      </TableCell>
                      <TableCell>
                        {entry.isWinner ? (
                          <Badge className="bg-yellow-100 text-yellow-800">
                            <Crown className="w-3 h-3 mr-1" />
                            Winner
                          </Badge>
                        ) : (
                          <Badge variant="outline">Participant</Badge>
                        )}
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center">
                          <Calendar className="w-4 h-4 mr-2 text-gray-400" />
                          {new Date(entry.createdAt).toLocaleDateString()}
                        </div>
                      </TableCell>
                      <TableCell>
                        <Dialog>
                          <DialogTrigger asChild>
                            <Button 
                              variant="outline" 
                              size="sm"
                              onClick={() => setSelectedEntry(entry)}
                            >
                              <Eye className="w-4 h-4 mr-2" />
                              View
                            </Button>
                          </DialogTrigger>
                          <DialogContent className="max-w-2xl">
                            <DialogHeader>
                              <DialogTitle>Entry Details</DialogTitle>
                              <DialogDescription>
                                Full information about this lucky draw entry
                              </DialogDescription>
                            </DialogHeader>
                            {selectedEntry && (
                              <div className="space-y-4">
                                <div className="grid grid-cols-2 gap-4">
                                  <div>
                                    <Label>Name</Label>
                                    <p className="font-medium">{selectedEntry.name}</p>
                                  </div>
                                  <div>
                                    <Label>Email</Label>
                                    <p className="font-medium">{selectedEntry.email}</p>
                                  </div>
                                  <div>
                                    <Label>Phone</Label>
                                    <p className="font-medium">{selectedEntry.phone}</p>
                                  </div>
                                  <div>
                                    <Label>Country</Label>
                                    <div className="flex items-center mt-1">
                                      <Globe className="w-4 h-4 mr-2 text-gray-400" />
                                      <p className="font-medium">{selectedEntry.country}</p>
                                    </div>
                                  </div>
                                </div>
                                <div>
                                  <Label>Why they want to study abroad</Label>
                                  <div className="mt-1 p-3 bg-gray-50 rounded-lg">
                                    <p className="whitespace-pre-wrap">{selectedEntry.reason}</p>
                                  </div>
                                </div>
                                <div className="grid grid-cols-2 gap-4">
                                  <div>
                                    <Label>Submitted Date</Label>
                                    <p className="font-medium">
                                      {new Date(selectedEntry.createdAt).toLocaleString()}
                                    </p>
                                  </div>
                                  <div>
                                    <Label>Status</Label>
                                    <div className="mt-1">
                                      {selectedEntry.isWinner ? (
                                        <Badge className="bg-yellow-100 text-yellow-800">
                                          <Crown className="w-3 h-3 mr-1" />
                                          Winner
                                        </Badge>
                                      ) : (
                                        <Badge variant="outline">Participant</Badge>
                                      )}
                                    </div>
                                  </div>
                                </div>
                              </div>
                            )}
                          </DialogContent>
                        </Dialog>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  )
}

--- File: admin\page.tsx ---
'use client'

import { useSession } from 'next-auth/react'
import { useRouter } from 'next/navigation'
import { useEffect } from 'react'

export default function AdminIndex() {
  const { data: session, status } = useSession()
  const router = useRouter()

  useEffect(() => {
    if (status === 'loading') return

    if (status === 'unauthenticated') {
      router.push('/admin/login')
    } else if (status === 'authenticated') {
      router.push('/admin/dashboard')
    }
  }, [status, router])

  // Show loading state while checking authentication
  if (status === 'loading') {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-primary"></div>
      </div>
    )
  }

  // This should not render as the user will be redirected
  return null
}

--- File: admin\settings\page.tsx ---
'use client'

import { useState, useEffect } from 'react'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import * as z from 'zod'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Label } from '@/components/ui/label'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Loader2, Palette, Globe, User, Save, Eye, Shield, Navigation, Lock, Key, Plus, Trash2 } from 'lucide-react'
import { useTheme } from '@/components/theme-provider'
import { toast } from 'sonner'

const settingsSchema = z.object({
  siteName: z.string().min(1, 'Site name is required'),
  siteUrl: z.string().url('Please enter a valid URL'),
  logoUrl: z.string().url('Please enter a valid URL').optional().or(z.literal('')),
  faviconUrl: z.string().url('Please enter a valid URL').optional().or(z.literal('')),
  contactEmail: z.string().email('Please enter a valid email'),
  contactPhone: z.string().min(1, 'Phone number is required'),
  address: z.string().optional(),
  aboutContent: z.string().optional(),
  metaTitle: z.string().optional(),
  metaDescription: z.string().optional(),
  primaryColor: z.string().regex(/^#[0-9A-Fa-f]{6}$/, 'Please enter a valid hex color'),
  secondaryColor: z.string().regex(/^#[0-9A-Fa-f]{6}$/, 'Please enter a valid hex color'),
  accentColor: z.string().regex(/^#[0-9A-Fa-f]{6}$/, 'Please enter a valid hex color'),
  adminName: z.string().min(1, 'Admin name is required'),
  adminEmail: z.string().email('Please enter a valid email'),
  adminPhone: z.string().min(1, 'Admin phone is required'),
  adminTitle: z.string().min(1, 'Admin title is required'),
  adminBio: z.string().optional(),
})

type SettingsFormData = z.infer<typeof settingsSchema>

export default function AdminSettingsPage() {
  const { settings, updateSettings, isLoading } = useTheme()
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [previewMode, setPreviewMode] = useState(false)
  const [passwordData, setPasswordData] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  })
  const [isChangingPassword, setIsChangingPassword] = useState(false)
  const [navbarLinks, setNavbarLinks] = useState<Array<{
    id: string
    label: string
    href: string
    isVisible: boolean
    order: number
  }>>([])
  const [isUpdatingNavbar, setIsUpdatingNavbar] = useState(false)

  const {
    register,
    handleSubmit,
    formState: { errors },
    reset,
    watch,
    setValue
  } = useForm<SettingsFormData>({
    resolver: zodResolver(settingsSchema)
  })

  const watchedColors = watch(['primaryColor', 'secondaryColor', 'accentColor'])

  // Initialize form with settings
  useEffect(() => {
    if (settings) {
      reset({
        siteName: settings.siteName,
        siteUrl: settings.siteUrl,
        logoUrl: settings.logoUrl || '',
        faviconUrl: settings.faviconUrl || '',
        contactEmail: settings.contactEmail,
        contactPhone: settings.contactPhone,
        address: settings.address || '',
        aboutContent: settings.aboutContent || '',
        metaTitle: settings.metaTitle || '',
        metaDescription: settings.metaDescription || '',
        primaryColor: settings.primaryColor,
        secondaryColor: settings.secondaryColor,
        accentColor: settings.accentColor,
        adminName: settings.adminName,
        adminEmail: settings.adminEmail,
        adminPhone: settings.adminPhone,
        adminTitle: settings.adminTitle,
        adminBio: settings.adminBio || '',
      })
    }
  }, [settings, reset])

  // Update theme colors in real-time
  useEffect(() => {
    if (previewMode) {
      const [primary, secondary, accent] = watchedColors
      if (primary && secondary && accent) {
        updateSettings({
          primaryColor: primary,
          secondaryColor: secondary,
          accentColor: accent
        })
      }
    }
  }, [watchedColors, previewMode, updateSettings])

  const onSubmit = async (data: SettingsFormData) => {
    setIsSubmitting(true)
    try {
      const response = await fetch('/api/admin/settings', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      })

      if (response.ok) {
        const result = await response.json()
        updateSettings(result.settings)
        toast.success('Settings updated successfully!')
        setPreviewMode(false)
      } else {
        throw new Error('Failed to update settings')
      }
    } catch (error) {
      toast.error('Failed to update settings. Please try again.')
    } finally {
      setIsSubmitting(false)
    }
  }

  const handleResetColors = () => {
    setValue('primaryColor', '#3b82f6')
    setValue('secondaryColor', '#6366f1')
    setValue('accentColor', '#f59e0b')
  }

  const handlePasswordChange = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (passwordData.newPassword !== passwordData.confirmPassword) {
      toast.error('New passwords do not match')
      return
    }
    
    if (passwordData.newPassword.length < 6) {
      toast.error('Password must be at least 6 characters long')
      return
    }

    setIsChangingPassword(true)
    try {
      const response = await fetch('/api/admin/change-password', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          currentPassword: passwordData.currentPassword,
          newPassword: passwordData.newPassword
        })
      })

      if (response.ok) {
        toast.success('Password changed successfully!')
        setPasswordData({ currentPassword: '', newPassword: '', confirmPassword: '' })
      } else {
        const error = await response.json()
        toast.error(error.message || 'Failed to change password')
      }
    } catch (error) {
      toast.error('Failed to change password. Please try again.')
    } finally {
      setIsChangingPassword(false)
    }
  }

  const fetchNavbarLinks = async () => {
    try {
      const response = await fetch('/api/admin/navbar-links')
      if (response.ok) {
        const data = await response.json()
        setNavbarLinks(data)
      }
    } catch (error) {
      console.error('Failed to fetch navbar links:', error)
    }
  }

  const updateNavbarLinks = async () => {
    setIsUpdatingNavbar(true)
    try {
      const response = await fetch('/api/admin/navbar-links', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ links: navbarLinks })
      })

      if (response.ok) {
        toast.success('Navbar links updated successfully!')
      } else {
        toast.error('Failed to update navbar links')
      }
    } catch (error) {
      toast.error('Failed to update navbar links. Please try again.')
    } finally {
      setIsUpdatingNavbar(false)
    }
  }

  const addNavbarLink = () => {
    const newLink = {
      id: Date.now().toString(),
      label: 'New Link',
      href: '#',
      isVisible: true,
      order: navbarLinks.length
    }
    setNavbarLinks([...navbarLinks, newLink])
  }

  const updateNavbarLink = (id: string, updates: Partial<typeof navbarLinks[0]>) => {
    setNavbarLinks(navbarLinks.map(link => 
      link.id === id ? { ...link, ...updates } : link
    ))
  }

  const deleteNavbarLink = (id: string) => {
    setNavbarLinks(navbarLinks.filter(link => link.id !== id))
  }

  useEffect(() => {
    fetchNavbarLinks()
  }, [])

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <Loader2 className="h-8 w-8 animate-spin" />
      </div>
    )
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Settings</h1>
          <p className="text-gray-600">Manage your site settings and appearance</p>
        </div>
        <div className="flex items-center space-x-2">
          <Button
            variant={previewMode ? "default" : "outline"}
            onClick={() => setPreviewMode(!previewMode)}
          >
            <Eye className="w-4 h-4 mr-2" />
            {previewMode ? 'Previewing' : 'Preview'}
          </Button>
        </div>
      </div>

      {previewMode && (
        <Alert>
          <Eye className="h-4 w-4" />
          <AlertDescription>
            You are in preview mode. Changes to colors will be reflected immediately but won't be saved until you click "Save Changes".
          </AlertDescription>
        </Alert>
      )}

      <form onSubmit={handleSubmit(onSubmit)}>
        <Tabs defaultValue="general" className="space-y-6">
          <TabsList className="grid w-full grid-cols-6">
            <TabsTrigger value="general">General</TabsTrigger>
            <TabsTrigger value="appearance">Appearance</TabsTrigger>
            <TabsTrigger value="admin">Admin Info</TabsTrigger>
            <TabsTrigger value="security">Security</TabsTrigger>
            <TabsTrigger value="navigation">Navigation</TabsTrigger>
            <TabsTrigger value="seo">SEO</TabsTrigger>
          </TabsList>

          <TabsContent value="general" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Globe className="w-5 h-5 mr-2" />
                  Site Information
                </CardTitle>
                <CardDescription>
                  Basic information about your website
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="siteName">Site Name *</Label>
                    <Input
                      id="siteName"
                      {...register('siteName')}
                      className={errors.siteName ? 'border-red-500' : ''}
                    />
                    {errors.siteName && (
                      <p className="text-sm text-red-500">{errors.siteName.message}</p>
                    )}
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="siteUrl">Site URL *</Label>
                    <Input
                      id="siteUrl"
                      {...register('siteUrl')}
                      placeholder="https://studyabroadwithhadi.info"
                      className={errors.siteUrl ? 'border-red-500' : ''}
                    />
                    {errors.siteUrl && (
                      <p className="text-sm text-red-500">{errors.siteUrl.message}</p>
                    )}
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="logoUrl">Logo URL</Label>
                    <Input
                      id="logoUrl"
                      {...register('logoUrl')}
                      placeholder="https://example.com/logo.png"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="faviconUrl">Favicon URL</Label>
                    <Input
                      id="faviconUrl"
                      {...register('faviconUrl')}
                      placeholder="https://example.com/favicon.ico"
                    />
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="contactEmail">Contact Email *</Label>
                    <Input
                      id="contactEmail"
                      type="email"
                      {...register('contactEmail')}
                      className={errors.contactEmail ? 'border-red-500' : ''}
                    />
                    {errors.contactEmail && (
                      <p className="text-sm text-red-500">{errors.contactEmail.message}</p>
                    )}
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="contactPhone">Contact Phone *</Label>
                    <Input
                      id="contactPhone"
                      {...register('contactPhone')}
                      className={errors.contactPhone ? 'border-red-500' : ''}
                    />
                    {errors.contactPhone && (
                      <p className="text-sm text-red-500">{errors.contactPhone.message}</p>
                    )}
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="address">Address</Label>
                  <Textarea
                    id="address"
                    {...register('address')}
                    placeholder="123 Education Street, Learning City, LC 12345"
                    rows={3}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="aboutContent">About Content</Label>
                  <Textarea
                    id="aboutContent"
                    {...register('aboutContent')}
                    placeholder="Tell visitors about your consulting services..."
                    rows={4}
                  />
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="appearance" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Palette className="w-5 h-5 mr-2" />
                  Theme Colors
                </CardTitle>
                <CardDescription>
                  Customize the appearance of your website
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div className="space-y-2">
                    <Label htmlFor="primaryColor">Primary Color</Label>
                    <div className="flex items-center space-x-2">
                      <Input
                        id="primaryColor"
                        {...register('primaryColor')}
                        placeholder="#3b82f6"
                        className={errors.primaryColor ? 'border-red-500' : ''}
                      />
                      <div 
                        className="w-10 h-10 rounded border"
                        style={{ backgroundColor: watchedColors[0] }}
                      />
                    </div>
                    {errors.primaryColor && (
                      <p className="text-sm text-red-500">{errors.primaryColor.message}</p>
                    )}
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="secondaryColor">Secondary Color</Label>
                    <div className="flex items-center space-x-2">
                      <Input
                        id="secondaryColor"
                        {...register('secondaryColor')}
                        placeholder="#6366f1"
                        className={errors.secondaryColor ? 'border-red-500' : ''}
                      />
                      <div 
                        className="w-10 h-10 rounded border"
                        style={{ backgroundColor: watchedColors[1] }}
                      />
                    </div>
                    {errors.secondaryColor && (
                      <p className="text-sm text-red-500">{errors.secondaryColor.message}</p>
                    )}
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="accentColor">Accent Color</Label>
                    <div className="flex items-center space-x-2">
                      <Input
                        id="accentColor"
                        {...register('accentColor')}
                        placeholder="#f59e0b"
                        className={errors.accentColor ? 'border-red-500' : ''}
                      />
                      <div 
                        className="w-10 h-10 rounded border"
                        style={{ backgroundColor: watchedColors[2] }}
                      />
                    </div>
                    {errors.accentColor && (
                      <p className="text-sm text-red-500">{errors.accentColor.message}</p>
                    )}
                  </div>
                </div>

                <div className="flex items-center space-x-4">
                  <Button type="button" variant="outline" onClick={handleResetColors}>
                    Reset to Default
                  </Button>
                  <div className="text-sm text-gray-500">
                    Default: Blue (#3b82f6), Indigo (#6366f1), Amber (#f59e0b)
                  </div>
                </div>

                {/* Color Preview */}
                <div className="border rounded-lg p-4 space-y-3">
                  <h4 className="font-medium">Color Preview</h4>
                  <div className="flex flex-wrap gap-3">
                    <div 
                      className="px-4 py-2 rounded text-white text-sm"
                      style={{ backgroundColor: watchedColors[0] }}
                    >
                      Primary
                    </div>
                    <div 
                      className="px-4 py-2 rounded text-white text-sm"
                      style={{ backgroundColor: watchedColors[1] }}
                    >
                      Secondary
                    </div>
                    <div 
                      className="px-4 py-2 rounded text-white text-sm"
                      style={{ backgroundColor: watchedColors[2] }}
                    >
                      Accent
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="admin" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <User className="w-5 h-5 mr-2" />
                  Admin Information
                </CardTitle>
                <CardDescription>
                  Your personal information displayed on the website
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="adminName">Your Name *</Label>
                    <Input
                      id="adminName"
                      {...register('adminName')}
                      className={errors.adminName ? 'border-red-500' : ''}
                    />
                    {errors.adminName && (
                      <p className="text-sm text-red-500">{errors.adminName.message}</p>
                    )}
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="adminTitle">Your Title *</Label>
                    <Input
                      id="adminTitle"
                      {...register('adminTitle')}
                      placeholder="Expert Visa Consultant"
                      className={errors.adminTitle ? 'border-red-500' : ''}
                    />
                    {errors.adminTitle && (
                      <p className="text-sm text-red-500">{errors.adminTitle.message}</p>
                    )}
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="adminEmail">Admin Email *</Label>
                    <Input
                      id="adminEmail"
                      type="email"
                      {...register('adminEmail')}
                      className={errors.adminEmail ? 'border-red-500' : ''}
                    />
                    {errors.adminEmail && (
                      <p className="text-sm text-red-500">{errors.adminEmail.message}</p>
                    )}
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="adminPhone">Admin Phone *</Label>
                    <Input
                      id="adminPhone"
                      {...register('adminPhone')}
                      className={errors.adminPhone ? 'border-red-500' : ''}
                    />
                    {errors.adminPhone && (
                      <p className="text-sm text-red-500">{errors.adminPhone.message}</p>
                    )}
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="adminBio">Professional Bio</Label>
                  <Textarea
                    id="adminBio"
                    {...register('adminBio')}
                    placeholder="Tell visitors about your experience and expertise..."
                    rows={4}
                  />
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="security" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Shield className="w-5 h-5 mr-2" />
                  Security Settings
                </CardTitle>
                <CardDescription>
                  Manage your account security and password
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <form onSubmit={handlePasswordChange} className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="currentPassword">Current Password</Label>
                    <Input
                      id="currentPassword"
                      type="password"
                      value={passwordData.currentPassword}
                      onChange={(e) => setPasswordData({...passwordData, currentPassword: e.target.value})}
                      placeholder="Enter your current password"
                      required
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="newPassword">New Password</Label>
                    <Input
                      id="newPassword"
                      type="password"
                      value={passwordData.newPassword}
                      onChange={(e) => setPasswordData({...passwordData, newPassword: e.target.value})}
                      placeholder="Enter your new password"
                      required
                    />
                    <p className="text-sm text-gray-500">
                      Password must be at least 6 characters long
                    </p>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="confirmPassword">Confirm New Password</Label>
                    <Input
                      id="confirmPassword"
                      type="password"
                      value={passwordData.confirmPassword}
                      onChange={(e) => setPasswordData({...passwordData, confirmPassword: e.target.value})}
                      placeholder="Confirm your new password"
                      required
                    />
                  </div>

                  <Button type="submit" disabled={isChangingPassword}>
                    <Lock className="w-4 h-4 mr-2" />
                    {isChangingPassword ? 'Changing Password...' : 'Change Password'}
                  </Button>
                </form>

                <div className="border-t pt-6">
                  <h4 className="font-medium mb-4">Security Tips</h4>
                  <ul className="space-y-2 text-sm text-gray-600">
                    <li>• Use a strong password with a mix of letters, numbers, and symbols</li>
                    <li>• Don't share your password with anyone</li>
                    <li>• Change your password regularly</li>
                    <li>• Use a unique password for this account</li>
                  </ul>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="navigation" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Navigation className="w-5 h-5 mr-2" />
                  Navigation Management
                </CardTitle>
                <CardDescription>
                  Manage the links shown in your website navigation bar
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="flex justify-between items-center">
                  <h4 className="font-medium">Navbar Links</h4>
                  <Button onClick={addNavbarLink} variant="outline">
                    <Plus className="w-4 h-4 mr-2" />
                    Add Link
                  </Button>
                </div>

                <div className="space-y-3">
                  {navbarLinks.map((link, index) => (
                    <div key={link.id} className="flex items-center gap-3 p-3 border rounded-lg">
                      <div className="flex-1 grid grid-cols-1 md:grid-cols-3 gap-3">
                        <Input
                          value={link.label}
                          onChange={(e) => updateNavbarLink(link.id, { label: e.target.value })}
                          placeholder="Link Label"
                        />
                        <Input
                          value={link.href}
                          onChange={(e) => updateNavbarLink(link.id, { href: e.target.value })}
                          placeholder="Link URL"
                        />
                        <div className="flex items-center gap-2">
                          <input
                            type="checkbox"
                            checked={link.isVisible}
                            onChange={(e) => updateNavbarLink(link.id, { isVisible: e.target.checked })}
                            className="rounded"
                          />
                          <span className="text-sm">Visible</span>
                        </div>
                      </div>
                      <div className="flex items-center gap-2">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => updateNavbarLink(link.id, { order: Math.max(0, index - 1) })}
                          disabled={index === 0}
                        >
                          ↑
                        </Button>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => updateNavbarLink(link.id, { order: Math.min(navbarLinks.length - 1, index + 1) })}
                          disabled={index === navbarLinks.length - 1}
                        >
                          ↓
                        </Button>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => deleteNavbarLink(link.id)}
                          className="text-red-600 hover:text-red-700"
                        >
                          <Trash2 className="w-4 h-4" />
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>

                {navbarLinks.length === 0 && (
                  <div className="text-center py-8 text-gray-500">
                    <Navigation className="w-12 h-12 mx-auto mb-4 text-gray-300" />
                    <p>No navigation links configured</p>
                    <p className="text-sm">Click "Add Link" to create your first navigation link</p>
                  </div>
                )}

                <div className="flex justify-end">
                  <Button onClick={updateNavbarLinks} disabled={isUpdatingNavbar}>
                    <Save className="w-4 h-4 mr-2" />
                    {isUpdatingNavbar ? 'Updating...' : 'Update Navigation'}
                  </Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="seo" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>SEO Settings</CardTitle>
                <CardDescription>
                  Search engine optimization settings
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="metaTitle">Meta Title</Label>
                  <Input
                    id="metaTitle"
                    {...register('metaTitle')}
                    placeholder="Study Abroad with Hadi - Visa Consulting & International Education"
                  />
                  <p className="text-sm text-gray-500">
                    Recommended: 50-60 characters
                  </p>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="metaDescription">Meta Description</Label>
                  <Textarea
                    id="metaDescription"
                    {...register('metaDescription')}
                    placeholder="Expert visa consulting services for students looking to study abroad..."
                    rows={3}
                  />
                  <p className="text-sm text-gray-500">
                    Recommended: 150-160 characters
                  </p>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>

        <div className="flex justify-end space-x-4">
          <Button type="submit" disabled={isSubmitting}>
            <Save className="w-4 h-4 mr-2" />
            {isSubmitting ? 'Saving...' : 'Save Changes'}
          </Button>
        </div>
      </form>
    </div>
  )
}

--- File: admin\study-pages\page.tsx ---
'use client'

import { useState, useEffect } from 'react'
import { useSession } from 'next-auth/react'
import { useRouter } from 'next/navigation'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Switch } from '@/components/ui/switch'
import { 
  Plus, 
  Edit, 
  Trash2, 
  Eye, 
  EyeOff, 
  Globe, 
  FileText,
  Save,
  X,
  Copy,
  ExternalLink,
  RefreshCw
} from 'lucide-react'
import { toast } from 'sonner'
import Link from 'next/link'
import ImageUpload from '@/components/ui/image-upload'

interface StudyPage {
  id: number
  title: string
  slug: string
  description: string
  bannerUrl: string | null
  seoTitle: string | null
  seoDescription: string | null
  isActive: boolean
  createdAt: string
  updatedAt: string
  _count: {
    categories: number
    cards: number
  }
}

export default function StudyPagesManagement() {
  const { data: session, status } = useSession()
  const router = useRouter()
  const [studyPages, setStudyPages] = useState<StudyPage[]>([])
  const [loading, setLoading] = useState(true)
  const [refreshing, setRefreshing] = useState(false)
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false)
  const [editingPage, setEditingPage] = useState<StudyPage | null>(null)
  const [formData, setFormData] = useState({
    title: '',
    slug: '',
    description: '',
    bannerUrl: '',
    seoTitle: '',
    seoDescription: '',
    isActive: true
  })

  useEffect(() => {
    if (status === 'unauthenticated') {
      router.push('/admin/login')
    }
  }, [status, router])

  useEffect(() => {
    if (session) {
      fetchStudyPages()
    }
  }, [session])

  const fetchStudyPages = async () => {
    try {
      const response = await fetch('/api/admin/study-pages')
      if (response.ok) {
        const data = await response.json()
        setStudyPages(data)
      }
    } catch (error) {
      toast.error('Failed to fetch study pages')
    } finally {
      setLoading(false)
    }
  }

  const refreshStudyPages = async () => {
    setRefreshing(true)
    await fetchStudyPages()
    setRefreshing(false)
    toast.success('Study pages refreshed')
  }

  const generateSlug = (title: string) => {
    return title
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/(^-|-$)/g, '')
  }

  const handleTitleChange = (title: string) => {
    setFormData(prev => ({
      ...prev,
      title,
      slug: prev.slug || generateSlug(title)
    }))
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    try {
      const url = editingPage 
        ? `/api/admin/study-pages/${editingPage.id}`
        : '/api/admin/study-pages'
      
      const method = editingPage ? 'PUT' : 'POST'
      
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      })

      if (response.ok) {
        toast.success(editingPage ? 'Study page updated successfully' : 'Study page created successfully')
        setIsCreateModalOpen(false)
        setEditingPage(null)
        setFormData({
          title: '',
          slug: '',
          description: '',
          bannerUrl: '',
          seoTitle: '',
          seoDescription: '',
          isActive: true
        })
        fetchStudyPages()
      } else {
        toast.error('Failed to save study page')
      }
    } catch (error) {
      toast.error('Failed to save study page')
    }
  }

  const handleEdit = (page: StudyPage) => {
    setEditingPage(page)
    setFormData({
      title: page.title,
      slug: page.slug,
      description: page.description,
      bannerUrl: page.bannerUrl || '',
      seoTitle: page.seoTitle || '',
      seoDescription: page.seoDescription || '',
      isActive: page.isActive
    })
    setIsCreateModalOpen(true)
  }

  const handleDelete = async (id: number) => {
    if (!confirm('Are you sure you want to delete this study page? This action cannot be undone.')) {
      return
    }

    try {
      const response = await fetch(`/api/admin/study-pages/${id}`, {
        method: 'DELETE',
      })

      if (response.ok) {
        toast.success('Study page deleted successfully')
        fetchStudyPages()
      } else {
        toast.error('Failed to delete study page')
      }
    } catch (error) {
      toast.error('Failed to delete study page')
    }
  }

  const handleToggleActive = async (id: number, isActive: boolean) => {
    try {
      const response = await fetch(`/api/admin/study-pages/${id}/toggle`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ isActive }),
      })

      if (response.ok) {
        toast.success(`Study page ${isActive ? 'activated' : 'deactivated'} successfully`)
        fetchStudyPages()
      } else {
        toast.error('Failed to update study page status')
      }
    } catch (error) {
      toast.error('Failed to update study page status')
    }
  }

  const duplicatePage = async (page: StudyPage) => {
    try {
      const response = await fetch(`/api/admin/study-pages/${page.id}/duplicate`, {
        method: 'POST',
      })

      if (response.ok) {
        toast.success('Study page duplicated successfully')
        fetchStudyPages()
      } else {
        toast.error('Failed to duplicate study page')
      }
    } catch (error) {
      toast.error('Failed to duplicate study page')
    }
  }

  if (status === 'loading' || loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-primary"></div>
      </div>
    )
  }

  if (!session) {
    return null
  }

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-3xl font-bold">Study Pages Management</h1>
          <p className="text-gray-600">Manage study destination pages and content</p>
        </div>
        <div className="flex gap-2">
          <Button 
            variant="outline" 
            onClick={refreshStudyPages}
            disabled={refreshing}
          >
            <RefreshCw className={`w-4 h-4 mr-2 ${refreshing ? 'animate-spin' : ''}`} />
            Refresh
          </Button>
          <Button onClick={() => setIsCreateModalOpen(true)}>
            <Plus className="w-4 h-4 mr-2" />
            Add Study Page
          </Button>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Total Pages</p>
                <p className="text-2xl font-bold">{studyPages.length}</p>
              </div>
              <Globe className="w-8 h-8 text-blue-500" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Active Pages</p>
                <p className="text-2xl font-bold">{studyPages.filter(p => p.isActive).length}</p>
              </div>
              <Eye className="w-8 h-8 text-green-500" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Total Categories</p>
                <p className="text-2xl font-bold">{studyPages.reduce((acc, page) => acc + page._count.categories, 0)}</p>
              </div>
              <FileText className="w-8 h-8 text-purple-500" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Total Cards</p>
                <p className="text-2xl font-bold">{studyPages.reduce((acc, page) => acc + page._count.cards, 0)}</p>
              </div>
              <FileText className="w-8 h-8 text-orange-500" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Study Pages List */}
      <Card>
        <CardHeader>
          <CardTitle>Study Pages</CardTitle>
          <CardDescription>Manage your study destination pages</CardDescription>
        </CardHeader>
        <CardContent>
          {studyPages.length === 0 ? (
            <div className="text-center py-8">
              <Globe className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">No study pages found</h3>
              <p className="text-gray-600 mb-4">Create your first study page to get started</p>
              <Button onClick={() => setIsCreateModalOpen(true)}>
                <Plus className="w-4 h-4 mr-2" />
                Create Study Page
              </Button>
            </div>
          ) : (
            <div className="space-y-4">
              {studyPages.map((page) => (
                <div key={page.id} className="border rounded-lg p-4 hover:bg-gray-50">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-2">
                        <h3 className="text-lg font-medium">{page.title}</h3>
                        <Badge variant={page.isActive ? 'default' : 'secondary'}>
                          {page.isActive ? 'Active' : 'Inactive'}
                        </Badge>
                      </div>
                      <p className="text-gray-600 mb-2">{page.description}</p>
                      <div className="flex items-center gap-4 text-sm text-gray-500">
                        <span>Slug: /study/{page.slug}</span>
                        <span>{page._count.categories} categories</span>
                        <span>{page._count.cards} cards</span>
                        <span>Created: {new Date(page.createdAt).toLocaleDateString()}</span>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <Link href={`/study/${page.slug}`} target="_blank">
                        <Button variant="outline" size="sm">
                          <ExternalLink className="w-4 h-4" />
                        </Button>
                      </Link>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleToggleActive(page.id, !page.isActive)}
                      >
                        {page.isActive ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => duplicatePage(page)}
                      >
                        <Copy className="w-4 h-4" />
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleEdit(page)}
                      >
                        <Edit className="w-4 h-4" />
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleDelete(page.id)}
                        className="text-red-600 hover:text-red-700"
                      >
                        <Trash2 className="w-4 h-4" />
                      </Button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Create/Edit Modal */}
      {isCreateModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-bold">
                {editingPage ? 'Edit Study Page' : 'Create Study Page'}
              </h2>
              <Button
                variant="outline"
                size="sm"
                onClick={() => {
                  setIsCreateModalOpen(false)
                  setEditingPage(null)
                  setFormData({
                    title: '',
                    slug: '',
                    description: '',
                    bannerUrl: '',
                    seoTitle: '',
                    seoDescription: '',
                    isActive: true
                  })
                }}
              >
                <X className="w-4 h-4" />
              </Button>
            </div>

            <form onSubmit={handleSubmit} className="space-y-4">
              <div>
                <Label htmlFor="title">Title *</Label>
                <Input
                  id="title"
                  value={formData.title}
                  onChange={(e) => handleTitleChange(e.target.value)}
                  placeholder="e.g., Study in Italy"
                  required
                />
              </div>

              <div>
                <Label htmlFor="slug">Slug *</Label>
                <Input
                  id="slug"
                  value={formData.slug}
                  onChange={(e) => setFormData(prev => ({ ...prev, slug: e.target.value }))}
                  placeholder="study-in-italy"
                  required
                />
              </div>

              <div>
                <Label htmlFor="description">Description *</Label>
                <Textarea
                  id="description"
                  value={formData.description}
                  onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                  placeholder="Brief description of the study destination"
                  required
                />
              </div>

              <div>
                <Label>Banner Image</Label>
                <ImageUpload
                  value={formData.bannerUrl}
                  onChange={(url) => setFormData(prev => ({ ...prev, bannerUrl: url || '' }))}
                  placeholder="Upload a banner image or enter URL"
                />
              </div>

              <div>
                <Label htmlFor="seoTitle">SEO Title</Label>
                <Input
                  id="seoTitle"
                  value={formData.seoTitle}
                  onChange={(e) => setFormData(prev => ({ ...prev, seoTitle: e.target.value }))}
                  placeholder="SEO title (optional)"
                />
              </div>

              <div>
                <Label htmlFor="seoDescription">SEO Description</Label>
                <Textarea
                  id="seoDescription"
                  value={formData.seoDescription}
                  onChange={(e) => setFormData(prev => ({ ...prev, seoDescription: e.target.value }))}
                  placeholder="SEO description (optional)"
                />
              </div>

              <div className="flex items-center space-x-2">
                <Switch
                  id="isActive"
                  checked={formData.isActive}
                  onCheckedChange={(checked) => setFormData(prev => ({ ...prev, isActive: checked }))}
                />
                <Label htmlFor="isActive">Active</Label>
              </div>

              <div className="flex justify-end gap-2">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => {
                    setIsCreateModalOpen(false)
                    setEditingPage(null)
                    setFormData({
                      title: '',
                      slug: '',
                      description: '',
                      bannerUrl: '',
                      seoTitle: '',
                      seoDescription: '',
                      isActive: true
                    })
                  }}
                >
                  Cancel
                </Button>
                <Button type="submit">
                  <Save className="w-4 h-4 mr-2" />
                  {editingPage ? 'Update' : 'Create'}
                </Button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  )
}

--- File: admin\testimonials\page.tsx ---
'use client'

import { useState, useEffect } from 'react'
import { useSession } from 'next-auth/react'
import { useRouter } from 'next/navigation'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Switch } from '@/components/ui/switch'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { 
  Plus, 
  Edit, 
  Trash2, 
  Star, 
  MessageSquare,
  Save,
  X,
  User,
  MapPin,
  GraduationCap,
  BookOpen
} from 'lucide-react'
import { toast } from 'sonner'
import ImageUpload from '@/components/ui/image-upload'

interface Testimonial {
  id: number
  name: string
  country: string
  university: string
  course: string
  content: string
  rating: number
  imageUrl: string | null
  isFeatured: boolean
  isActive: boolean
  createdAt: string
  updatedAt: string
}

export default function TestimonialsManagement() {
  const { data: session, status } = useSession()
  const router = useRouter()
  const [testimonials, setTestimonials] = useState<Testimonial[]>([])
  const [loading, setLoading] = useState(true)
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false)
  const [editingTestimonial, setEditingTestimonial] = useState<Testimonial | null>(null)
  const [formData, setFormData] = useState({
    name: '',
    country: '',
    university: '',
    course: '',
    content: '',
    rating: 5,
    imageUrl: '',
    isFeatured: false,
    isActive: true
  })

  useEffect(() => {
    if (status === 'unauthenticated') {
      router.push('/admin/login')
    }
  }, [status, router])

  useEffect(() => {
    if (session) {
      fetchTestimonials()
    }
  }, [session])

  const fetchTestimonials = async () => {
    try {
      const response = await fetch('/api/admin/testimonials')
      if (response.ok) {
        const data = await response.json()
        setTestimonials(data)
      }
    } catch (error) {
      toast.error('Failed to fetch testimonials')
    } finally {
      setLoading(false)
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    try {
      const url = editingTestimonial 
        ? `/api/admin/testimonials/${editingTestimonial.id}`
        : '/api/admin/testimonials'
      
      const method = editingTestimonial ? 'PUT' : 'POST'
      
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      })

      if (response.ok) {
        toast.success(editingTestimonial ? 'Testimonial updated successfully' : 'Testimonial created successfully')
        setIsCreateModalOpen(false)
        setEditingTestimonial(null)
        setFormData({
          name: '',
          country: '',
          university: '',
          course: '',
          content: '',
          rating: 5,
          imageUrl: '',
          isFeatured: false,
          isActive: true
        })
        fetchTestimonials()
      } else {
        toast.error('Failed to save testimonial')
      }
    } catch (error) {
      toast.error('Failed to save testimonial')
    }
  }

  const handleEdit = (testimonial: Testimonial) => {
    setEditingTestimonial(testimonial)
    setFormData({
      name: testimonial.name,
      country: testimonial.country,
      university: testimonial.university,
      course: testimonial.course,
      content: testimonial.content,
      rating: testimonial.rating,
      imageUrl: testimonial.imageUrl || '',
      isFeatured: testimonial.isFeatured,
      isActive: testimonial.isActive
    })
    setIsCreateModalOpen(true)
  }

  const handleDelete = async (id: number) => {
    if (!confirm('Are you sure you want to delete this testimonial? This action cannot be undone.')) {
      return
    }

    try {
      const response = await fetch(`/api/admin/testimonials/${id}`, {
        method: 'DELETE',
      })

      if (response.ok) {
        toast.success('Testimonial deleted successfully')
        fetchTestimonials()
      } else {
        toast.error('Failed to delete testimonial')
      }
    } catch (error) {
      toast.error('Failed to delete testimonial')
    }
  }

  const handleToggleActive = async (id: number, isActive: boolean) => {
    try {
      const response = await fetch(`/api/admin/testimonials/${id}/toggle`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ isActive }),
      })

      if (response.ok) {
        toast.success(`Testimonial ${isActive ? 'activated' : 'deactivated'} successfully`)
        fetchTestimonials()
      } else {
        toast.error('Failed to update testimonial status')
      }
    } catch (error) {
      toast.error('Failed to update testimonial status')
    }
  }

  const handleToggleFeatured = async (id: number, isFeatured: boolean) => {
    try {
      const response = await fetch(`/api/admin/testimonials/${id}/featured`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ isFeatured }),
      })

      if (response.ok) {
        toast.success(`Testimonial ${isFeatured ? 'featured' : 'unfeatured'} successfully`)
        fetchTestimonials()
      } else {
        toast.error('Failed to update testimonial featured status')
      }
    } catch (error) {
      toast.error('Failed to update testimonial featured status')
    }
  }

  const renderStars = (rating: number) => {
    return Array.from({ length: 5 }, (_, i) => (
      <Star
        key={i}
        className={`w-4 h-4 ${i < rating ? 'text-yellow-400 fill-current' : 'text-gray-300'}`}
      />
    ))
  }

  if (status === 'loading' || loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-primary"></div>
      </div>
    )
  }

  if (!session) {
    return null
  }

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-3xl font-bold">Testimonials Management</h1>
          <p className="text-gray-600">Manage student testimonials and success stories</p>
        </div>
        <Button onClick={() => setIsCreateModalOpen(true)}>
          <Plus className="w-4 h-4 mr-2" />
          Add Testimonial
        </Button>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Total Testimonials</p>
                <p className="text-2xl font-bold">{testimonials.length}</p>
              </div>
              <MessageSquare className="w-8 h-8 text-blue-500" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Active</p>
                <p className="text-2xl font-bold">{testimonials.filter(t => t.isActive).length}</p>
              </div>
              <Star className="w-8 h-8 text-green-500" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Featured</p>
                <p className="text-2xl font-bold">{testimonials.filter(t => t.isFeatured).length}</p>
              </div>
              <GraduationCap className="w-8 h-8 text-purple-500" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Avg Rating</p>
                <p className="text-2xl font-bold">
                  {testimonials.length > 0 
                    ? (testimonials.reduce((acc, t) => acc + t.rating, 0) / testimonials.length).toFixed(1)
                    : '0'
                  }
                </p>
              </div>
              <Star className="w-8 h-8 text-yellow-500" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Testimonials List */}
      <Card>
        <CardHeader>
          <CardTitle>Testimonials</CardTitle>
          <CardDescription>Manage student testimonials and success stories</CardDescription>
        </CardHeader>
        <CardContent>
          {testimonials.length === 0 ? (
            <div className="text-center py-8">
              <MessageSquare className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">No testimonials found</h3>
              <p className="text-gray-600 mb-4">Add your first student testimonial to get started</p>
              <Button onClick={() => setIsCreateModalOpen(true)}>
                <Plus className="w-4 h-4 mr-2" />
                Add Testimonial
              </Button>
            </div>
          ) : (
            <div className="space-y-4">
              {testimonials.map((testimonial) => (
                <div key={testimonial.id} className="border rounded-lg p-4 hover:bg-gray-50">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-2">
                        <h3 className="text-lg font-medium">{testimonial.name}</h3>
                        <div className="flex items-center">
                          {renderStars(testimonial.rating)}
                        </div>
                        <Badge variant={testimonial.isFeatured ? 'default' : 'secondary'}>
                          {testimonial.isFeatured ? 'Featured' : 'Regular'}
                        </Badge>
                        <Badge variant={testimonial.isActive ? 'default' : 'secondary'}>
                          {testimonial.isActive ? 'Active' : 'Inactive'}
                        </Badge>
                      </div>
                      
                      <div className="flex items-center gap-4 text-sm text-gray-600 mb-2">
                        <div className="flex items-center">
                          <MapPin className="w-4 h-4 mr-1" />
                          {testimonial.country}
                        </div>
                        <div className="flex items-center">
                          <GraduationCap className="w-4 h-4 mr-1" />
                          {testimonial.university}
                        </div>
                        <div className="flex items-center">
                          <BookOpen className="w-4 h-4 mr-1" />
                          {testimonial.course}
                        </div>
                      </div>
                      
                      <p className="text-gray-700 mb-2 line-clamp-3">{testimonial.content}</p>
                      
                      <div className="text-sm text-gray-500">
                        Added: {new Date(testimonial.createdAt).toLocaleDateString()}
                      </div>
                    </div>
                    
                    <div className="flex items-center gap-2 ml-4">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleToggleFeatured(testimonial.id, !testimonial.isFeatured)}
                      >
                        <Star className="w-4 h-4" />
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleToggleActive(testimonial.id, !testimonial.isActive)}
                      >
                        {testimonial.isActive ? 'Active' : 'Inactive'}
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleEdit(testimonial)}
                      >
                        <Edit className="w-4 h-4" />
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleDelete(testimonial.id)}
                        className="text-red-600 hover:text-red-700"
                      >
                        <Trash2 className="w-4 h-4" />
                      </Button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Create/Edit Modal */}
      {isCreateModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-bold">
                {editingTestimonial ? 'Edit Testimonial' : 'Add Testimonial'}
              </h2>
              <Button
                variant="outline"
                size="sm"
                onClick={() => {
                  setIsCreateModalOpen(false)
                  setEditingTestimonial(null)
                  setFormData({
                    name: '',
                    country: '',
                    university: '',
                    course: '',
                    content: '',
                    rating: 5,
                    imageUrl: '',
                    isFeatured: false,
                    isActive: true
                  })
                }}
              >
                <X className="w-4 h-4" />
              </Button>
            </div>

            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="name">Student Name *</Label>
                  <Input
                    id="name"
                    value={formData.name}
                    onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                    placeholder="e.g., John Smith"
                    required
                  />
                </div>

                <div>
                  <Label htmlFor="country">Country *</Label>
                  <Input
                    id="country"
                    value={formData.country}
                    onChange={(e) => setFormData(prev => ({ ...prev, country: e.target.value }))}
                    placeholder="e.g., Italy"
                    required
                  />
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="university">University *</Label>
                  <Input
                    id="university"
                    value={formData.university}
                    onChange={(e) => setFormData(prev => ({ ...prev, university: e.target.value }))}
                    placeholder="e.g., University of Milan"
                    required
                  />
                </div>

                <div>
                  <Label htmlFor="course">Course *</Label>
                  <Input
                    id="course"
                    value={formData.course}
                    onChange={(e) => setFormData(prev => ({ ...prev, course: e.target.value }))}
                    placeholder="e.g., Computer Science"
                    required
                  />
                </div>
              </div>

              <div>
                <Label htmlFor="content">Testimonial Content *</Label>
                <Textarea
                  id="content"
                  value={formData.content}
                  onChange={(e) => setFormData(prev => ({ ...prev, content: e.target.value }))}
                  placeholder="Student's testimonial message..."
                  rows={4}
                  required
                />
              </div>

              <div>
                <Label htmlFor="rating">Rating</Label>
                <Select
                  value={formData.rating.toString()}
                  onValueChange={(value) => setFormData(prev => ({ ...prev, rating: parseInt(value) }))}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="5">5 Stars - Excellent</SelectItem>
                    <SelectItem value="4">4 Stars - Very Good</SelectItem>
                    <SelectItem value="3">3 Stars - Good</SelectItem>
                    <SelectItem value="2">2 Stars - Fair</SelectItem>
                    <SelectItem value="1">1 Star - Poor</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label>Student Photo</Label>
                <ImageUpload
                  value={formData.imageUrl}
                  onChange={(url) => setFormData(prev => ({ ...prev, imageUrl: url || '' }))}
                  placeholder="Upload student photo or enter URL"
                />
              </div>

              <div className="flex items-center space-x-4">
                <div className="flex items-center space-x-2">
                  <Switch
                    id="isFeatured"
                    checked={formData.isFeatured}
                    onCheckedChange={(checked) => setFormData(prev => ({ ...prev, isFeatured: checked }))}
                  />
                  <Label htmlFor="isFeatured">Featured</Label>
                </div>

                <div className="flex items-center space-x-2">
                  <Switch
                    id="isActive"
                    checked={formData.isActive}
                    onCheckedChange={(checked) => setFormData(prev => ({ ...prev, isActive: checked }))}
                  />
                  <Label htmlFor="isActive">Active</Label>
                </div>
              </div>

              <div className="flex justify-end gap-2">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => {
                    setIsCreateModalOpen(false)
                    setEditingTestimonial(null)
                    setFormData({
                      name: '',
                      country: '',
                      university: '',
                      course: '',
                      content: '',
                      rating: 5,
                      imageUrl: '',
                      isFeatured: false,
                      isActive: true
                    })
                  }}
                >
                  Cancel
                </Button>
                <Button type="submit">
                  <Save className="w-4 h-4 mr-2" />
                  {editingTestimonial ? 'Update' : 'Create'}
                </Button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  )
}

--- File: api\admin\cards\route.ts ---
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/app/api/auth/[...nextauth]/route'
import { db } from '@/lib/db'

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { title, description, imageUrl, categoryId } = body

    if (!title || !description || !categoryId) {
      return NextResponse.json({ error: 'Title, description, and category are required' }, { status: 400 })
    }

    // Verify category exists
    const category = await db.category.findUnique({
      where: { id: parseInt(categoryId) }
    })

    if (!category) {
      return NextResponse.json({ error: 'Category not found' }, { status: 404 })
    }

    const card = await db.card.create({
      data: {
        title,
        description,
        imageUrl: imageUrl || null,
        categoryId: parseInt(categoryId)
      }
    })

    return NextResponse.json(card)
  } catch (error) {
    console.error('Failed to create card:', error)
    return NextResponse.json({ error: 'Failed to create card' }, { status: 500 })
  }
}

--- File: api\admin\cards\[id]\route.ts ---
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/app/api/auth/[...nextauth]/route'
import { db } from '@/lib/db'

export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const session = await getServerSession(authOptions)
    const { id } = await params
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { title, description, imageUrl, categoryId } = body

    if (!title || !description || !categoryId) {
      return NextResponse.json({ error: 'Title, description, and category are required' }, { status: 400 })
    }

    // Verify category exists
    const category = await db.category.findUnique({
      where: { id: parseInt(categoryId) }
    })

    if (!category) {
      return NextResponse.json({ error: 'Category not found' }, { status: 404 })
    }

    const card = await db.card.update({
      where: { id: parseInt(id) },
      data: {
        title,
        description,
        imageUrl: imageUrl || null,
        categoryId: parseInt(categoryId)
      }
    })

    return NextResponse.json(card)
  } catch (error) {
    console.error('Failed to update card:', error)
    return NextResponse.json({ error: 'Failed to update card' }, { status: 500 })
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const session = await getServerSession(authOptions)
    const { id } = await params
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    await db.card.delete({
      where: { id: parseInt(id) }
    })

    return NextResponse.json({ message: 'Card deleted successfully' })
  } catch (error) {
    console.error('Failed to delete card:', error)
    return NextResponse.json({ error: 'Failed to delete card' }, { status: 500 })
  }
}

--- File: api\admin\categories\route.ts ---
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/app/api/auth/[...nextauth]/route'
import { db } from '@/lib/db'

export async function GET() {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const categories = await db.category.findMany({
      orderBy: { createdAt: 'desc' },
      include: {
        studyPage: {
          select: {
            id: true,
            title: true,
            slug: true
          }
        },
        cards: {
          orderBy: { createdAt: 'asc' }
        }
      }
    })

    return NextResponse.json(categories)
  } catch (error) {
    console.error('Failed to fetch categories:', error)
    return NextResponse.json({ error: 'Failed to fetch categories' }, { status: 500 })
  }
}

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { title, description, studyPageId } = body

    if (!title || !studyPageId) {
      return NextResponse.json({ error: 'Title and study page are required' }, { status: 400 })
    }

    // Verify study page exists
    const studyPage = await db.studyPage.findUnique({
      where: { id: parseInt(studyPageId) }
    })

    if (!studyPage) {
      return NextResponse.json({ error: 'Study page not found' }, { status: 404 })
    }

    const category = await db.category.create({
      data: {
        title,
        description: description || null,
        studyPageId: parseInt(studyPageId)
      },
      include: {
        studyPage: {
          select: {
            id: true,
            title: true,
            slug: true
          }
        },
        cards: true
      }
    })

    return NextResponse.json(category)
  } catch (error) {
    console.error('Failed to create category:', error)
    return NextResponse.json({ error: 'Failed to create category' }, { status: 500 })
  }
}

--- File: api\admin\categories\[id]\route.ts ---
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/app/api/auth/[...nextauth]/route'
import { db } from '@/lib/db'

export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const session = await getServerSession(authOptions)
    const { id } = await params
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { title, description, studyPageId } = body

    if (!title || !studyPageId) {
      return NextResponse.json({ error: 'Title and study page are required' }, { status: 400 })
    }

    // Verify study page exists
    const studyPage = await db.studyPage.findUnique({
      where: { id: parseInt(studyPageId) }
    })

    if (!studyPage) {
      return NextResponse.json({ error: 'Study page not found' }, { status: 404 })
    }

    const category = await db.category.update({
      where: { id: parseInt(id) },
      data: {
        title,
        description: description || null,
        studyPageId: parseInt(studyPageId)
      },
      include: {
        studyPage: {
          select: {
            id: true,
            title: true,
            slug: true
          }
        },
        cards: true
      }
    })

    return NextResponse.json(category)
  } catch (error) {
    console.error('Failed to update category:', error)
    return NextResponse.json({ error: 'Failed to update category' }, { status: 500 })
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const session = await getServerSession(authOptions)
    const { id } = await params
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // Delete all cards in this category first
    await db.card.deleteMany({
      where: { categoryId: parseInt(id) }
    })

    // Delete the category
    await db.category.delete({
      where: { id: parseInt(id) }
    })

    return NextResponse.json({ message: 'Category deleted successfully' })
  } catch (error) {
    console.error('Failed to delete category:', error)
    return NextResponse.json({ error: 'Failed to delete category' }, { status: 500 })
  }
}

--- File: api\admin\change-password\route.ts ---
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/app/api/auth/[...nextauth]/route'
import bcrypt from 'bcryptjs'

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { currentPassword, newPassword } = body

    if (!currentPassword || !newPassword) {
      return NextResponse.json({ error: 'Current password and new password are required' }, { status: 400 })
    }

    if (newPassword.length < 6) {
      return NextResponse.json({ error: 'Password must be at least 6 characters long' }, { status: 400 })
    }

    // For this demo, we'll use a simple password check
    // In production, you'd verify against the stored password hash
    const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD || 'admin123'
    
    if (currentPassword !== ADMIN_PASSWORD) {
      return NextResponse.json({ error: 'Current password is incorrect' }, { status: 400 })
    }

    // In production, you'd hash and store the new password in your database
    // For now, we'll just return success
    return NextResponse.json({ message: 'Password changed successfully' })
  } catch (error) {
    console.error('Failed to change password:', error)
    return NextResponse.json({ error: 'Failed to change password' }, { status: 500 })
  }
}

--- File: api\admin\dashboard\stats\route.ts ---
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/app/api/auth/[...nextauth]/route'
import { db } from '@/lib/db'

export async function GET() {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // Get counts
    const contactsCount = await db.contactSubmission.count()
    const b2bCount = await db.b2BSubmission.count()
    const luckyDrawCount = await db.luckyDrawEntry.count()
    const studyPagesCount = await db.studyPage.count({
      where: { isActive: { not: false } }
    })

    // Get recent contacts
    const recentContacts = await db.contactSubmission.findMany({
      take: 5,
      orderBy: { createdAt: 'desc' },
      select: {
        id: true,
        name: true,
        email: true,
        purpose: true,
        createdAt: true
      }
    })

    // Get recent B2B requests
    const recentB2B = await db.b2BSubmission.findMany({
      take: 5,
      orderBy: { createdAt: 'desc' },
      select: {
        id: true,
        name: true,
        company: true,
        country: true,
        createdAt: true
      }
    })

    return NextResponse.json({
      contacts: contactsCount,
      b2bRequests: b2bCount,
      luckyDrawEntries: luckyDrawCount,
      studyPages: studyPagesCount,
      recentContacts,
      recentB2B
    })
  } catch (error) {
    console.error('Dashboard stats error:', error)
    return NextResponse.json(
      { error: 'Failed to fetch dashboard stats' },
      { status: 500 }
    )
  }
}

--- File: api\admin\detail-pages\route.ts ---
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/app/api/auth/[...nextauth]/route'
import { db } from '@/lib/db'

export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { searchParams } = new URL(request.url)
    const cardId = searchParams.get('cardId')

    if (!cardId) {
      return NextResponse.json({ error: 'Card ID is required' }, { status: 400 })
    }

    // Check if card exists and get detail page
    const card = await db.card.findUnique({
      where: { id: parseInt(cardId) },
      include: {
        category: {
          include: {
            studyPage: true
          }
        }
      }
    })

    if (!card) {
      return NextResponse.json({ error: 'Card not found' }, { status: 404 })
    }

    // Get or create detail page
    let detailPage = await db.detailPage.findUnique({
      where: { cardId: parseInt(cardId) },
      include: {
        tables: {
          orderBy: { createdAt: 'asc' }
        }
      }
    })

    if (!detailPage) {
      detailPage = await db.detailPage.create({
        data: {
          cardId: parseInt(cardId),
          content: `Detailed information about ${card.title}`
        },
        include: {
          tables: {
            orderBy: { createdAt: 'asc' }
          }
        }
      })
    }

    return NextResponse.json(detailPage)
  } catch (error) {
    console.error('Failed to fetch detail page:', error)
    return NextResponse.json(
      { error: 'Failed to fetch detail page' },
      { status: 500 }
    )
  }
}

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { cardId, title, description, columns, rows } = body

    if (!cardId || !title || !columns || !rows) {
      return NextResponse.json(
        { error: 'Card ID, title, columns, and rows are required' },
        { status: 400 }
      )
    }

    // Check if card exists
    const card = await db.card.findUnique({
      where: { id: parseInt(cardId) }
    })

    if (!card) {
      return NextResponse.json({ error: 'Card not found' }, { status: 404 })
    }

    // Get or create detail page
    let detailPage = await db.detailPage.findUnique({
      where: { cardId: parseInt(cardId) }
    })

    if (!detailPage) {
      detailPage = await db.detailPage.create({
        data: {
          cardId: parseInt(cardId),
          content: `Detailed information about ${card.title}`
        }
      })
    }

    // Create dynamic table
    const table = await db.dynamicTable.create({
      data: {
        title,
        description: description || null,
        detailPageId: detailPage.id,
        columns,
        rows
      }
    })

    return NextResponse.json(table, { status: 201 })
  } catch (error) {
    console.error('Failed to create table:', error)
    return NextResponse.json(
      { error: 'Failed to create table' },
      { status: 500 }
    )
  }
}

--- File: api\admin\navbar-links\route.ts ---
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/app/api/auth/[...nextauth]/route'

// Default navbar links
const defaultNavbarLinks = [
  { id: '1', label: 'Home', href: '/', isVisible: true, order: 0 },
  { id: '2', label: 'About', href: '/about', isVisible: true, order: 1 },
  { id: '3', label: 'Services', href: '/services', isVisible: true, order: 2 },
  { id: '4', label: 'Study Destinations', href: '/study-destinations', isVisible: true, order: 3 },
  { id: '5', label: 'Contact', href: '/contact', isVisible: true, order: 4 },
]

// In-memory storage for demo purposes
// In production, you'd store this in a database
let navbarLinks = [...defaultNavbarLinks]

export async function GET() {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    return NextResponse.json(navbarLinks)
  } catch (error) {
    console.error('Failed to fetch navbar links:', error)
    return NextResponse.json({ error: 'Failed to fetch navbar links' }, { status: 500 })
  }
}

export async function PUT(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { links } = body

    if (!Array.isArray(links)) {
      return NextResponse.json({ error: 'Links must be an array' }, { status: 400 })
    }

    // Validate each link
    for (const link of links) {
      if (!link.id || !link.label || !link.href) {
        return NextResponse.json({ error: 'Each link must have id, label, and href' }, { status: 400 })
      }
    }

    navbarLinks = links
    return NextResponse.json({ message: 'Navbar links updated successfully', links: navbarLinks })
  } catch (error) {
    console.error('Failed to update navbar links:', error)
    return NextResponse.json({ error: 'Failed to update navbar links' }, { status: 500 })
  }
}

--- File: api\admin\settings\route.ts ---
import { NextRequest, NextResponse } from 'next/server'
import { db } from '@/lib/db'
import * as z from 'zod'

const siteSettingsSchema = z.object({
  siteName: z.string().min(1, 'Site name is required'),
  siteUrl: z.string().url('Please enter a valid URL'),
  logoUrl: z.string().url('Please enter a valid URL').optional().nullable(),
  faviconUrl: z.string().url('Please enter a valid URL').optional().nullable(),
  contactEmail: z.string().email('Please enter a valid email'),
  contactPhone: z.string().min(1, 'Phone number is required'),
  address: z.string().optional().nullable(),
  aboutContent: z.string().optional().nullable(),
  metaTitle: z.string().optional().nullable(),
  metaDescription: z.string().optional().nullable(),
  primaryColor: z.string().regex(/^#[0-9A-Fa-f]{6}$/, 'Please enter a valid hex color'),
  secondaryColor: z.string().regex(/^#[0-9A-Fa-f]{6}$/, 'Please enter a valid hex color'),
  accentColor: z.string().regex(/^#[0-9A-Fa-f]{6}$/, 'Please enter a valid hex color'),
  adminName: z.string().min(1, 'Admin name is required'),
  adminEmail: z.string().email('Please enter a valid email'),
  adminPhone: z.string().min(1, 'Admin phone is required'),
  adminTitle: z.string().min(1, 'Admin title is required'),
  adminBio: z.string().optional().nullable(),
})

// GET settings
export async function GET() {
  try {
    let settings = await db.siteSettings.findFirst({
      where: { id: 1 }
    })

    // If no settings exist, create default ones
    if (!settings) {
      settings = await db.siteSettings.create({
        data: {
          siteName: 'Study Abroad with Hadi',
          siteUrl: 'https://studyabroadwithhadi.info',
          contactEmail: 'info@studyabroadwithhadi.info',
          contactPhone: '+1-234-567-8900',
          address: '123 Education Street, Learning City, LC 12345',
          aboutContent: 'Welcome to Study Abroad with Hadi - Your trusted partner for international education and visa consulting.',
          metaTitle: 'Study Abroad with Hadi - Visa Consulting & International Education',
          metaDescription: 'Expert visa consulting services for students looking to study abroad. Personalized guidance for admissions, scholarships, and visa applications.',
          primaryColor: '#3b82f6',
          secondaryColor: '#6366f1',
          accentColor: '#f59e0b',
          adminName: 'Hadi',
          adminEmail: 'admin@studyabroadwithhadi.info',
          adminPhone: '+1-234-567-8900',
          adminTitle: 'Expert Visa Consultant',
          adminBio: 'With over 10 years of experience in international education consulting, I\'ve helped hundreds of students achieve their dream of studying abroad.',
        }
      })
    }

    return NextResponse.json(settings)
  } catch (error) {
    console.error('Failed to fetch settings:', error)
    return NextResponse.json(
      { error: 'Failed to fetch settings' },
      { status: 500 }
    )
  }
}

// PUT/PATCH settings
export async function PUT(request: NextRequest) {
  try {
    const body = await request.json()
    
    // Validate the request body
    const validatedData = siteSettingsSchema.parse(body)
    
    // Upsert settings
    const settings = await db.siteSettings.upsert({
      where: { id: 1 },
      update: validatedData,
      create: {
        id: 1,
        ...validatedData
      }
    })

    return NextResponse.json({
      message: 'Settings updated successfully',
      settings
    })
  } catch (error) {
    console.error('Settings update error:', error)
    
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { 
          error: 'Validation failed',
          details: error.errors
        },
        { status: 400 }
      )
    }

    return NextResponse.json(
      { error: 'Failed to update settings' },
      { status: 500 }
    )
  }
}

--- File: api\admin\study-pages\route.ts ---
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/app/api/auth/[...nextauth]/route'
import { db } from '@/lib/db'

// GET - Fetch all study pages
export async function GET() {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const studyPages = await db.studyPage.findMany({
      orderBy: { createdAt: 'desc' },
      include: {
        _count: {
          select: {
            categories: true,
            cards: true
          }
        }
      }
    })

    return NextResponse.json(studyPages)
  } catch (error) {
    console.error('Failed to fetch study pages:', error)
    return NextResponse.json(
      { error: 'Failed to fetch study pages' },
      { status: 500 }
    )
  }
}

// POST - Create a new study page
export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { title, slug, description, bannerUrl, seoTitle, seoDescription, isActive } = body

    // Validate required fields
    if (!title || !slug || !description) {
      return NextResponse.json(
        { error: 'Title, slug, and description are required' },
        { status: 400 }
      )
    }

    // Check if slug already exists
    const existingPage = await db.studyPage.findUnique({
      where: { slug }
    })

    if (existingPage) {
      return NextResponse.json(
        { error: 'A study page with this slug already exists' },
        { status: 409 }
      )
    }

    const studyPage = await db.studyPage.create({
      data: {
        title,
        slug,
        description,
        bannerUrl: bannerUrl || null,
        seoTitle: seoTitle || null,
        seoDescription: seoDescription || null,
        isActive: isActive ?? true
      }
    })

    return NextResponse.json(studyPage, { status: 201 })
  } catch (error) {
    console.error('Failed to create study page:', error)
    return NextResponse.json(
      { error: 'Failed to create study page' },
      { status: 500 }
    )
  }
}

// DELETE - Delete all study pages
export async function DELETE() {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // Delete all study pages
    await db.studyPage.deleteMany({})

    return NextResponse.json({ success: true })
  } catch (error) {
    console.error('Failed to delete study pages:', error)
    return NextResponse.json(
      { error: 'Failed to delete study pages' },
      { status: 500 }
    )
  }
}

--- File: api\admin\study-pages\[id]\duplicate\route.ts ---
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/app/api/auth/[...nextauth]/route'
import { db } from '@/lib/db'

export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const session = await getServerSession(authOptions)
    const { id } = await params
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // Get the original study page with its categories and cards
    const originalPage = await db.studyPage.findUnique({
      where: { id: parseInt(id) },
      include: {
        categories: {
          include: {
            cards: true
          },
          orderBy: { createdAt: 'asc' }
        }
      }
    })

    if (!originalPage) {
      return NextResponse.json({ error: 'Study page not found' }, { status: 404 })
    }

    // Create a new slug
    let newSlug = `${originalPage.slug}-copy`
    let counter = 1
    
    // Find an available slug
    while (await db.studyPage.findUnique({ where: { slug: newSlug } })) {
      newSlug = `${originalPage.slug}-copy-${counter}`
      counter++
    }

    // Create the duplicated study page
    const duplicatedPage = await db.studyPage.create({
      data: {
        title: `${originalPage.title} (Copy)`,
        slug: newSlug,
        description: originalPage.description,
        bannerUrl: originalPage.bannerUrl,
        seoTitle: originalPage.seoTitle ? `${originalPage.seoTitle} (Copy)` : null,
        seoDescription: originalPage.seoDescription,
        isActive: false // Duplicated pages start as inactive
      }
    })

    // Duplicate categories and cards
    for (const category of originalPage.categories) {
      const duplicatedCategory = await db.category.create({
        data: {
          title: category.title,
          description: category.description,
          studyPageId: duplicatedPage.id
        }
      })

      // Duplicate cards in this category
      for (const card of category.cards) {
        await db.card.create({
          data: {
            title: card.title,
            description: card.description,
            imageUrl: card.imageUrl,
            categoryId: duplicatedCategory.id
          }
        })
      }
    }

    return NextResponse.json(duplicatedPage)
  } catch (error) {
    console.error('Failed to duplicate study page:', error)
    return NextResponse.json({ error: 'Failed to duplicate study page' }, { status: 500 })
  }
}

--- File: api\admin\study-pages\[id]\route.ts ---
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/app/api/auth/[...nextauth]/route'
import { db } from '@/lib/db'

export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const session = await getServerSession(authOptions)
    const { id } = await params
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { title, slug, description, bannerUrl, seoTitle, seoDescription, isActive } = body

    if (!title || !slug || !description) {
      return NextResponse.json({ error: 'Title, slug, and description are required' }, { status: 400 })
    }

    // Check if slug already exists (excluding current page)
    const existingPage = await db.studyPage.findFirst({
      where: { 
        slug,
        id: { not: parseInt(id) }
      }
    })

    if (existingPage) {
      return NextResponse.json({ error: 'A study page with this slug already exists' }, { status: 400 })
    }

    const studyPage = await db.studyPage.update({
      where: { id: parseInt(id) },
      data: {
        title,
        slug,
        description,
        bannerUrl: bannerUrl || null,
        seoTitle: seoTitle || null,
        seoDescription: seoDescription || null,
        isActive: isActive ?? true
      }
    })

    return NextResponse.json(studyPage)
  } catch (error) {
    console.error('Failed to update study page:', error)
    return NextResponse.json({ error: 'Failed to update study page' }, { status: 500 })
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const session = await getServerSession(authOptions)
    const { id } = await params
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // Delete categories and cards first (due to foreign key constraints)
    const categories = await db.category.findMany({
      where: { studyPageId: parseInt(id) },
      include: { cards: true }
    })

    for (const category of categories) {
      // Delete all cards in this category
      await db.card.deleteMany({
        where: { categoryId: category.id }
      })
    }

    // Delete all categories
    await db.category.deleteMany({
      where: { studyPageId: parseInt(id) }
    })

    // Delete the study page
    await db.studyPage.delete({
      where: { id: parseInt(id) }
    })

    return NextResponse.json({ message: 'Study page deleted successfully' })
  } catch (error) {
    console.error('Failed to delete study page:', error)
    return NextResponse.json({ error: 'Failed to delete study page' }, { status: 500 })
  }
}

--- File: api\admin\study-pages\[id]\toggle\route.ts ---
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/app/api/auth/[...nextauth]/route'
import { db } from '@/lib/db'

export async function PATCH(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const session = await getServerSession(authOptions)
    const { id } = await params
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { isActive } = body

    if (typeof isActive !== 'boolean') {
      return NextResponse.json({ error: 'isActive must be a boolean' }, { status: 400 })
    }

    const studyPage = await db.studyPage.update({
      where: { id: parseInt(id) },
      data: { isActive }
    })

    return NextResponse.json(studyPage)
  } catch (error) {
    console.error('Failed to toggle study page:', error)
    return NextResponse.json({ error: 'Failed to toggle study page' }, { status: 500 })
  }
}

--- File: api\admin\tables\route.ts ---
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/app/api/auth/[...nextauth]/route'
import { db } from '@/lib/db'

export async function GET() {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const tables = await db.dynamicTable.findMany({
      include: {
        detailPage: {
          include: {
            card: {
              include: {
                category: {
                  include: {
                    studyPage: {
                      select: {
                        id: true,
                        title: true,
                        slug: true
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      orderBy: { createdAt: 'desc' }
    })

    return NextResponse.json(tables)
  } catch (error) {
    console.error('Failed to fetch tables:', error)
    return NextResponse.json({ error: 'Failed to fetch tables' }, { status: 500 })
  }
}

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { title, description, detailPageId, columns, rows } = body

    if (!title || !detailPageId || !columns || !rows) {
      return NextResponse.json({ 
        error: 'Title, detail page ID, columns, and rows are required' 
      }, { status: 400 })
    }

    // Verify detail page exists
    const detailPage = await db.detailPage.findUnique({
      where: { id: parseInt(detailPageId) }
    })

    if (!detailPage) {
      return NextResponse.json({ error: 'Detail page not found' }, { status: 404 })
    }

    const table = await db.dynamicTable.create({
      data: {
        title,
        description: description || null,
        detailPageId: parseInt(detailPageId),
        columns,
        rows
      },
      include: {
        detailPage: {
          include: {
            card: {
              include: {
                category: {
                  include: {
                    studyPage: {
                      select: {
                        id: true,
                        title: true,
                        slug: true
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    })

    return NextResponse.json(table, { status: 201 })
  } catch (error) {
    console.error('Failed to create table:', error)
    return NextResponse.json({ error: 'Failed to create table' }, { status: 500 })
  }
}

--- File: api\admin\tables\[id]\route.ts ---
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/app/api/auth/[...nextauth]/route'
import { db } from '@/lib/db'

export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { id } = await params
    const body = await request.json()
    const { title, description, columns, rows } = body

    if (!title || !columns || !rows) {
      return NextResponse.json(
        { error: 'Title, columns, and rows are required' },
        { status: 400 }
      )
    }

    const table = await db.dynamicTable.update({
      where: { id: parseInt(id) },
      data: {
        title,
        description: description || null,
        columns,
        rows
      }
    })

    return NextResponse.json(table)
  } catch (error) {
    console.error('Failed to update table:', error)
    return NextResponse.json(
      { error: 'Failed to update table' },
      { status: 500 }
    )
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { id } = await params

    await db.dynamicTable.delete({
      where: { id: parseInt(id) }
    })

    return NextResponse.json({ success: true })
  } catch (error) {
    console.error('Failed to delete table:', error)
    return NextResponse.json(
      { error: 'Failed to delete table' },
      { status: 500 }
    )
  }
}

--- File: api\admin\testimonials\route.ts ---
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/app/api/auth/[...nextauth]/route'
import { db } from '@/lib/db'

export async function GET() {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const testimonials = await db.testimonial.findMany({
      orderBy: { createdAt: 'desc' }
    })

    return NextResponse.json(testimonials)
  } catch (error) {
    console.error('Failed to fetch testimonials:', error)
    return NextResponse.json({ error: 'Failed to fetch testimonials' }, { status: 500 })
  }
}

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { name, country, university, course, content, rating, imageUrl, isFeatured, isActive } = body

    if (!name || !country || !university || !course || !content) {
      return NextResponse.json({ error: 'All required fields must be provided' }, { status: 400 })
    }

    if (rating < 1 || rating > 5) {
      return NextResponse.json({ error: 'Rating must be between 1 and 5' }, { status: 400 })
    }

    const testimonial = await db.testimonial.create({
      data: {
        name,
        country,
        university,
        course,
        content,
        rating: rating || 5,
        imageUrl: imageUrl || null,
        isFeatured: isFeatured || false,
        isActive: isActive ?? true
      }
    })

    return NextResponse.json(testimonial)
  } catch (error) {
    console.error('Failed to create testimonial:', error)
    return NextResponse.json({ error: 'Failed to create testimonial' }, { status: 500 })
  }
}

--- File: api\admin\testimonials\[id]\featured\route.ts ---
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/app/api/auth/[...nextauth]/route'
import { db } from '@/lib/db'

export async function PATCH(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { isFeatured } = body

    const testimonialId = parseInt(params.id)
    if (isNaN(testimonialId)) {
      return NextResponse.json({ error: 'Invalid testimonial ID' }, { status: 400 })
    }

    const updatedTestimonial = await db.testimonial.update({
      where: { id: testimonialId },
      data: { isFeatured }
    })

    return NextResponse.json(updatedTestimonial)
  } catch (error) {
    console.error('Failed to update testimonial featured status:', error)
    return NextResponse.json(
      { error: 'Failed to update testimonial featured status' },
      { status: 500 }
    )
  }
}

--- File: api\admin\testimonials\[id]\route.ts ---
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/app/api/auth/[...nextauth]/route'
import { db } from '@/lib/db'

export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const session = await getServerSession(authOptions)
    const { id } = await params
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { name, country, university, course, content, rating, imageUrl, isFeatured, isActive } = body

    if (!name || !country || !university || !course || !content) {
      return NextResponse.json({ error: 'All required fields must be provided' }, { status: 400 })
    }

    if (rating < 1 || rating > 5) {
      return NextResponse.json({ error: 'Rating must be between 1 and 5' }, { status: 400 })
    }

    const testimonial = await db.testimonial.update({
      where: { id: parseInt(id) },
      data: {
        name,
        country,
        university,
        course,
        content,
        rating: rating || 5,
        imageUrl: imageUrl || null,
        isFeatured: isFeatured || false,
        isActive: isActive ?? true
      }
    })

    return NextResponse.json(testimonial)
  } catch (error) {
    console.error('Failed to update testimonial:', error)
    return NextResponse.json({ error: 'Failed to update testimonial' }, { status: 500 })
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const session = await getServerSession(authOptions)
    const { id } = await params
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    await db.testimonial.delete({
      where: { id: parseInt(id) }
    })

    return NextResponse.json({ message: 'Testimonial deleted successfully' })
  } catch (error) {
    console.error('Failed to delete testimonial:', error)
    return NextResponse.json({ error: 'Failed to delete testimonial' }, { status: 500 })
  }
}

--- File: api\admin\testimonials\[id]\toggle\route.ts ---
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/app/api/auth/[...nextauth]/route'
import { db } from '@/lib/db'

export async function PATCH(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { isActive } = body

    const testimonialId = parseInt(params.id)
    if (isNaN(testimonialId)) {
      return NextResponse.json({ error: 'Invalid testimonial ID' }, { status: 400 })
    }

    const updatedTestimonial = await db.testimonial.update({
      where: { id: testimonialId },
      data: { isActive }
    })

    return NextResponse.json(updatedTestimonial)
  } catch (error) {
    console.error('Failed to update testimonial status:', error)
    return NextResponse.json(
      { error: 'Failed to update testimonial status' },
      { status: 500 }
    )
  }
}

--- File: api\admin\upload\route.ts ---
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/app/api/auth/[...nextauth]/route'
import { writeFile, mkdir } from 'fs/promises'
import { join } from 'path'
import { existsSync } from 'fs'

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const data = await request.formData()
    const file: File | null = data.get('file') as unknown as File

    if (!file) {
      return NextResponse.json({ error: 'No file uploaded' }, { status: 400 })
    }

    // Validate file type
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp']
    if (!allowedTypes.includes(file.type)) {
      return NextResponse.json({ error: 'Invalid file type. Only JPEG, PNG, GIF, and WebP are allowed' }, { status: 400 })
    }

    // Validate file size (5MB max)
    const maxSize = 5 * 1024 * 1024 // 5MB
    if (file.size > maxSize) {
      return NextResponse.json({ error: 'File too large. Maximum size is 5MB' }, { status: 400 })
    }

    const bytes = await file.arrayBuffer()
    const buffer = Buffer.from(bytes)

    // Create unique filename
    const timestamp = Date.now()
    const randomString = Math.random().toString(36).substring(2, 15)
    const extension = file.name.split('.').pop()
    const filename = `${timestamp}-${randomString}.${extension}`

    // Ensure uploads directory exists
    const uploadsDir = join(process.cwd(), 'public', 'uploads')
    if (!existsSync(uploadsDir)) {
      await mkdir(uploadsDir, { recursive: true })
    }

    // Write file
    const filepath = join(uploadsDir, filename)
    await writeFile(filepath, buffer)

    // Return the URL
    const fileUrl = `/uploads/${filename}`

    return NextResponse.json({ 
      message: 'File uploaded successfully',
      url: fileUrl,
      filename: filename
    })

  } catch (error) {
    console.error('Upload error:', error)
    return NextResponse.json({ error: 'Failed to upload file' }, { status: 500 })
  }
}

--- File: api\auth\[...nextauth]\route.ts ---
import NextAuth from "next-auth"
import CredentialsProvider from "next-auth/providers/credentials"
import { db } from "@/lib/db"
import bcrypt from "bcryptjs"

export const authOptions = {
  providers: [
    CredentialsProvider({
      name: "credentials",
      credentials: {
        email: { label: "Email", type: "email" },
        password: { label: "Password", type: "password" }
      },
      async authorize(credentials) {
        if (!credentials?.email || !credentials?.password) {
          return null
        }

        const admin = await db.admin.findUnique({
          where: {
            email: credentials.email
          }
        })

        if (!admin) {
          return null
        }

        const isPasswordValid = await bcrypt.compare(
          credentials.password,
          admin.password
        )

        if (!isPasswordValid) {
          return null
        }

        return {
          id: admin.id.toString(),
          email: admin.email,
          name: admin.name,
          role: admin.role
        }
      }
    })
  ],
  session: {
    strategy: "jwt" as const
  },
  secret: process.env.NEXTAUTH_SECRET,
  pages: {
    signIn: "/admin/login",
    error: "/admin/login"
  },
  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token.role = user.role
      }
      return token
    },
    async session({ session, token }) {
      if (token) {
        session.user.id = token.sub!
        session.user.role = token.role
      }
      return session
    },
    async redirect({ url, baseUrl }) {
      // Always use relative redirects to work in any environment
      if (url.startsWith("/")) return url
      // If it's an absolute URL on the same origin, make it relative
      try {
        const urlObj = new URL(url)
        if (urlObj.origin === baseUrl) {
          return urlObj.pathname + urlObj.search + urlObj.hash
        }
      } catch {
        // If URL parsing fails, return relative dashboard URL
      }
      // Default to dashboard
      return "/admin/dashboard"
    }
  }
}

const handler = NextAuth(authOptions)

export { handler as GET, handler as POST }

--- File: api\b2b\route.ts ---
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/app/api/auth/[...nextauth]/route'
import { db } from '@/lib/db'
import * as z from 'zod'

const b2bSchema = z.object({
  name: z.string().min(2, 'Name must be at least 2 characters'),
  company: z.string().min(2, 'Company name must be at least 2 characters'),
  email: z.string().email('Please enter a valid email address'),
  phone: z.string().min(10, 'Please enter a valid phone number'),
  country: z.string().min(2, 'Please select or enter a country'),
  message: z.string().min(10, 'Message must be at least 10 characters')
})

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    
    // Validate the request body
    const validatedData = b2bSchema.parse(body)
    
    // Save to database
    const b2bSubmission = await db.b2BSubmission.create({
      data: {
        name: validatedData.name,
        company: validatedData.company,
        email: validatedData.email,
        phone: validatedData.phone,
        country: validatedData.country,
        message: validatedData.message
      }
    })

    return NextResponse.json(
      { 
        message: 'B2B form submitted successfully',
        id: b2bSubmission.id
      },
      { status: 201 }
    )
  } catch (error) {
    console.error('B2B form error:', error)
    
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { 
          error: 'Validation failed',
          details: error.errors
        },
        { status: 400 }
      )
    }

    return NextResponse.json(
      { error: 'Failed to submit B2B form' },
      { status: 500 }
    )
  }
}

export async function GET() {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const b2bSubmissions = await db.b2BSubmission.findMany({
      orderBy: { createdAt: 'desc' },
      take: 50 // Limit to 50 most recent
    })

    return NextResponse.json(b2bSubmissions)
  } catch (error) {
    console.error('Failed to fetch B2B submissions:', error)
    return NextResponse.json(
      { error: 'Failed to fetch B2B submissions' },
      { status: 500 }
    )
  }
}

--- File: api\b2b\[id]\status\route.ts ---
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/app/api/auth/[...nextauth]/route'
import { db } from '@/lib/db'

export async function PATCH(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { status } = body

    if (!status || !['new', 'reviewed', 'interested', 'partnered', 'rejected'].includes(status)) {
      return NextResponse.json({ error: 'Invalid status' }, { status: 400 })
    }

    const submissionId = parseInt(params.id)
    if (isNaN(submissionId)) {
      return NextResponse.json({ error: 'Invalid submission ID' }, { status: 400 })
    }

    const updatedSubmission = await db.b2BSubmission.update({
      where: { id: submissionId },
      data: { status }
    })

    return NextResponse.json(updatedSubmission)
  } catch (error) {
    console.error('Failed to update B2B submission status:', error)
    return NextResponse.json(
      { error: 'Failed to update submission status' },
      { status: 500 }
    )
  }
}

--- File: api\clear-sample-data\route.ts ---
import { NextRequest, NextResponse } from 'next/server';
import { db } from '@/lib/db';

export async function POST(request: NextRequest) {
  try {
    // Delete all data in correct order due to foreign key constraints
    const deleteDynamicTables = await db.dynamicTable.deleteMany({});
    const deleteDetailPages = await db.detailPage.deleteMany({});
    const deleteCards = await db.card.deleteMany({});
    const deleteCategories = await db.category.deleteMany({});
    const deleteStudyPages = await db.studyPage.deleteMany({});
    const deleteTestimonials = await db.testimonial.deleteMany({});
    const deleteContactSubmissions = await db.contactSubmission.deleteMany({});
    const deleteB2BSubmissions = await db.b2BSubmission.deleteMany({});
    const deleteLuckyDrawEntries = await db.luckyDrawEntry.deleteMany({});
    
    // Keep admin and site settings as they are essential
    
    const totalDeleted = deleteDynamicTables.count + deleteDetailPages.count + 
                        deleteCards.count + deleteCategories.count + 
                        deleteStudyPages.count + deleteTestimonials.count +
                        deleteContactSubmissions.count + deleteB2BSubmissions.count +
                        deleteLuckyDrawEntries.count;
    
    console.log(`Deleted ${totalDeleted} records:
      - Study Pages: ${deleteStudyPages.count}
      - Categories: ${deleteCategories.count}
      - Cards: ${deleteCards.count}
      - Detail Pages: ${deleteDetailPages.count}
      - Dynamic Tables: ${deleteDynamicTables.count}
      - Testimonials: ${deleteTestimonials.count}
      - Contact Submissions: ${deleteContactSubmissions.count}
      - B2B Submissions: ${deleteB2BSubmissions.count}
      - Lucky Draw Entries: ${deleteLuckyDrawEntries.count}`);
    
    return NextResponse.json({ 
      success: true, 
      message: `Successfully removed all sample data (${totalDeleted} records)`,
      deletedCount: totalDeleted,
      details: {
        studyPages: deleteStudyPages.count,
        categories: deleteCategories.count,
        cards: deleteCards.count,
        detailPages: deleteDetailPages.count,
        dynamicTables: deleteDynamicTables.count,
        testimonials: deleteTestimonials.count,
        contactSubmissions: deleteContactSubmissions.count,
        b2bSubmissions: deleteB2BSubmissions.count,
        luckyDrawEntries: deleteLuckyDrawEntries.count
      }
    });
  } catch (error) {
    console.error('Error clearing sample data:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to clear sample data' },
      { status: 500 }
    );
  }
}

--- File: api\contact\route.ts ---
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/app/api/auth/[...nextauth]/route'
import { db } from '@/lib/db'
import * as z from 'zod'

const contactSchema = z.object({
  name: z.string().min(2, 'Name must be at least 2 characters'),
  email: z.string().email('Please enter a valid email address'),
  phone: z.string().min(10, 'Please enter a valid phone number'),
  purpose: z.enum(['Study Visa', 'Admission Help', 'Scholarship', 'General']),
  message: z.string().min(10, 'Message must be at least 10 characters')
})

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    
    // Validate the request body
    const validatedData = contactSchema.parse(body)
    
    // Save to database
    const contactSubmission = await db.contactSubmission.create({
      data: {
        name: validatedData.name,
        email: validatedData.email,
        phone: validatedData.phone,
        purpose: validatedData.purpose,
        message: validatedData.message
      }
    })

    return NextResponse.json(
      { 
        message: 'Contact form submitted successfully',
        id: contactSubmission.id
      },
      { status: 201 }
    )
  } catch (error) {
    console.error('Contact form error:', error)
    
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { 
          error: 'Validation failed',
          details: error.errors
        },
        { status: 400 }
      )
    }

    return NextResponse.json(
      { error: 'Failed to submit contact form' },
      { status: 500 }
    )
  }
}

export async function GET() {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const contacts = await db.contactSubmission.findMany({
      orderBy: { createdAt: 'desc' },
      take: 50 // Limit to 50 most recent
    })

    return NextResponse.json(contacts)
  } catch (error) {
    console.error('Failed to fetch contacts:', error)
    return NextResponse.json(
      { error: 'Failed to fetch contacts' },
      { status: 500 }
    )
  }
}

--- File: api\contact\[id]\status\route.ts ---
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/app/api/auth/[...nextauth]/route'
import { db } from '@/lib/db'

export async function PATCH(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const { status } = body

    if (!status || !['new', 'contacted', 'resolved', 'closed'].includes(status)) {
      return NextResponse.json({ error: 'Invalid status' }, { status: 400 })
    }

    const contactId = parseInt(params.id)
    if (isNaN(contactId)) {
      return NextResponse.json({ error: 'Invalid contact ID' }, { status: 400 })
    }

    const updatedContact = await db.contactSubmission.update({
      where: { id: contactId },
      data: { status }
    })

    return NextResponse.json(updatedContact)
  } catch (error) {
    console.error('Failed to update contact status:', error)
    return NextResponse.json(
      { error: 'Failed to update contact status' },
      { status: 500 }
    )
  }
}

--- File: api\health\route.ts ---
import { NextResponse } from "next/server";

export async function GET() {
  return NextResponse.json({ message: "Good!" });
}

--- File: api\lucky-draw\reset\route.ts ---
import { NextRequest, NextResponse } from 'next/server'
import { db } from '@/lib/db'

export async function POST(request: NextRequest) {
  try {
    // Reset all winners
    const result = await db.luckyDrawEntry.updateMany({
      where: { isWinner: true },
      data: { isWinner: false }
    })

    return NextResponse.json({
      message: 'Lucky draw reset successfully',
      resetCount: result.count
    })
  } catch (error) {
    console.error('Lucky draw reset error:', error)
    return NextResponse.json(
      { error: 'Failed to reset lucky draw' },
      { status: 500 }
    )
  }
}

--- File: api\lucky-draw\route.ts ---
import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/app/api/auth/[...nextauth]/route'
import { db } from '@/lib/db'
import * as z from 'zod'

const luckyDrawSchema = z.object({
  name: z.string().min(2, 'Name must be at least 2 characters'),
  email: z.string().email('Please enter a valid email address'),
  phone: z.string().min(10, 'Please enter a valid phone number'),
  country: z.string().min(2, 'Please select or enter a country'),
  reason: z.string().min(20, 'Please tell us why you want to study abroad (at least 20 characters)')
})

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    
    // Validate the request body
    const validatedData = luckyDrawSchema.parse(body)
    
    // Check if email already exists
    const existingEntry = await db.luckyDrawEntry.findFirst({
      where: { email: validatedData.email }
    })
    
    if (existingEntry) {
      return NextResponse.json(
        { error: 'Email already registered for lucky draw' },
        { status: 409 }
      )
    }
    
    // Save to database
    const luckyDrawEntry = await db.luckyDrawEntry.create({
      data: {
        name: validatedData.name,
        email: validatedData.email,
        phone: validatedData.phone,
        country: validatedData.country,
        reason: validatedData.reason
      }
    })

    return NextResponse.json(
      { 
        message: 'Lucky draw entry submitted successfully',
        id: luckyDrawEntry.id
      },
      { status: 201 }
    )
  } catch (error) {
    console.error('Lucky draw entry error:', error)
    
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { 
          error: 'Validation failed',
          details: error.errors
        },
        { status: 400 }
      )
    }

    // Try to provide more specific error information
    if (error instanceof Error) {
      return NextResponse.json(
        { 
          error: 'Failed to submit lucky draw entry',
          details: error.message 
        },
        { status: 500 }
      )
    }

    return NextResponse.json(
      { error: 'Failed to submit lucky draw entry' },
      { status: 500 }
    )
  }
}

export async function GET() {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const entries = await db.luckyDrawEntry.findMany({
      orderBy: { createdAt: 'desc' },
      take: 100 // Limit to 100 most recent
    })

    return NextResponse.json(entries)
  } catch (error) {
    console.error('Failed to fetch lucky draw entries:', error)
    return NextResponse.json(
      { error: 'Failed to fetch lucky draw entries' },
      { status: 500 }
    )
  }
}

--- File: api\lucky-draw\[id]\winner\route.ts ---
import { NextRequest, NextResponse } from 'next/server'
import { db } from '@/lib/db'

export async function PATCH(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const entryId = parseInt(params.id)
    if (isNaN(entryId)) {
      return NextResponse.json(
        { error: 'Invalid entry ID' },
        { status: 400 }
      )
    }

    // Mark entry as winner
    const updatedEntry = await db.luckyDrawEntry.update({
      where: { id: entryId },
      data: { isWinner: true }
    })

    return NextResponse.json({
      message: 'Winner marked successfully',
      winner: updatedEntry
    })
  } catch (error) {
    console.error('Winner marking error:', error)
    return NextResponse.json(
      { error: 'Failed to mark winner' },
      { status: 500 }
    )
  }
}

--- File: api\newsletter\route.ts ---
import { NextRequest, NextResponse } from 'next/server'
import * as z from 'zod'

const newsletterSchema = z.object({
  email: z.string().email('Please enter a valid email address')
})

// In a real application, you would save this to a database
// For now, we'll just simulate the subscription
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    
    // Validate the request body
    const validatedData = newsletterSchema.parse(body)
    
    // Simulate processing time
    await new Promise(resolve => setTimeout(resolve, 1000))
    
    // In a real app, you would save to database here:
    // await db.newsletter.create({
    //   data: {
    //     email: validatedData.email,
    //     subscribedAt: new Date()
    //   }
    // })
    
    console.log('Newsletter subscription:', validatedData.email)

    return NextResponse.json(
      { 
        message: 'Successfully subscribed to newsletter',
        email: validatedData.email
      },
      { status: 201 }
    )
  } catch (error) {
    console.error('Newsletter subscription error:', error)
    
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { 
          error: 'Validation failed',
          details: error.errors
        },
        { status: 400 }
      )
    }

    return NextResponse.json(
      { error: 'Failed to subscribe to newsletter' },
      { status: 500 }
    )
  }
}

--- File: api\study-pages\route.ts ---
import { NextResponse } from 'next/server'
import { db } from '@/lib/db'

export async function GET() {
  try {
    const studyPages = await db.studyPage.findMany({
      where: { isActive: { not: false } },
      select: {
        id: true,
        title: true,
        slug: true,
        description: true,
        bannerUrl: true,
        seoTitle: true,
        seoDescription: true,
        isActive: true,
        createdAt: true,
        _count: {
          select: {
            categories: true
          }
        }
      },
      orderBy: { createdAt: 'desc' }
    })

    return NextResponse.json(studyPages)
  } catch (error) {
    console.error('Failed to fetch study pages:', error)
    return NextResponse.json(
      { error: 'Failed to fetch study pages' },
      { status: 500 }
    )
  }
}

--- File: api\testimonials\route.ts ---
import { NextResponse } from 'next/server'
import { db } from '@/lib/db'

export async function GET() {
  try {
    const testimonials = await db.testimonial.findMany({
      where: { isActive: { not: false } },
      select: {
        id: true,
        name: true,
        country: true,
        university: true,
        course: true,
        rating: true,
        content: true,
        imageUrl: true,
        isActive: true,
        isFeatured: true,
        createdAt: true,
      },
      orderBy: [
        { isFeatured: 'desc' },
        { createdAt: 'desc' }
      ]
    })

    return NextResponse.json(testimonials)
  } catch (error) {
    console.error('Failed to fetch testimonials:', error)
    return NextResponse.json(
      { error: 'Failed to fetch testimonials' },
      { status: 500 }
    )
  }
}

--- File: b2b\page.tsx ---
'use client'

import { useState } from 'react'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import * as z from 'zod'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Label } from '@/components/ui/label'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Loader2, Handshake, Mail, Phone, Globe, Building } from 'lucide-react'
import Link from 'next/link'
import { toast } from 'sonner'
import Navbar from '@/components/navbar'

const b2bSchema = z.object({
  name: z.string().min(2, 'Name must be at least 2 characters'),
  company: z.string().min(2, 'Company name must be at least 2 characters'),
  email: z.string().email('Please enter a valid email address'),
  phone: z.string().min(10, 'Please enter a valid phone number'),
  country: z.string().min(2, 'Please select or enter a country'),
  message: z.string().min(10, 'Message must be at least 10 characters')
})

type B2BFormData = z.infer<typeof b2bSchema>

const countries = [
  'United States', 'Canada', 'United Kingdom', 'Australia', 'Germany', 'France',
  'Italy', 'Spain', 'Netherlands', 'Sweden', 'Norway', 'Denmark', 'Finland',
  'Switzerland', 'Austria', 'Belgium', 'Ireland', 'Portugal', 'Greece',
  'India', 'China', 'Japan', 'South Korea', 'Singapore', 'Malaysia',
  'UAE', 'Saudi Arabia', 'Israel', 'Turkey', 'Egypt', 'South Africa',
  'Brazil', 'Argentina', 'Mexico', 'Chile', 'Colombia', 'Peru',
  'New Zealand', 'Others'
]

export default function B2BPage() {
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [isSubmitted, setIsSubmitted] = useState(false)

  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
    watch,
    reset
  } = useForm<B2BFormData>({
    resolver: zodResolver(b2bSchema)
  })

  const selectedCountry = watch('country')

  const onSubmit = async (data: B2BFormData) => {
    setIsSubmitting(true)
    try {
      const response = await fetch('/api/b2b', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      })

      if (response.ok) {
        toast.success('Your partnership inquiry has been sent successfully! We will contact you soon.')
        setIsSubmitted(true)
        reset()
      } else {
        throw new Error('Failed to send inquiry')
      }
    } catch (error) {
      toast.error('Failed to send inquiry. Please try again.')
    } finally {
      setIsSubmitting(false)
    }
  }

  if (isSubmitted) {
    return (
      <div className="min-h-screen bg-gray-50 py-12">
        <Navbar />
        <div className="max-w-2xl mx-auto px-4 sm:px-6 lg:px-8">
          <Card>
            <CardContent className="pt-6">
              <div className="text-center">
                <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Handshake className="w-8 h-8 text-green-600" />
                </div>
                <h2 className="text-2xl font-bold text-gray-900 mb-2">Partnership Inquiry Sent!</h2>
                <p className="text-gray-600 mb-6">
                  Thank you for your interest in partnering with us. We have received your inquiry 
                  and our business development team will contact you within 48 hours.
                </p>
                <Link href="/">
                  <Button>Back to Home</Button>
                </Link>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Navbar />

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold text-gray-900 mb-4">Partner With Us</h1>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            Join our network of educational partners and help students achieve their study abroad dreams. 
            We collaborate with universities, agents, and organizations worldwide.
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Partnership Information */}
          <div className="lg:col-span-1">
            <Card>
              <CardHeader>
                <CardTitle>Why Partner With Us?</CardTitle>
                <CardDescription>
                  Join our growing network of trusted partners
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="flex items-start space-x-3">
                  <div className="w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center flex-shrink-0 mt-1">
                    <Globe className="w-4 h-4 text-primary" />
                  </div>
                  <div>
                    <p className="font-medium">Global Reach</p>
                    <p className="text-sm text-gray-600">
                      Connect with students from over 50 countries looking to study abroad
                    </p>
                  </div>
                </div>
                <div className="flex items-start space-x-3">
                  <div className="w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center flex-shrink-0 mt-1">
                    <Building className="w-4 h-4 text-primary" />
                  </div>
                  <div>
                    <p className="font-medium">Quality Network</p>
                    <p className="text-sm text-gray-600">
                      Join a curated network of reputable institutions and service providers
                    </p>
                  </div>
                </div>
                <div className="flex items-start space-x-3">
                  <div className="w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center flex-shrink-0 mt-1">
                    <Handshake className="w-4 h-4 text-primary" />
                  </div>
                  <div>
                    <p className="font-medium">Mutual Growth</p>
                    <p className="text-sm text-gray-600">
                      Benefit from shared resources, referrals, and collaborative opportunities
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="mt-6">
              <CardHeader>
                <CardTitle>Partnership Types</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3 text-sm">
                  <div className="p-3 bg-gray-50 rounded-lg">
                    <p className="font-medium">Educational Institutions</p>
                    <p className="text-gray-600">Universities, colleges, and schools</p>
                  </div>
                  <div className="p-3 bg-gray-50 rounded-lg">
                    <p className="font-medium">Education Agents</p>
                    <p className="text-gray-600">Recruitment agencies and consultants</p>
                  </div>
                  <div className="p-3 bg-gray-50 rounded-lg">
                    <p className="font-medium">Service Providers</p>
                    <p className="text-gray-600">Accommodation, insurance, and support services</p>
                  </div>
                  <div className="p-3 bg-gray-50 rounded-lg">
                    <p className="font-medium">Government Organizations</p>
                    <p className="text-gray-600">Educational bodies and cultural exchanges</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* B2B Form */}
          <div className="lg:col-span-2">
            <Card>
              <CardHeader>
                <CardTitle>Partnership Inquiry</CardTitle>
                <CardDescription>
                  Tell us about your organization and how we can work together
                </CardDescription>
              </CardHeader>
              <CardContent>
                <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="space-y-2">
                      <Label htmlFor="name">Your Name *</Label>
                      <Input
                        id="name"
                        {...register('name')}
                        placeholder="John Doe"
                        className={errors.name ? 'border-red-500' : ''}
                      />
                      {errors.name && (
                        <p className="text-sm text-red-500">{errors.name.message}</p>
                      )}
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="company">Organization/Company Name *</Label>
                      <Input
                        id="company"
                        {...register('company')}
                        placeholder="ABC Education Group"
                        className={errors.company ? 'border-red-500' : ''}
                      />
                      {errors.company && (
                        <p className="text-sm text-red-500">{errors.company.message}</p>
                      )}
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="space-y-2">
                      <Label htmlFor="email">Email Address *</Label>
                      <Input
                        id="email"
                        type="email"
                        {...register('email')}
                        placeholder="john@company.com"
                        className={errors.email ? 'border-red-500' : ''}
                      />
                      {errors.email && (
                        <p className="text-sm text-red-500">{errors.email.message}</p>
                      )}
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="phone">Phone Number *</Label>
                      <Input
                        id="phone"
                        {...register('phone')}
                        placeholder="+1-234-567-8900"
                        className={errors.phone ? 'border-red-500' : ''}
                      />
                      {errors.phone && (
                        <p className="text-sm text-red-500">{errors.phone.message}</p>
                      )}
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="country">Country *</Label>
                    <Select 
                      value={selectedCountry} 
                      onValueChange={(value) => setValue('country', value)}
                    >
                      <SelectTrigger className={errors.country ? 'border-red-500' : ''}>
                        <SelectValue placeholder="Select your country" />
                      </SelectTrigger>
                      <SelectContent>
                        {countries.map((country) => (
                          <SelectItem key={country} value={country}>
                            {country}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    {errors.country && (
                      <p className="text-sm text-red-500">{errors.country.message}</p>
                    )}
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="message">Message/Proposal *</Label>
                    <Textarea
                      id="message"
                      {...register('message')}
                      placeholder="Tell us about your organization, what type of partnership you're looking for, and how we can collaborate..."
                      rows={6}
                      className={errors.message ? 'border-red-500' : ''}
                    />
                    {errors.message && (
                      <p className="text-sm text-red-500">{errors.message.message}</p>
                    )}
                  </div>

                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                    <p className="text-sm text-blue-800">
                      <strong>Next Steps:</strong> After receiving your inquiry, our business development team 
                      will review your proposal and contact you within 48 hours to discuss potential collaboration opportunities.
                    </p>
                  </div>

                  <Button
                    type="submit"
                    className="w-full"
                    disabled={isSubmitting}
                  >
                    {isSubmitting ? (
                      <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        Sending Inquiry...
                      </>
                    ) : (
                      'Send Partnership Inquiry'
                    )}
                  </Button>
                </form>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  )
}

--- File: contact\page.tsx ---
'use client'

import { useState } from 'react'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import * as z from 'zod'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Label } from '@/components/ui/label'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Loader2, Mail, Phone, MapPin, Clock } from 'lucide-react'
import Link from 'next/link'
import { toast } from 'sonner'
import Navbar from '@/components/navbar'
import { useSocket } from '@/hooks/use-socket'

const contactSchema = z.object({
  name: z.string().min(2, 'Name must be at least 2 characters'),
  email: z.string().email('Please enter a valid email address'),
  phone: z.string().min(10, 'Please enter a valid phone number'),
  purpose: z.enum(['Study Visa', 'Admission Help', 'Scholarship', 'General'], {
    required_error: 'Please select a purpose of inquiry'
  }),
  message: z.string().min(10, 'Message must be at least 10 characters')
})

type ContactFormData = z.infer<typeof contactSchema>

export default function ContactPage() {
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [isSubmitted, setIsSubmitted] = useState(false)
  const { notifyContactSubmission } = useSocket()

  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
    watch,
    reset
  } = useForm<ContactFormData>({
    resolver: zodResolver(contactSchema)
  })

  const selectedPurpose = watch('purpose')

  const onSubmit = async (data: ContactFormData) => {
    setIsSubmitting(true)
    try {
      const response = await fetch('/api/contact', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      })

      if (response.ok) {
        toast.success('Your message has been sent successfully! We will contact you soon.')
        setIsSubmitted(true)
        
        // Send real-time notification to admin
        notifyContactSubmission({
          name: data.name,
          email: data.email,
          purpose: data.purpose
        })
        
        reset()
      } else {
        throw new Error('Failed to send message')
      }
    } catch (error) {
      toast.error('Failed to send message. Please try again.')
    } finally {
      setIsSubmitting(false)
    }
  }

  if (isSubmitted) {
    return (
      <div className="min-h-screen bg-gray-50 py-12">
        <Navbar />
        <div className="max-w-2xl mx-auto px-4 sm:px-6 lg:px-8">
          <Card>
            <CardContent className="pt-6">
              <div className="text-center">
                <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Mail className="w-8 h-8 text-green-600" />
                </div>
                <h2 className="text-2xl font-bold text-gray-900 mb-2">Message Sent Successfully!</h2>
                <p className="text-gray-600 mb-6">
                  Thank you for contacting us. We have received your message and will get back to you within 24 hours.
                </p>
                <Link href="/">
                  <Button>Back to Home</Button>
                </Link>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Navbar />

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold text-gray-900 mb-4">Contact Us</h1>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            Have questions about studying abroad? We're here to help! Fill out the form below 
            and we'll get back to you within 24 hours.
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Contact Information */}
          <div className="lg:col-span-1">
            <Card>
              <CardHeader>
                <CardTitle>Get in Touch</CardTitle>
                <CardDescription>
                  Reach out to us through any of these channels
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="flex items-start space-x-3">
                  <Mail className="w-5 h-5 text-primary mt-1" />
                  <div>
                    <p className="font-medium">Email</p>
                    <p className="text-sm text-gray-600">info@studyabroadwithhadi.info</p>
                  </div>
                </div>
                <div className="flex items-start space-x-3">
                  <Phone className="w-5 h-5 text-primary mt-1" />
                  <div>
                    <p className="font-medium">Phone</p>
                    <p className="text-sm text-gray-600">+1-234-567-8900</p>
                  </div>
                </div>
                <div className="flex items-start space-x-3">
                  <MapPin className="w-5 h-5 text-primary mt-1" />
                  <div>
                    <p className="font-medium">Address</p>
                    <p className="text-sm text-gray-600">
                      123 Education Street<br />
                      Learning City, LC 12345<br />
                      United States
                    </p>
                  </div>
                </div>
                <div className="flex items-start space-x-3">
                  <Clock className="w-5 h-5 text-primary mt-1" />
                  <div>
                    <p className="font-medium">Business Hours</p>
                    <p className="text-sm text-gray-600">
                      Monday - Friday: 9:00 AM - 6:00 PM<br />
                      Saturday: 10:00 AM - 4:00 PM<br />
                      Sunday: Closed
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="mt-6">
              <CardHeader>
                <CardTitle>Response Time</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2 text-sm">
                  <div className="flex justify-between">
                    <span>Email inquiries:</span>
                    <span className="font-medium">Within 24 hours</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Phone calls:</span>
                    <span className="font-medium">Immediate (business hours)</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Consultation booking:</span>
                    <span className="font-medium">Within 48 hours</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Contact Form */}
          <div className="lg:col-span-2">
            <Card>
              <CardHeader>
                <CardTitle>Send us a Message</CardTitle>
                <CardDescription>
                  Fill out the form below and we'll respond as soon as possible
                </CardDescription>
              </CardHeader>
              <CardContent>
                <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="space-y-2">
                      <Label htmlFor="name">Full Name *</Label>
                      <Input
                        id="name"
                        {...register('name')}
                        placeholder="John Doe"
                        className={errors.name ? 'border-red-500' : ''}
                      />
                      {errors.name && (
                        <p className="text-sm text-red-500">{errors.name.message}</p>
                      )}
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="email">Email Address *</Label>
                      <Input
                        id="email"
                        type="email"
                        {...register('email')}
                        placeholder="john@example.com"
                        className={errors.email ? 'border-red-500' : ''}
                      />
                      {errors.email && (
                        <p className="text-sm text-red-500">{errors.email.message}</p>
                      )}
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="space-y-2">
                      <Label htmlFor="phone">Phone Number *</Label>
                      <Input
                        id="phone"
                        {...register('phone')}
                        placeholder="+1-234-567-8900"
                        className={errors.phone ? 'border-red-500' : ''}
                      />
                      {errors.phone && (
                        <p className="text-sm text-red-500">{errors.phone.message}</p>
                      )}
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="purpose">Purpose of Inquiry *</Label>
                      <Select 
                        value={selectedPurpose} 
                        onValueChange={(value) => setValue('purpose', value as any)}
                      >
                        <SelectTrigger className={errors.purpose ? 'border-red-500' : ''}>
                          <SelectValue placeholder="Select purpose" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="Study Visa">Study Visa</SelectItem>
                          <SelectItem value="Admission Help">Admission Help</SelectItem>
                          <SelectItem value="Scholarship">Scholarship</SelectItem>
                          <SelectItem value="General">General Inquiry</SelectItem>
                        </SelectContent>
                      </Select>
                      {errors.purpose && (
                        <p className="text-sm text-red-500">{errors.purpose.message}</p>
                      )}
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="message">Message *</Label>
                    <Textarea
                      id="message"
                      {...register('message')}
                      placeholder="Tell us about your study abroad goals, questions, or how we can help you..."
                      rows={6}
                      className={errors.message ? 'border-red-500' : ''}
                    />
                    {errors.message && (
                      <p className="text-sm text-red-500">{errors.message.message}</p>
                    )}
                  </div>

                  <Button
                    type="submit"
                    className="w-full"
                    disabled={isSubmitting}
                  >
                    {isSubmitting ? (
                      <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        Sending Message...
                      </>
                    ) : (
                      'Send Message'
                    )}
                  </Button>
                </form>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  )
}

--- File: favicon.ico ---
    ��     (    (   �                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        >>?6>>?@>>?@>>?@>>?@>>?@>>?@??@@??@@>>?@>>?@>>?@>>?@>>?@>>?@>>?@>>?@>>?@>>?@>>?@>>?@>>?@>>?@>>?@??@@>>?@??@@>>?@>>?@>>?@>>?>??@
                            ?????@@>>?@>>?@>>?@>>?@>>?@>>?@>>?@>>?@>>?@>>?@>>?@>>?@>>?@>>?@>>?@>>?@>>?@??@@>>?@>>?@>>?@??@@>>?@>>?@??@@??@@>>?@>>?@>>?@>>?0                                                                                                                                                                                                                                    >>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?x@@@                         ???>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?$                                                                                                                                                                                                                                >>>>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�??@�>>?�>>?�>>?�>>?�>>?D                            >>?0>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?
                                                                                                                                                                                                                                >>? >>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?                         @@@ >>?`>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�>>?�==?�@@@                                                                                                                                                                                                                                 >>?F>>?�==>�==>�==>�>>?�==>�>>?�==>�>>?�>>?�>>?�>>?�>>?�==>�==>�==>�>>?�>>?�==>�==>�==>�==>�==>�>>?�==>�>>?�==>�==>�==>�==>�>>>�>>>
                        @@@>>?�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>d                                                                                                                                                                                                                                @@@ ==>x==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�<<>                         ==>
==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�==>�===4                                                                                                                                                                                                                                ==>==>�<<=�<<=�<<=�<<=�<<=�<<=�==>�<<=�<<=�<<=�<<=�==>�==>�==>�==>�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�==>�<<=�<<=�<<=�<<=�<<=�<<=�<<=Z                            ==> <<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=                                                                                                                                                                                                                                ===<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�;;=,                            <<=H<<=�<<=�<<=�<<=�<<=�;;<�<<=�<<=�<<=�<<=�<<=�;;<�<<=�<<=�<<=�<<=�<<=�<<=�<<=�<<=�;;<�<<=�;;<�<<=�<<=�<<=�<<=�;;<�<<=�;;<�<<<�;;;                                                                                                                                                                                                                                ;;<0;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;=                        === ;;<|;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<|                                                                                                                                                                                                                                    ;;<`;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�::;�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�::;�;;<�;;<�;;<�;;<�;;<�::=                        ::<;;<�;;<�;;<�;;<�;;<�;;<�;;<�;;<�::;�::;�::;�;;<�::;�;;<�;;<�;;<�;;<�;;<�::;�::;�::;�;;<�;;<�::;�::;�::;�::;�::;�::;�;;<�::;�::;H                                                                                                                                                                                                                                888 ::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;r88@                         ::;::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;�::;                                                                                                                                                                                                                                :::
::;�::;�::;�::;�99:�::;�99:�::;�::;�::;�::;�::;�99:�99:�99:�::;�::;�::;�::;�::;�::;�99:�99:�99:�::;�::;�::;�::;�99:�::;�99:�99;@                            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<;;<<<<;;;                                                                                                                                                                                                                                    99: 99:�99:�99:�99:�99:�99:�99:�99:�99:�99:�99:�99:�99:�99:�99:�99:�99:�99:�99:�99:�99:�99:�99:�99:�99:�99:�99:�99:�99:�99:�99:�99;                                                                                                                                                                                                                                                                                                                                                                                                889D99:�889�889�889�889�99:�889�99:�99:�889�889�889�889�889�889�99:�889�889�889�889�889�889�889�889�889�889�889�889�889�889�889�999                                                                                                                                                                                                                                                                                                                                                                                            88: 889v889�889�889�889�889�889�889�889�889�889�889�889�889�889�889�889�889�889�889�889�889�889�889�889�889�889�889�889�889�889�889�889                                                                                                                                                                                                                                                                                                                                                                                             999778�778�778�778�778�889�778�778�778�778�778�778�778�778�778�778�778�778�778�778�889�778�778�778�778�778�778�778�778�778�778�778T                                                                                                                                                                                                                                                                                                                                                                                                778778�778�778�778�778�778�778�778�778�778�778�778�778�778�778�778�778�778�778�778�778�778�778�778�778�778�778�778�778�778�778�667*                                                                                                                                                                                                                                                                                                                                                                                                778,667�667�667�667�667�667�667�667�667�667�667�667�667�667�667�667�667�667�667�667�667�667�667�667�667�667�667�667�667�667�667�777                                                                                                                                                                                                                                                                                                                                                                                                667V667�667�667�667�667�667�667�667�556�667�667�667�667�667�667�667�556�667�667�667�667�667�667�556�667�556�556�667�667�556�666�666                                                                                                                                                                                                                                                                                                                                                                                            666 556�556�556�556�556�556�556�556�556�556�556�556�556�556�556�556�556�556�556�556�556�556�556�556�556�556�556�556�556�556�556�556l                                                                                                                                                                                                                                                                                                                                                                                                555556�556�556�556�445�556�556�445�556�556�556�556�445�445�445�556�556�556�556�556�556�445�556�445�445�556�556�445�556�556�556�556<                                                                                                                                                                                                                                                                                                                                                                                                445445�445�445�445�445�445�445�445�445�445�445�445�445�445�445�445�445�445�445�445�445�445�445�445�445�445�445�445�445�445�445�335                                                                                                                                                                                                                                                                                                                                                                                                3346334�334�334�334�334�445�445�445�334�334�334�334�334�334�334�445�334�445�334�334�334�334�334�334�334�445�334�334�334�334�334�223                                                                                                                                                                                                                                                                                                                                                                                                334f334�334�334�334�334�334�334�334�334�334�334�334�334�334�334�334�334�334�334�334�334�334�334�334�334�334�334�334�334�334�224�008                                                                                                                                                                                                                                                                                                                                                                                             224223�223�223�223�223�334�334�223�223�223�223�223�223�223�223�223�223�223�223�223�223�223�223�223�223�223�223�223�223�223�223�223R                                                                                                                                                                                                                                                                                                                                                                                                223223�223�223�223�223�223�223�223�223�223�223�223�223�223�223�223�223�223�223�223�223�223�223�223�223�223�223�223�223�223�223�113(                                                                                                                                                                                                                                                                                                                                                                                                112"112�112�112�112�223�112�112�112�112�112�112�112�223�112�112�112�112�112�112�112�112�112�112�112�112�112�112�112�112�112�112�222                                                                                                                                                                                                                                                                                                                                                                                                112D112�112�112�112�112�112�112�001�001�112�112�112�112�112�112�112�112�112�112�112�112�112�112�112�112�112�112�112�112�112�001�                                                                                                                                                                                                                                                                                                                                                                                                    001x001�001�001�001�001�001�001�001�001�001�001�001�001�001�001�001�001�001�001�001�001�001�001�001�001�001�001�001�001�001�001f                                                                                                                                                                                                                                                                                                                                                                                                002001�001�001�001�//0�//0�001�//0�001�001�001�001�//0�//0�//0�001�//0�//0�001�001�//0�//0�//0�//0�001�001�001�001�//0�//0�//0�//08                                                                                                                                                                                                                                                                                                                                                                                                000//0�//0�//0�//0�//0�//0�//0�//0�//0�//0�//0�//0�//0�//0�//0�//0�//0�//0�//0�//0�//0�//0�//0�//0�//0�//0�//0�//0�//0�//0�//0�//0                                                                                                                                                                                                                                                                                                                                                                                                //0.//0�../�../�../�../�//0�//0�//0�../�../�//0�../�//0�../�../�../�//0�//0�../�../�../�../�../�../�../�../�../�../�../�../�../�..0                                                                                                                                                                                                                                                                                                                                                                                                ../X../�../�../�../�../�../�../�../�../�../�../�../�../�../�../�../�../�../�../�../�../�../�../�../�../�../�../�../�../�../�../~..0                                                                                                                                                                                                                                                                                                                                                                                             000 --.�--.�--.�--.�--.�--.�--.�--.�--.�--.�--.�--.�--.�--.�--.�--.�--.�--.�--.�--.�--.�--.�--.�--.�--.�--.�--.�--.�--.�--.�--.�../L                                                                                                                                                                                                                                                                                                                                                                                                ../--.�--.�--.�--.�--.�--.�--.�--.�--.�--.�--.�--.�--.�--.�--.�--.�,,-�--.�--.�--.�--.�--.�--.�--.�--.�--.�,,-�--.�--.�--.�--.�---"                                                                                                                                                                                                                                                                                                                                                                                                ,,-,,-�,,-�,,-�,,-�,,-�,,-�,,-�,,-�,,-�,,-�,,-�,,-�,,-�,,-�,,-�,,-�,,-�,,-�,,-�,,-�,,-�,,-�,,-�,,-�,,-�,,-�,,-�,,-�,,-�,,-�,,-�++-
                                                                                                                                                                                                                                                                                                                                                                                                ,,-F,,-�,,-�,,-�,,-�,,-�,,-�,,-�,,-�,,-�,,-�,,-�,,-�,,-�,,-�,,-�++,�++,�,,-�,,-�,,-�,,-�,,-�,,-�,,-�++,�,,-�,,-�,,-�,,-�,,-�++,�++-                                                                                                                                                                                                                                                                                                                                                                                                ++,|++,�++,�++,�++,�++,�++,�++,�++,�++,�++,�++,�++,�++,�++,�++,�++,�++,�++,�++,�++,�++,�++,�++,�++,�++,�++,�++,�++,�++,�++,�++,d                                                                                                                                                                                                                                                                                                                                                                                                **,++,�++,�++,�**+�**+�++,�**+�**+�++,�**+�++,�**+�++,�**+�**+�**+�**+�**+�**+�**+�++,�++,�**+�**+�**+�**+�**+�**+�**+�**+�**+�**+4                                                                                                                                                                                                                                                                                                                                                                                                **,**+�**+�**+�**+�**+�**+�**+�**+�**+�**+�**+�**+�**+�**+�**+�**+�**+�**+�**+�**+�**+�**+�**+�**+�**+�**+�**+�**+�**+�**+�**+�))*                                                                                                                                                                                                                                                                                                                                                                                                **+8**+�))*�))*�))*�))*�))*�))*�))*�))*�))*�))*�))*�))*�))*�))*�))*�))*�**+�))*�))*�))*�))*�))*�))*�))*�))*�))*�))*�))*�))*�))*�***                                                                                                                                                                                                                                                                                                                                                                                            ((( ))*j))*�))*�))*�))*�))*�))*�))*�))*�))*�))*�))*�))*�))*�))*�))*�))*�))*�))*�))*�))*�))*�))*�))*�))*�))*�))*�))*�))*�))*�(()�(()z                                                                                                                                                                                                                                                                                                                                                                                                ((((()�(()�(()�(()�(()�(()�(()�(()�(()�(()�(()�(()�(()�(()�(()�(()�(()�(()�(()�(()�(()�(()�(()�(()�(()�(()�(()�(()�(()�(()�(()�(()H                                                                                                                                                                                                                                                                                                                                                                                                (()(()�''(�(()�(()�(()�(()�(()�(()�(()�(()�(()�(()�(()�(()�(()�(()�(()�(()�(()�(()�(()�(()�(()�(()�''(�''(�(()�''(�(()�''(�(()�(()                                                                                                                                                                                                                                                                                                                                                                                                 ''(,''(�''(�''(�''(�''(�''(�''(�''(�''(�''(�''(�''(�''(�''(�''(�''(�''(�''(�''(�''(�''(�''(�''(�''(�''(�''(�''(�''(�''(�''(�''(�(()
                                                                                                                                                                                                                                                                                                                                                                                                ''(\''(�''(�''(�''(�&&'�&&'�''(�&&'�''(�&&'�''(�&&'�&&'�&&'�&&'�&&'�&&'�&&'�''(�''(�''(�''(�&&'�&&'�&&'�&&'�&&'�''(�&&'�&&'�&&'�%%(                                                                                                                                                                                                                                                                                                                                                                                            &&&&&'�&&'�&&'�&&'�&&'�&&'�&&'�&&'�&&'�&&'�&&'�&&'�&&'�&&'�&&'�&&'�&&'�&&'�&&'�&&'�&&'�&&'�&&'�&&'�&&'�&&'�&&'�&&'�&&'�&&'�&&'�&&'^                                                                                                                                                                                                                                                                                                                                                                                                &&&
&&'�&&'�&&'�%%&�%%&�%%&�%%&�%%&�&&'�&&'�%%&�&&'�%%&�%%&�%%&�&&'�%%&�%%&�%%&�%%&�%%&�&&'�%%&�&&'�%%&�%%&�&&'�%%&�%%&�%%&�%%&�%%&.                                                                                                                                                                                                                                                                                                                                                                                                %%&%%&�%%&�%%&�%%&�%%&�%%&�%%&�%%&�%%&�%%&�%%&�%%&�%%&�%%&�%%&�%%&�%%&�%%&�%%&�%%&�%%&�%%&�%%&�%%&�%%&�%%&�%%&�%%&�%%&�%%&�%%&�%%%                                                                                                                                                                                                                                                                                                                                                                                                %%&J$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�&&'                                                                                                                                                                                                                                                                                                                                                                                            ((( $$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�$$%�##$v(((                                                                                                                                                                                                                                                                                                                                                                                             %%&##$�##$�##$�##$�##$�##$�##$�##$�##$�##$�##$�##$�##$�##$�##$�##$�##$�##$�##$�##$�##$�##$�##$�##$�##$�##$�##$�##$�##$�##$�##$�##$D                                                                                                                                                                                                                                                                                                                                                                                                ##$##$�""#�##$�##$�##$�##$�##$�##$�##$�##$�##$�##$�##$�##$�##$�##$�##$�##$�##$�##$�##$�##$�""#�##$�##$�##$�""#�##$�##$�##$�##$�##$                                                                                                                                                                                                                                                                                                                                                                                                ""#<""#�""#�""#�""#�""#�""#�""#�""#�""#�""#�""#�""#�""#�""#�""#�""#�""#�""#�""#�""#�""#�""#�""#�""#�""#�""#�""#�""#�""#�""#�""#�"""                                                                                                                                                                                                                                                                                                                                                                                                !!#p""#�""#�""#�""#�""#�!!"�""#�!!"�""#�""#�""#�""#�!!"�!!"�!!"�""#�!!"�!!"�""#�""#�""#�""#�!!"�""#�!!"�!!"�!!"�!!"�""#�!!"�"""�                                                                                                                                                                                                                                                                                                                                                                                                """!!"�!!"�!!"�!!"�!!"�!!"�!!"�!!"�!!"�!!"�!!"�!!"�!!"�!!"�!!"�!!"�!!"�!!"�!!"�!!"�!!"�!!"�!!"�!!"�!!"�!!"�!!"�!!"�!!"�!!"�!!"�!!"X                                                                                                                                                                                                                                                                                                                                                                                                !!"  !�  !�  !�  !�!!"�  !�!!"�!!"�!!"�  !�!!"�  !�  !�!!"�  !�  !�  !�  !�  !�!!"�  !�  !�!!"�  !�!!"�  !�  !�  !�  !�  !�  !�  !.                                                                                                                                                                                                                                                                                                                                                                                                  !2  !�  !�  !�  !�  !�  !�  !�  !�  !�  !�  !�  !�  !�  !�  !�  !�  !�  !�  !�  !�  !�  !�  !�  !�  !�  !�  !� �  !�  !�  !�  !                                                                                                                                                                                                                                                                                                                ` � �  !� � � � � � � � � � � � � � � � � � � � � � � � � � � � �                                                                                                                                                                                                                                    ^ � � � � � � � � � � � � � � � � � � � � � � � � � � � � � � �                               � � � � �� � � � � � � � � � � � � � �� � � � � � � � � � �p                                                                                                                                                                                                                                 �������������������������������\                             
�������������������������������>                                                                                                                                                                                                                                �������������������������������.                            "�������������������������������                                                                                                                                                                                                                                8�������������������������������                            J�������������������������������                                                                                                                                                                                                                                f�������������������������������                            ~�������������������������������                                                                                                                                                                                                                             �������������������������������t                            �������������������������������R                                                                                                                                                                                                                                �������������������������������@                            �������������������������������*                                                                                                                                                                                                                                &�������������������������������                            8�������������������������������                                                                                                                                                                                                                                P�������������������������������                            f�������������������������������                                                                                                                                                                                                                                ��������������������������������                        �������������������������������j                                                                                                                                                                                                                                >@@@@@@@@@@@@@@@@@@@@@@@@@@@@@>                            
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@8                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������   �   �������   �   �������   �   ��������   �   ��������   �   ��������   �   �������   ?�   ?�������   �   ?�������   �   �������   �   �������   ������������   ������������   �������������   �������������   �������������   ������������   ?������������   ������������   ������������   ������������   ������������   ������������   ������������   �������������   �������������   ������������   ?������������   ?������������   ������������   ������������   ������������   ������������   ������������   �������������   �������������   ������������   ������������   ?������������   ������������   ������������   ������������   ������������   ������������   �������������   �������������   �������������   ������������   ?������������   ������������   ������������   ������������   ������������   ������������   ������������   �������������   �������������   ������������   ?�������   �   ?�������   �   �������   �   �������   �   �������   �   �������   �   �������   �   ��������   ��   ��������   �   �������   ?�   ��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������

--- File: globals.css ---
@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.556 0 0);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}


--- File: layout.tsx ---
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { Toaster } from "@/components/ui/toaster";
import { Providers } from "@/components/providers";
import SmoothScroll from "@/components/ui/smooth-scroll";
import FloatingActionButton from "@/components/ui/floating-action-button";
import { ToastNotifications } from "@/components/ui/toast-notifications";
import RealTimeNotifications from "@/components/real-time-notifications";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Study Abroad with Hadi - Visa Consulting & International Education",
  description: "Expert visa consulting services for students looking to study abroad. Personalized guidance for admissions, scholarships, and visa applications.",
  keywords: ["Study Abroad", "Visa Consulting", "International Education", "Hadi", "Student Visa", "Scholarships"],
  authors: [{ name: "Study Abroad with Hadi" }],
  icons: {
    icon: "/favicon.ico",
  },
  openGraph: {
    title: "Study Abroad with Hadi",
    description: "Expert visa consulting services for students looking to study abroad",
    url: "https://studyabroadwithhadi.info",
    siteName: "Study Abroad with Hadi",
    type: "website",
  },
  twitter: {
    card: "summary_large_image",
    title: "Study Abroad with Hadi",
    description: "Expert visa consulting services for students looking to study abroad",
  },
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased bg-background text-foreground`}
      >
        <Providers>
          <SmoothScroll />
          {children}
          <FloatingActionButton />
          <RealTimeNotifications />
          <Toaster />
          <ToastNotifications />
        </Providers>
      </body>
    </html>
  );
}


--- File: lucky-draw\page.tsx ---
'use client'

import { useState } from 'react'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import * as z from 'zod'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Label } from '@/components/ui/label'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Loader2, Gift, Trophy, Clock, Users } from 'lucide-react'
import Link from 'next/link'
import { toast } from 'sonner'
import Navbar from '@/components/navbar'
import { useSocket } from '@/hooks/use-socket'

const luckyDrawSchema = z.object({
  name: z.string().min(2, 'Name must be at least 2 characters'),
  email: z.string().email('Please enter a valid email address'),
  phone: z.string().min(10, 'Please enter a valid phone number'),
  country: z.string().min(2, 'Please select or enter a country'),
  reason: z.string().min(20, 'Please tell us why you want to study abroad (at least 20 characters)')
})

type LuckyDrawFormData = z.infer<typeof luckyDrawSchema>

const countries = [
  'United States', 'Canada', 'United Kingdom', 'Australia', 'Germany', 'France',
  'Italy', 'Spain', 'Netherlands', 'Sweden', 'Norway', 'Denmark', 'Finland',
  'Switzerland', 'Austria', 'Belgium', 'Ireland', 'Portugal', 'Greece',
  'India', 'China', 'Japan', 'South Korea', 'Singapore', 'Malaysia',
  'UAE', 'Saudi Arabia', 'Israel', 'Turkey', 'Egypt', 'South Africa',
  'Brazil', 'Argentina', 'Mexico', 'Chile', 'Colombia', 'Peru',
  'New Zealand', 'Others'
]

export default function LuckyDrawPage() {
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [isSubmitted, setIsSubmitted] = useState(false)
  const [isActive, setIsActive] = useState(true)
  const { notifyLuckyDrawEntry } = useSocket()

  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
    watch,
    reset
  } = useForm<LuckyDrawFormData>({
    resolver: zodResolver(luckyDrawSchema)
  })

  const selectedCountry = watch('country')

  const onSubmit = async (data: LuckyDrawFormData) => {
    if (!isActive) {
      toast.error('The lucky draw is currently not active.')
      return
    }

    setIsSubmitting(true)
    try {
      const response = await fetch('/api/lucky-draw', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      })

      if (response.ok) {
        toast.success('Your lucky draw entry has been submitted successfully! Good luck!')
        setIsSubmitted(true)
        
        // Send real-time notification to admin
        notifyLuckyDrawEntry({
          name: data.name,
          country: data.country
        })
        
        reset()
      } else {
        const errorData = await response.json()
        if (response.status === 409) {
          toast.error('You have already entered the lucky draw.')
        } else {
          throw new Error('Failed to submit entry')
        }
      }
    } catch (error) {
      toast.error('Failed to submit entry. Please try again.')
    } finally {
      setIsSubmitting(false)
    }
  }

  if (isSubmitted) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-yellow-50 to-orange-50 py-12">
        <Navbar />
        <div className="max-w-2xl mx-auto px-4 sm:px-6 lg:px-8">
          <Card>
            <CardContent className="pt-6">
              <div className="text-center">
                <div className="w-16 h-16 bg-yellow-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Gift className="w-8 h-8 text-yellow-600" />
                </div>
                <h2 className="text-2xl font-bold text-gray-900 mb-2">Good Luck! 🎉</h2>
                <p className="text-gray-600 mb-6">
                  Your lucky draw entry has been submitted successfully! The winner will be announced 
                  on our website and contacted directly via email.
                </p>
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
                  <p className="text-sm text-blue-800">
                    <strong>Next Steps:</strong> Follow us on social media and check your email 
                    regularly for the winner announcement.
                  </p>
                </div>
                <Link href="/">
                  <Button>Back to Home</Button>
                </Link>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-yellow-50 to-orange-50">
      <Navbar />

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <div className="text-center mb-12">
          <div className="flex justify-center mb-4">
            <div className="w-16 h-16 bg-yellow-100 rounded-full flex items-center justify-center">
              <Gift className="w-8 h-8 text-yellow-600" />
            </div>
          </div>
          <h1 className="text-4xl font-bold text-gray-900 mb-4">Study Abroad Lucky Draw</h1>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            Enter for a chance to win free consultation services and scholarship assistance! 
            One lucky winner will receive comprehensive support for their study abroad journey.
          </p>
          {isActive && (
            <div className="mt-4 inline-flex items-center px-4 py-2 bg-green-100 text-green-800 rounded-full">
              <div className="w-2 h-2 bg-green-500 rounded-full mr-2 animate-pulse"></div>
              Contest Active
            </div>
          )}
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Prize Information */}
          <div className="lg:col-span-1">
            <Card>
              <CardHeader>
                <CardTitle>🏆 Grand Prize</CardTitle>
                <CardDescription>
                  What the lucky winner receives
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-3">
                  <div className="flex items-center space-x-3">
                    <div className="w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center">
                      <span className="text-primary font-bold text-sm">1</span>
                    </div>
                    <div>
                      <p className="font-medium">Free Consultation</p>
                      <p className="text-sm text-gray-600">Complete visa and admission guidance</p>
                    </div>
                  </div>
                  <div className="flex items-center space-x-3">
                    <div className="w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center">
                      <span className="text-primary font-bold text-sm">2</span>
                    </div>
                    <div>
                      <p className="font-medium">Application Assistance</p>
                      <p className="text-sm text-gray-600">Help with 3 university applications</p>
                    </div>
                  </div>
                  <div className="flex items-center space-x-3">
                    <div className="w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center">
                      <span className="text-primary font-bold text-sm">3</span>
                    </div>
                    <div>
                      <p className="font-medium">Scholarship Search</p>
                      <p className="text-sm text-gray-600">Personalized scholarship matching</p>
                    </div>
                  </div>
                  <div className="flex items-center space-x-3">
                    <div className="w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center">
                      <span className="text-primary font-bold text-sm">4</span>
                    </div>
                    <div>
                      <p className="font-medium">Document Review</p>
                      <p className="text-sm text-gray-600">Professional review of all documents</p>
                    </div>
                  </div>
                </div>
                <div className="pt-4 border-t">
                  <p className="text-sm text-gray-600">
                    <strong>Total Value:</strong> $2,000 USD
                  </p>
                </div>
              </CardContent>
            </Card>

            <Card className="mt-6">
              <CardHeader>
                <CardTitle>Contest Timeline</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3 text-sm">
                  <div className="flex items-center space-x-3">
                    <Clock className="w-4 h-4 text-primary" />
                    <div>
                      <p className="font-medium">Entry Period</p>
                      <p className="text-gray-600">Until December 31, 2024</p>
                    </div>
                  </div>
                  <div className="flex items-center space-x-3">
                    <Trophy className="w-4 h-4 text-primary" />
                    <div>
                      <p className="font-medium">Winner Announcement</p>
                      <p className="text-gray-600">January 15, 2025</p>
                    </div>
                  </div>
                  <div className="flex items-center space-x-3">
                    <Users className="w-4 h-4 text-primary" />
                    <div>
                      <p className="font-medium">Winner Contact</p>
                      <p className="text-gray-600">Within 7 days of announcement</p>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Lucky Draw Form */}
          <div className="lg:col-span-2">
            <Card>
              <CardHeader>
                <CardTitle>Enter the Lucky Draw</CardTitle>
                <CardDescription>
                  Fill out the form below for a chance to win the grand prize
                </CardDescription>
              </CardHeader>
              <CardContent>
                {!isActive && (
                  <Alert className="mb-6">
                    <AlertDescription>
                      The lucky draw contest is currently not active. Please check back later for upcoming contests.
                    </AlertDescription>
                  </Alert>
                )}

                <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="space-y-2">
                      <Label htmlFor="name">Full Name *</Label>
                      <Input
                        id="name"
                        {...register('name')}
                        placeholder="John Doe"
                        disabled={!isActive}
                        className={errors.name ? 'border-red-500' : ''}
                      />
                      {errors.name && (
                        <p className="text-sm text-red-500">{errors.name.message}</p>
                      )}
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="email">Email Address *</Label>
                      <Input
                        id="email"
                        type="email"
                        {...register('email')}
                        placeholder="john@example.com"
                        disabled={!isActive}
                        className={errors.email ? 'border-red-500' : ''}
                      />
                      {errors.email && (
                        <p className="text-sm text-red-500">{errors.email.message}</p>
                      )}
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="space-y-2">
                      <Label htmlFor="phone">Phone Number *</Label>
                      <Input
                        id="phone"
                        {...register('phone')}
                        placeholder="+1-234-567-8900"
                        disabled={!isActive}
                        className={errors.phone ? 'border-red-500' : ''}
                      />
                      {errors.phone && (
                        <p className="text-sm text-red-500">{errors.phone.message}</p>
                      )}
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="country">Country *</Label>
                      <Select 
                        value={selectedCountry} 
                        onValueChange={(value) => setValue('country', value)}
                        disabled={!isActive}
                      >
                        <SelectTrigger className={errors.country ? 'border-red-500' : ''}>
                          <SelectValue placeholder="Select your country" />
                        </SelectTrigger>
                        <SelectContent>
                          {countries.map((country) => (
                            <SelectItem key={country} value={country}>
                              {country}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      {errors.country && (
                        <p className="text-sm text-red-500">{errors.country.message}</p>
                      )}
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="reason">
                      Why do you want to study abroad? *
                    </Label>
                    <Textarea
                      id="reason"
                      {...register('reason')}
                      placeholder="Tell us about your study abroad goals, dream destination, career aspirations, and how this prize would help you achieve your dreams..."
                      rows={6}
                      disabled={!isActive}
                      className={errors.reason ? 'border-red-500' : ''}
                    />
                    {errors.reason && (
                      <p className="text-sm text-red-500">{errors.reason.message}</p>
                    )}
                    <p className="text-xs text-gray-500">
                      Minimum 20 characters. Be creative and share your story!
                    </p>
                  </div>

                  <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                    <p className="text-sm text-yellow-800">
                      <strong>Contest Rules:</strong> One entry per person. The winner will be selected 
                      randomly and contacted via email. The prize is non-transferable and must be 
                      claimed within 30 days of announcement.
                    </p>
                  </div>

                  <Button
                    type="submit"
                    className="w-full"
                    disabled={!isActive || isSubmitting}
                  >
                    {isSubmitting ? (
                      <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        Submitting Entry...
                      </>
                    ) : (
                      'Enter Lucky Draw 🎉'
                    )}
                  </Button>
                </form>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  )
}

--- File: page.tsx ---
'use client'

import Link from 'next/link'
import { useState, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import Navbar from '@/components/navbar'
import { motion } from 'framer-motion'
import { 
  Mail, 
  Phone, 
  MapPin, 
  GraduationCap, 
  FileText, 
  DollarSign,
  Star,
  ArrowRight,
  Globe,
  Award,
  Users,
  CheckCircle,
  TrendingUp,
  Clock,
  Heart,
  Shield,
  Zap,
  Target,
  BookOpen,
  Lightbulb,
  Rocket,
  Trophy,
  Flag,
  Gift
} from 'lucide-react'
import TestimonialsSection from '@/components/testimonials-section'
import NewsletterSubscription from '@/components/newsletter-subscription'

export default function Home() {
  const [studyPages, setStudyPages] = useState<any[]>([])
  const [siteSettings, setSiteSettings] = useState<any>(null)
  const [testimonials, setTestimonials] = useState<any[]>([])

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [studyRes, settingsRes, testimonialsRes] = await Promise.all([
          fetch('/api/study-pages'),
          fetch('/api/admin/settings'),
          fetch('/api/testimonials')
        ])
        
        if (studyRes.ok) {
          const studyData = await studyRes.json()
          setStudyPages(studyData.filter((page: any) => page.isActive !== false).slice(0, 6))
        }
        
        if (settingsRes.ok) {
          const settingsData = await settingsRes.json()
          setSiteSettings(settingsData)
        }

        if (testimonialsRes.ok) {
          const testimonialsData = await testimonialsRes.json()
          setTestimonials(testimonialsData.filter((t: any) => t.isFeatured).slice(0, 3))
        }
      } catch (error) {
        console.error('Failed to fetch home data:', error)
      }
    }
    
    fetchData()
  }, [])
  return (
    <div className="min-h-screen">
      <Navbar />

      {/* Hero Section */}
      <section className="relative bg-gradient-to-br from-blue-50 via-white to-indigo-50 py-20 overflow-hidden">
        <div className="absolute inset-0 bg-gradient-to-r from-primary/5 to-blue-500/5"></div>
        {/* Animated background elements */}
        <div className="absolute inset-0 overflow-hidden">
          <motion.div
            className="absolute top-20 left-10 w-72 h-72 bg-primary/10 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob"
            animate={{ x: [0, 100, 0], y: [0, -50, 0] }}
            transition={{ duration: 20, repeat: Infinity, repeatType: "reverse" }}
          />
          <motion.div
            className="absolute top-40 right-10 w-72 h-72 bg-blue-500/10 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob animation-delay-2000"
            animate={{ x: [0, -100, 0], y: [0, 50, 0] }}
            transition={{ duration: 25, repeat: Infinity, repeatType: "reverse" }}
          />
          <motion.div
            className="absolute -bottom-8 left-20 w-72 h-72 bg-indigo-500/10 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob animation-delay-4000"
            animate={{ x: [0, 50, 0], y: [0, 100, 0] }}
            transition={{ duration: 30, repeat: Infinity, repeatType: "reverse" }}
          />
        </div>
        
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
            <div className="space-y-8">
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6 }}
              >
                <Badge className="mb-4 bg-gradient-to-r from-green-100 to-emerald-100 text-green-800 hover:from-green-200 hover:to-emerald-200 border-green-200" variant="secondary">
                  <Award className="w-3 h-3 mr-1" />
                  Certified Expert Visa Consultant
                </Badge>
              </motion.div>
              
              <motion.h1 
                className="text-4xl md:text-6xl font-bold text-gray-900 leading-tight"
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, delay: 0.2 }}
              >
                Study Abroad with{" "}
                <span className="text-primary bg-gradient-to-r from-primary to-blue-600 bg-clip-text text-transparent">
                  {siteSettings?.adminName || 'Hadi'}
                </span>
              </motion.h1>
              
              <motion.p 
                className="text-xl text-gray-600 leading-relaxed"
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, delay: 0.4 }}
              >
                Your trusted partner for international education. Expert guidance for admissions, 
                scholarships, and visa applications to top universities worldwide.
              </motion.p>
              
              <motion.div 
                className="flex flex-col sm:flex-row gap-4"
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, delay: 0.6 }}
              >
                <Link href="/contact">
                  <motion.div
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    <Button size="lg" className="w-full sm:w-auto bg-gradient-to-r from-primary to-primary/90 hover:from-primary/90 hover:to-primary shadow-lg hover:shadow-xl transition-all duration-300 group">
                      <Mail className="w-4 h-4 mr-2" />
                      Contact Now
                      <ArrowRight className="w-4 h-4 ml-2 group-hover:translate-x-1 transition-transform duration-300" />
                    </Button>
                  </motion.div>
                </Link>
                <Link href="/lucky-draw">
                  <motion.div
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    <Button size="lg" variant="outline" className="w-full sm:w-auto border-2 border-primary/20 hover:border-primary hover:bg-primary hover:text-white transition-all duration-300 group">
                      <Heart className="w-4 h-4 mr-2" />
                      Join Lucky Draw
                      <Gift className="w-4 h-4 ml-2 group-hover:rotate-12 transition-transform duration-300" />
                    </Button>
                  </motion.div>
                </Link>
              </motion.div>
              
              <motion.div 
                className="grid grid-cols-3 gap-6 pt-4"
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, delay: 0.8 }}
              >
                <div className="text-center group">
                  <div className="flex items-center justify-center mb-2">
                    <motion.div 
                      className="w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center group-hover:bg-primary/20 transition-colors duration-300"
                      whileHover={{ scale: 1.1, rotate: 5 }}
                    >
                      <Users className="w-5 h-5 text-primary" />
                    </motion.div>
                    <span className="text-2xl font-bold text-gray-900 ml-2">500+</span>
                  </div>
                  <span className="text-sm text-gray-600 group-hover:text-primary transition-colors duration-300">Happy Students</span>
                </div>
                <div className="text-center group">
                  <div className="flex items-center justify-center mb-2">
                    <motion.div 
                      className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center group-hover:bg-blue-200 transition-colors duration-300"
                      whileHover={{ scale: 1.1, rotate: -5 }}
                    >
                      <Globe className="w-5 h-5 text-blue-600" />
                    </motion.div>
                    <span className="text-2xl font-bold text-gray-900 ml-2">15+</span>
                  </div>
                  <span className="text-sm text-gray-600 group-hover:text-blue-600 transition-colors duration-300">Countries</span>
                </div>
                <div className="text-center group">
                  <div className="flex items-center justify-center mb-2">
                    <motion.div 
                      className="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center group-hover:bg-green-200 transition-colors duration-300"
                      whileHover={{ scale: 1.1, rotate: 5 }}
                    >
                      <Star className="w-5 h-5 text-green-600" />
                    </motion.div>
                    <span className="text-2xl font-bold text-gray-900 ml-2">98%</span>
                  </div>
                  <span className="text-sm text-gray-600 group-hover:text-green-600 transition-colors duration-300">Success Rate</span>
                </div>
              </motion.div>
            </div>
            
            <motion.div 
              className="relative"
              initial={{ opacity: 0, x: 50 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.8, delay: 0.4 }}
            >
              <div className="w-full h-96 bg-gradient-to-br from-primary/20 via-blue-100 to-indigo-100 rounded-2xl flex items-center justify-center shadow-2xl relative overflow-hidden">
                <div className="absolute inset-0 bg-white/20 backdrop-blur-sm"></div>
                
                {/* Floating elements */}
                <motion.div
                  className="absolute top-8 right-8 w-16 h-16 bg-white/30 rounded-full flex items-center justify-center backdrop-blur-sm"
                  animate={{ y: [0, -10, 0] }}
                  transition={{ duration: 3, repeat: Infinity, repeatType: "reverse" }}
                >
                  <Trophy className="w-8 h-8 text-yellow-600" />
                </motion.div>
                
                <motion.div
                  className="absolute bottom-8 left-8 w-16 h-16 bg-white/30 rounded-full flex items-center justify-center backdrop-blur-sm"
                  animate={{ y: [0, 10, 0] }}
                  transition={{ duration: 3, repeat: Infinity, repeatType: "reverse", delay: 1 }}
                >
                  <Flag className="w-8 h-8 text-primary" />
                </motion.div>
                
                <motion.div
                  className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2"
                  animate={{ rotate: 360 }}
                  transition={{ duration: 20, repeat: Infinity, ease: "linear" }}
                >
                  <div className="w-32 h-32 border-4 border-primary/20 rounded-full"></div>
                </motion.div>
                
                <div className="text-center relative z-10">
                  <motion.div 
                    className="w-24 h-24 bg-gradient-to-br from-primary to-primary/80 rounded-full flex items-center justify-center mx-auto mb-4 shadow-lg"
                    whileHover={{ scale: 1.1, rotate: 10 }}
                    transition={{ duration: 0.3 }}
                  >
                    <GraduationCap className="w-12 h-12 text-white" />
                  </motion.div>
                  <h3 className="text-2xl font-bold text-gray-900 mb-2">
                    {siteSettings?.adminName || 'Hadi'}
                  </h3>
                  <p className="text-gray-600">{siteSettings?.adminTitle || 'Expert Visa Consultant'}</p>
                  <div className="flex items-center justify-center mt-4 space-x-2">
                    <CheckCircle className="w-4 h-4 text-green-500" />
                    <span className="text-sm text-gray-600">Certified Professional</span>
                  </div>
                </div>
              </div>
            </motion.div>
          </div>
        </div>
      </section>

      {/* About Section */}
      <section className="py-20 bg-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <motion.div 
            className="text-center mb-16"
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
          >
            <Badge className="mb-4 bg-blue-100 text-blue-800 hover:bg-blue-200" variant="secondary">
              <Users className="w-3 h-3 mr-1" />
              About Hadi
            </Badge>
            <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
              Your Trusted Education Consultant
            </h2>
            <p className="text-xl text-gray-600 max-w-3xl mx-auto">
              With over 10 years of experience in international education consulting, 
              I've helped hundreds of students achieve their dream of studying abroad.
            </p>
          </motion.div>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8, delay: 0.1 }}
              viewport={{ once: true }}
            >
              <Card className="h-full hover:shadow-xl transition-all duration-300 group border-0 shadow-lg bg-gradient-to-br from-white to-gray-50">
                <CardHeader className="text-center">
                  <motion.div 
                    className="w-16 h-16 bg-gradient-to-br from-primary/20 to-primary/10 rounded-xl flex items-center justify-center mx-auto mb-4 group-hover:from-primary/30 group-hover:to-primary/20 transition-all duration-300"
                    whileHover={{ scale: 1.1, rotate: 5 }}
                  >
                    <Award className="w-8 h-8 text-primary" />
                  </motion.div>
                  <CardTitle className="text-xl">Certified Consultant</CardTitle>
                </CardHeader>
                <CardContent className="text-center">
                  <p className="text-gray-600 leading-relaxed">
                    Certified education consultant with specialized training in visa applications 
                    and international admissions.
                  </p>
                  <div className="mt-4 flex items-center justify-center text-sm text-primary font-medium">
                    <CheckCircle className="w-4 h-4 mr-1" />
                    Verified Professional
                  </div>
                </CardContent>
              </Card>
            </motion.div>
            
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8, delay: 0.2 }}
              viewport={{ once: true }}
            >
              <Card className="h-full hover:shadow-xl transition-all duration-300 group border-0 shadow-lg bg-gradient-to-br from-white to-gray-50">
                <CardHeader className="text-center">
                  <motion.div 
                    className="w-16 h-16 bg-gradient-to-br from-green-100 to-green-50 rounded-xl flex items-center justify-center mx-auto mb-4 group-hover:from-green-200 group-hover:to-green-100 transition-all duration-300"
                    whileHover={{ scale: 1.1, rotate: -5 }}
                  >
                    <Users className="w-8 h-8 text-green-600" />
                  </motion.div>
                  <CardTitle className="text-xl">500+ Success Stories</CardTitle>
                </CardHeader>
                <CardContent className="text-center">
                  <p className="text-gray-600 leading-relaxed">
                    Successfully placed over 500 students in top universities across 
                    15+ countries worldwide.
                  </p>
                  <div className="mt-4 flex items-center justify-center text-sm text-green-600 font-medium">
                    <TrendingUp className="w-4 h-4 mr-1" />
                    Growing Network
                  </div>
                </CardContent>
              </Card>
            </motion.div>
            
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8, delay: 0.3 }}
              viewport={{ once: true }}
            >
              <Card className="h-full hover:shadow-xl transition-all duration-300 group border-0 shadow-lg bg-gradient-to-br from-white to-gray-50">
                <CardHeader className="text-center">
                  <motion.div 
                    className="w-16 h-16 bg-gradient-to-br from-blue-100 to-blue-50 rounded-xl flex items-center justify-center mx-auto mb-4 group-hover:from-blue-200 group-hover:to-blue-100 transition-all duration-300"
                    whileHover={{ scale: 1.1, rotate: 5 }}
                  >
                    <Globe className="w-8 h-8 text-blue-600" />
                  </motion.div>
                  <CardTitle className="text-xl">Global Network</CardTitle>
                </CardHeader>
                <CardContent className="text-center">
                  <p className="text-gray-600 leading-relaxed">
                    Extensive network of university partners and education agents 
                    across multiple continents.
                  </p>
                  <div className="mt-4 flex items-center justify-center text-sm text-blue-600 font-medium">
                    <Shield className="w-4 h-4 mr-1" />
                    Trusted Partners
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          </div>
        </div>
      </section>

      {/* Services Section */}
      <section className="py-20 bg-gradient-to-br from-gray-50 to-blue-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <motion.div 
            className="text-center mb-16"
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
          >
            <Badge className="mb-4 bg-purple-100 text-purple-800 hover:bg-purple-200" variant="secondary">
              <GraduationCap className="w-3 h-3 mr-1" />
              Our Services
            </Badge>
            <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
              Comprehensive Support for Your Journey
            </h2>
            <p className="text-xl text-gray-600 max-w-3xl mx-auto">
              From application to arrival, we provide end-to-end support for your study abroad dreams
            </p>
          </motion.div>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8, delay: 0.1 }}
              viewport={{ once: true }}
            >
              <Card className="h-full hover:shadow-2xl transition-all duration-500 group border-0 shadow-lg bg-gradient-to-br from-white to-green-50 hover:from-green-50 hover:to-green-100">
                <CardHeader className="text-center">
                  <motion.div 
                    className="w-20 h-20 bg-gradient-to-br from-green-400 to-green-600 rounded-2xl flex items-center justify-center mx-auto mb-6 group-hover:scale-110 group-hover:rotate-6 transition-all duration-300 shadow-lg"
                    whileHover={{ scale: 1.1, rotate: 6 }}
                  >
                    <FileText className="w-10 h-10 text-white" />
                  </motion.div>
                  <CardTitle className="text-2xl mb-2">Study Visa Assistance</CardTitle>
                  <CardDescription className="text-base">
                    Complete guidance for student visa applications
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <ul className="space-y-3 text-sm text-gray-600 mb-6">
                    <li className="flex items-center">
                      <CheckCircle className="w-4 h-4 mr-2 text-green-500 flex-shrink-0" />
                      Document preparation & review
                    </li>
                    <li className="flex items-center">
                      <CheckCircle className="w-4 h-4 mr-2 text-green-500 flex-shrink-0" />
                      Application filing & tracking
                    </li>
                    <li className="flex items-center">
                      <CheckCircle className="w-4 h-4 mr-2 text-green-500 flex-shrink-0" />
                      Interview preparation & coaching
                    </li>
                    <li className="flex items-center">
                      <CheckCircle className="w-4 h-4 mr-2 text-green-500 flex-shrink-0" />
                      Real-time status updates
                    </li>
                  </ul>
                  <div className="text-center">
                    <Badge className="bg-green-100 text-green-800 hover:bg-green-200">
                      <Shield className="w-3 h-3 mr-1" />
                      98% Success Rate
                    </Badge>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
            
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8, delay: 0.2 }}
              viewport={{ once: true }}
            >
              <Card className="h-full hover:shadow-2xl transition-all duration-500 group border-0 shadow-lg bg-gradient-to-br from-white to-blue-50 hover:from-blue-50 hover:to-blue-100">
                <CardHeader className="text-center">
                  <motion.div 
                    className="w-20 h-20 bg-gradient-to-br from-blue-400 to-blue-600 rounded-2xl flex items-center justify-center mx-auto mb-6 group-hover:scale-110 group-hover:rotate-6 transition-all duration-300 shadow-lg"
                    whileHover={{ scale: 1.1, rotate: 6 }}
                  >
                    <GraduationCap className="w-10 h-10 text-white" />
                  </motion.div>
                  <CardTitle className="text-2xl mb-2">Admission Assistance</CardTitle>
                  <CardDescription className="text-base">
                    Expert help with university applications
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <ul className="space-y-3 text-sm text-gray-600 mb-6">
                    <li className="flex items-center">
                      <CheckCircle className="w-4 h-4 mr-2 text-blue-500 flex-shrink-0" />
                      University selection & shortlisting
                    </li>
                    <li className="flex items-center">
                      <CheckCircle className="w-4 h-4 mr-2 text-blue-500 flex-shrink-0" />
                      Application form completion
                    </li>
                    <li className="flex items-center">
                      <CheckCircle className="w-4 h-4 mr-2 text-blue-500 flex-shrink-0" />
                      Essay & SOP editing
                    </li>
                    <li className="flex items-center">
                      <CheckCircle className="w-4 h-4 mr-2 text-blue-500 flex-shrink-0" />
                      Follow-up & communication support
                    </li>
                  </ul>
                  <div className="text-center">
                    <Badge className="bg-blue-100 text-blue-800 hover:bg-blue-200">
                      <Trophy className="w-3 h-3 mr-1" />
                      Top Universities
                    </Badge>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
            
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8, delay: 0.3 }}
              viewport={{ once: true }}
            >
              <Card className="h-full hover:shadow-2xl transition-all duration-500 group border-0 shadow-lg bg-gradient-to-br from-white to-yellow-50 hover:from-yellow-50 hover:to-yellow-100">
                <CardHeader className="text-center">
                  <motion.div 
                    className="w-20 h-20 bg-gradient-to-br from-yellow-400 to-yellow-600 rounded-2xl flex items-center justify-center mx-auto mb-6 group-hover:scale-110 group-hover:rotate-6 transition-all duration-300 shadow-lg"
                    whileHover={{ scale: 1.1, rotate: 6 }}
                  >
                    <DollarSign className="w-10 h-10 text-white" />
                  </motion.div>
                  <CardTitle className="text-2xl mb-2">Scholarship Guidance</CardTitle>
                  <CardDescription className="text-base">
                    Find and secure financial aid opportunities
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <ul className="space-y-3 text-sm text-gray-600 mb-6">
                    <li className="flex items-center">
                      <CheckCircle className="w-4 h-4 mr-2 text-yellow-600 flex-shrink-0" />
                      Scholarship search & matching
                    </li>
                    <li className="flex items-center">
                      <CheckCircle className="w-4 h-4 mr-2 text-yellow-600 flex-shrink-0" />
                      Application assistance
                    </li>
                    <li className="flex items-center">
                      <CheckCircle className="w-4 h-4 mr-2 text-yellow-600 flex-shrink-0" />
                      Financial planning advice
                    </li>
                    <li className="flex items-center">
                      <CheckCircle className="w-4 h-4 mr-2 text-yellow-600 flex-shrink-0" />
                      Funding strategy development
                    </li>
                  </ul>
                  <div className="text-center">
                    <Badge className="bg-yellow-100 text-yellow-800 hover:bg-yellow-200">
                      <Star className="w-3 h-3 mr-1" />
                      $1M+ Secured
                    </Badge>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          </div>
        </div>
      </section>

      {/* Featured Countries */}
      <section className="py-20 bg-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-16">
            <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
              Popular Study Destinations
            </h2>
            <p className="text-xl text-gray-600">
              Explore opportunities in top study abroad destinations
            </p>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {studyPages.length > 0 ? (
              studyPages.map((page, index) => (
                <motion.div
                  key={page.id}
                  initial={{ opacity: 0, y: 50 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.6, delay: index * 0.1 }}
                  whileHover={{ y: -10 }}
                  className="group"
                >
                  <Card className="h-full overflow-hidden border-0 shadow-lg hover:shadow-2xl transition-all duration-500 cursor-pointer bg-gradient-to-br from-white to-gray-50">
                    <div className="relative h-56 overflow-hidden">
                      {page.bannerUrl ? (
                        <div className="relative w-full h-full">
                          <img 
                            src={page.bannerUrl} 
                            alt={page.title}
                            className="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110"
                          />
                          <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent" />
                          <div className="absolute inset-0 bg-gradient-to-r from-primary/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500" />
                        </div>
                      ) : (
                        <div className="w-full h-full bg-gradient-to-br from-primary/10 to-primary/20 flex items-center justify-center">
                          <div className="text-6xl">🌍</div>
                        </div>
                      )}
                      
                      {/* Floating badges */}
                      <div className="absolute top-4 left-4">
                        <Badge className="bg-white/90 backdrop-blur-sm text-black px-3 py-1 shadow-lg">
                          <Star className="w-3 h-3 mr-1 text-yellow-500" />
                          Featured
                        </Badge>
                      </div>
                      <div className="absolute top-4 right-4">
                        <Badge className="bg-primary/90 backdrop-blur-sm text-white px-3 py-1 shadow-lg">
                          <TrendingUp className="w-3 h-3 mr-1" />
                          Popular
                        </Badge>
                      </div>
                      
                      {/* Country flag overlay */}
                      <div className="absolute bottom-4 left-4">
                        <div className="w-12 h-12 bg-white/90 backdrop-blur-sm rounded-full flex items-center justify-center shadow-lg">
                          <span className="text-2xl">🌍</span>
                        </div>
                      </div>
                    </div>
                    
                    <CardHeader className="pb-3">
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <CardTitle className="text-xl font-bold text-gray-900 group-hover:text-primary transition-colors duration-300 mb-2">
                            {page.title}
                          </CardTitle>
                          <CardDescription className="text-gray-600 line-clamp-2 leading-relaxed">
                            {page.description || 'Discover amazing opportunities to study in this beautiful country'}
                          </CardDescription>
                        </div>
                      </div>
                    </CardHeader>
                    
                    <CardContent className="pt-0">
                      <div className="flex items-center justify-between mb-4">
                        <div className="flex items-center space-x-4 text-sm text-gray-500">
                          <div className="flex items-center">
                            <MapPin className="w-4 h-4 mr-1" />
                            <span>Europe</span>
                          </div>
                          <div className="flex items-center">
                            <Users className="w-4 h-4 mr-1" />
                            <span>Popular</span>
                          </div>
                        </div>
                      </div>
                      
                      <Link href={`/study/${page.slug}`}>
                        <motion.div
                          whileHover={{ scale: 1.02 }}
                          whileTap={{ scale: 0.98 }}
                        >
                          <Button className="w-full bg-gradient-to-r from-primary to-primary/90 hover:from-primary/90 hover:to-primary text-white shadow-lg hover:shadow-xl transition-all duration-300 group">
                            <span className="mr-2">Explore Opportunities</span>
                            <ArrowRight className="w-4 h-4 group-hover:translate-x-1 transition-transform duration-300" />
                          </Button>
                        </motion.div>
                      </Link>
                    </CardContent>
                  </Card>
                </motion.div>
              ))
            ) : (
              <motion.div 
                className="col-span-full text-center py-16"
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
              >
                <div className="max-w-2xl mx-auto">
                  <motion.div
                    className="w-24 h-24 bg-gradient-to-br from-primary/20 to-primary/10 rounded-3xl flex items-center justify-center mx-auto mb-8"
                    whileHover={{ scale: 1.1, rotate: 5 }}
                  >
                    <Globe className="w-12 h-12 text-primary" />
                  </motion.div>
                  <h3 className="text-2xl font-bold text-gray-900 mb-4">
                    No Study Destinations Available
                  </h3>
                  <p className="text-gray-600 mb-8 leading-relaxed">
                    We're currently updating our study destinations. Please check back soon or contact us directly 
                    to learn about available opportunities for studying abroad.
                  </p>
                  <div className="flex flex-col sm:flex-row gap-4 justify-center">
                    <Link href="/contact">
                      <motion.div
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                      >
                        <Button className="bg-gradient-to-r from-primary to-primary/90 hover:from-primary/90 hover:to-primary shadow-lg hover:shadow-xl transition-all duration-300">
                          <Mail className="w-4 h-4 mr-2" />
                          Contact for Information
                        </Button>
                      </motion.div>
                    </Link>
                    <Link href="/admin/login">
                      <motion.div
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                      >
                        <Button variant="outline" className="border-2 border-primary/20 hover:border-primary hover:bg-primary hover:text-white transition-all duration-300">
                          <Shield className="w-4 h-4 mr-2" />
                          Admin Access
                        </Button>
                      </motion.div>
                    </Link>
                  </div>
                </div>
              </motion.div>
            )}
          </div>
          {studyPages.length > 0 && (
            <div className="text-center mt-12">
              <Link href="/study">
                <Button size="lg" variant="outline" className="border-primary text-primary hover:bg-primary hover:text-white">
                  View All Destinations
                  <Globe className="w-4 h-4 ml-2" />
                </Button>
              </Link>
            </div>
          )}
        </div>
      </section>

      {/* Testimonials */}
      <TestimonialsSection />

      {/* Newsletter Section */}
      <section className="py-16 bg-gray-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="max-w-md mx-auto">
            <NewsletterSubscription />
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-20 bg-primary text-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
          <h2 className="text-3xl md:text-4xl font-bold mb-4">
            Ready to Start Your Study Abroad Journey?
          </h2>
          <p className="text-xl mb-8 opacity-90">
            Let's turn your dream of studying abroad into reality
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Link href="/contact">
              <Button size="lg" variant="secondary" className="w-full sm:w-auto">
                <Mail className="w-4 h-4 mr-2" />
                Get Started Today
              </Button>
            </Link>
            <Link href="/contact">
              <Button size="lg" variant="outline" className="w-full sm:w-auto text-white border-white hover:bg-white hover:text-primary">
                Schedule Consultation
              </Button>
            </Link>
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer className="bg-gray-900 text-white py-12">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
            <div>
              <h3 className="text-lg font-bold mb-4">{siteSettings?.siteName || 'Study Abroad with Hadi'}</h3>
              <p className="text-gray-400 text-sm">
                {siteSettings?.aboutContent || 'Your trusted partner for international education and visa consulting.'}
              </p>
            </div>
            <div>
              <h4 className="font-medium mb-4">Quick Links</h4>
              <ul className="space-y-2 text-sm text-gray-400">
                <li><Link href="/" className="hover:text-white transition-colors">Home</Link></li>
                <li><Link href="/study" className="hover:text-white transition-colors">Study Destinations</Link></li>
                <li><Link href="/contact" className="hover:text-white transition-colors">Contact</Link></li>
                <li><Link href="/lucky-draw" className="hover:text-white transition-colors">Lucky Draw</Link></li>
                <li><Link href="/b2b" className="hover:text-white transition-colors">B2B Partnerships</Link></li>
              </ul>
            </div>
            <div>
              <h4 className="font-medium mb-4">Services</h4>
              <ul className="space-y-2 text-sm text-gray-400">
                <li>Study Visa Assistance</li>
                <li>Admission Help</li>
                <li>Scholarship Guidance</li>
                <li>University Selection</li>
                <li>Document Preparation</li>
              </ul>
            </div>
            <div>
              <h4 className="font-medium mb-4">Contact Info</h4>
              <div className="space-y-2 text-sm text-gray-400">
                <div className="flex items-center">
                  <Mail className="w-4 h-4 mr-2" />
                  {siteSettings?.contactEmail || 'info@studyabroadwithhadi.info'}
                </div>
                <div className="flex items-center">
                  <Phone className="w-4 h-4 mr-2" />
                  {siteSettings?.contactPhone || '+1-234-567-8900'}
                </div>
                <div className="flex items-center">
                  <MapPin className="w-4 h-4 mr-2" />
                  {siteSettings?.address || '123 Education Street, Learning City'}
                </div>
              </div>
            </div>
          </div>
          <div className="border-t border-gray-800 mt-8 pt-8">
            <div className="flex flex-col md:flex-row justify-between items-center text-sm text-gray-400">
              <p>&copy; 2024 {siteSettings?.siteName || 'Study Abroad with Hadi'}. All rights reserved.</p>
              <div className="flex items-center space-x-4 mt-4 md:mt-0">
                <span className="flex items-center">
                  <Clock className="w-4 h-4 mr-1" />
                  Available 24/7
                </span>
                <span className="flex items-center">
                  <Heart className="w-4 h-4 mr-1 text-red-500" />
                  Made with passion
                </span>
              </div>
            </div>
          </div>
        </div>
      </footer>
    </div>
  )
}

--- File: study\page.tsx ---
'use client'

import { useState, useEffect } from 'react'
import { db } from '@/lib/db'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { ArrowRight, Globe, GraduationCap, Users, Star, MapPin, TrendingUp, Shield, Award, Clock, CheckCircle, Heart, Flag, Plane, BookOpen } from 'lucide-react'
import Link from 'next/link'
import Navbar from '@/components/navbar'
import { motion } from 'framer-motion'

export default function StudyDestinationsPage() {
  const [studyPages, setStudyPages] = useState<any[]>([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    const fetchStudyPages = async () => {
      try {
        const response = await fetch('/api/study-pages')
        if (response.ok) {
          const data = await response.json()
          setStudyPages(data)
        }
      } catch (error) {
        console.error('Failed to fetch study pages:', error)
      } finally {
        setLoading(false)
      }
    }

    fetchStudyPages()
  }, [])

  // Get country flag emojis based on country names
  const getCountryFlag = (title: string) => {
    // Dynamic flag selection based on keywords in title
    const flags: Record<string, string> = {
      'italy': '🇮🇹', 'canada': '🇨🇦', 'uk': '🇬🇧', 'usa': '🇺🇸', 'australia': '🇦🇺',
      'germany': '🇩🇪', 'france': '🇫🇷', 'spain': '🇪🇸', 'japan': '🇯🇵', 'china': '🇨🇳',
      'india': '🇮🇳', 'singapore': '🇸🇬', 'malaysia': '🇲🇾', 'uae': '🇦🇪', 'netherlands': '🇳🇱',
      'sweden': '🇸🇪', 'norway': '🇳🇴', 'denmark': '🇩🇰', 'finland': '🇫🇮', 'switzerland': '🇨🇭',
      'austria': '🇦🇹', 'belgium': '🇧🇪', 'ireland': '🇮🇪', 'portugal': '🇵🇹', 'greece': '🇬🇷',
      'new zealand': '🇳🇿', 'south korea': '🇰🇷', 'brazil': '🇧🇷', 'argentina': '🇦🇷', 'mexico': '🇲🇽'
    }
    
    const lowerTitle = title.toLowerCase()
    for (const [country, flag] of Object.entries(flags)) {
      if (lowerTitle.includes(country)) {
        return flag
      }
    }
    return '🌍'
  }

  // Get country-specific highlights
  const getCountryHighlights = (title: string) => {
    // Dynamic highlights based on keywords in title
    const lowerTitle = title.toLowerCase()
    
    if (lowerTitle.includes('europe')) {
      return ['Rich Culture', 'Quality Education', 'Scholarships Available']
    }
    if (lowerTitle.includes('america') || lowerTitle.includes('canada') || lowerTitle.includes('usa')) {
      return ['Research Opportunities', 'Career Growth', 'Global Recognition']
    }
    if (lowerTitle.includes('asia') || lowerTitle.includes('australia')) {
      return ['Technology Focus', 'Innovation Hub', 'International Experience']
    }
    
    return ['Quality Education', 'International Experience', 'Career Opportunities']
  }

  // Get country-specific stats
  const getCountryStats = (title: string) => {
    // Dynamic stats based on keywords in title
    const lowerTitle = title.toLowerCase()
    
    if (lowerTitle.includes('usa')) {
      return { universities: '200+', students: '1M+', employment: '88%' }
    }
    if (lowerTitle.includes('uk')) {
      return { universities: '150+', students: '500K+', employment: '92%' }
    }
    if (lowerTitle.includes('canada')) {
      return { universities: '100+', students: '200K+', employment: '90%' }
    }
    if (lowerTitle.includes('australia')) {
      return { universities: '40+', students: '300K+', employment: '87%' }
    }
    if (lowerTitle.includes('germany')) {
      return { universities: '300+', students: '400K+', employment: '91%' }
    }
    
    return { universities: '50+', students: '100K+', employment: '85%' }
  }

  // Get country-specific benefits
  const getCountryBenefits = (title: string) => {
    // Dynamic benefits based on keywords in title
    const lowerTitle = title.toLowerCase()
    
    if (lowerTitle.includes('europe')) {
      return ['Historical Universities', 'Cultural Experience', 'EU Opportunities']
    }
    if (lowerTitle.includes('america') || lowerTitle.includes('canada') || lowerTitle.includes('usa')) {
      return ['World-Class Research', 'Diverse Campus Life', 'Career Advancement']
    }
    if (lowerTitle.includes('asia') || lowerTitle.includes('australia')) {
      return ['Technology Innovation', 'Global Business Hub', 'Quality Lifestyle']
    }
    
    return ['Quality Education', 'International Environment', 'Career Opportunities']
  }

  const totalCards = studyPages.length * 6 // Assuming 6 categories per page

  if (loading) {
    return (
      <div className="min-h-screen">
        <Navbar />
        <div className="flex items-center justify-center min-h-[60vh]">
          <div className="text-center">
            <div className="w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4 animate-pulse">
              <Globe className="w-8 h-8 text-primary animate-spin" />
            </div>
            <h2 className="text-xl font-semibold text-gray-900 mb-2">Loading Study Destinations</h2>
            <p className="text-gray-600">Preparing amazing study opportunities for you...</p>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen">
      <Navbar />

      {/* Hero Section */}
      <section className="relative bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 py-20">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center">
            <Badge className="mb-4" variant="secondary">
              <Globe className="w-3 h-3 mr-1" />
              {studyPages.length} Countries Available
            </Badge>
            <h1 className="text-4xl md:text-6xl font-bold text-gray-900 mb-6">
              Study Destinations
            </h1>
            <p className="text-xl text-gray-600 max-w-3xl mx-auto mb-8">
              Explore our comprehensive guides to studying abroad in top destinations worldwide. 
              From visa requirements to scholarship opportunities, we've got you covered.
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Link href="/contact">
                <Button size="lg" className="w-full sm:w-auto">
                  Get Free Consultation
                </Button>
              </Link>
              <Link href="/lucky-draw">
                <Button size="lg" variant="outline" className="w-full sm:w-auto">
                  Enter Lucky Draw
                </Button>
              </Link>
            </div>
          </div>

          {/* Stats */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-16">
            <div className="text-center">
              <div className="text-3xl font-bold text-primary mb-2">{studyPages.length}</div>
              <p className="text-gray-600">Study Destinations</p>
            </div>
            <div className="text-center">
              <div className="text-3xl font-bold text-primary mb-2">{totalCards}</div>
              <p className="text-gray-600">Detailed Guides</p>
            </div>
            <div className="text-center">
              <div className="text-3xl font-bold text-primary mb-2">98%</div>
              <p className="text-gray-600">Success Rate</p>
            </div>
          </div>
        </div>
      </section>

      {/* Study Destinations Grid */}
      <section className="py-20 bg-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-12">
            <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
              Popular Study Destinations
            </h2>
            <p className="text-xl text-gray-600 max-w-3xl mx-auto">
              Click on any destination to explore universities, scholarships, and detailed guidance
            </p>
          </div>

          {studyPages.length === 0 ? (
            <motion.div 
              className="text-center py-16"
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ duration: 0.6 }}
            >
              <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <Globe className="w-8 h-8 text-gray-400" />
              </div>
              <h3 className="text-xl font-semibold text-gray-900 mb-2">
                No Study Destinations Available
              </h3>
              <p className="text-gray-600 mb-6">
                We're currently adding new study destinations. Check back soon!
              </p>
              <Link href="/contact">
                <Button>Get Notified When Available</Button>
              </Link>
            </motion.div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
              {studyPages.map((page, index) => {
                const stats = getCountryStats(page.title)
                const benefits = getCountryBenefits(page.title)
                
                return (
                  <motion.div
                    key={page.id}
                    initial={{ opacity: 0, y: 50 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.6, delay: index * 0.1 }}
                    whileHover={{ y: -15 }}
                    className="group"
                  >
                    <Link href={`/study/${page.slug}`}>
                      <Card className="h-full overflow-hidden border-0 shadow-xl hover:shadow-2xl transition-all duration-700 cursor-pointer bg-gradient-to-br from-white via-white to-gray-50 group-hover:from-primary/5 group-hover:to-primary/10 relative">
                        {/* Card Background Pattern */}
                        <div className="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-blue-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-700"></div>
                        
                        <div className="relative h-64 overflow-hidden">
                          {page.bannerUrl ? (
                            <div className="relative w-full h-full">
                              <img 
                                src={page.bannerUrl} 
                                alt={page.title}
                                className="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110"
                              />
                              <div className="absolute inset-0 bg-gradient-to-t from-black/80 via-black/40 to-transparent" />
                              <div className="absolute inset-0 bg-gradient-to-r from-primary/40 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-700" />
                              
                              {/* Animated overlay pattern */}
                              <div className="absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-700">
                                <div className="absolute inset-0 bg-gradient-to-br from-transparent via-white/10 to-transparent animate-pulse"></div>
                              </div>
                            </div>
                          ) : (
                            <div className="w-full h-full bg-gradient-to-br from-primary/20 via-blue-100 to-indigo-100 flex items-center justify-center relative overflow-hidden">
                              <div className="absolute inset-0 bg-gradient-to-br from-primary/10 to-blue-500/10"></div>
                              <motion.div 
                                className="text-7xl relative z-10"
                                animate={{ rotate: [0, 5, -5, 0] }}
                                transition={{ duration: 4, repeat: Infinity, repeatType: "reverse" }}
                              >
                                {getCountryFlag(page.title)}
                              </motion.div>
                              
                              {/* Floating background elements */}
                              <motion.div
                                className="absolute top-4 right-4 w-8 h-8 bg-white/20 rounded-full"
                                animate={{ y: [0, -10, 0] }}
                                transition={{ duration: 3, repeat: Infinity, repeatType: "reverse" }}
                              />
                              <motion.div
                                className="absolute bottom-4 left-4 w-6 h-6 bg-white/20 rounded-full"
                                animate={{ y: [0, 10, 0] }}
                                transition={{ duration: 3, repeat: Infinity, repeatType: "reverse", delay: 1 }}
                              />
                            </div>
                          )}
                          
                          {/* Enhanced Floating badges */}
                          <div className="absolute top-4 left-4 z-20">
                            <motion.div
                              whileHover={{ scale: 1.1 }}
                              transition={{ duration: 0.2 }}
                            >
                              <Badge className="bg-white/95 backdrop-blur-sm text-black px-3 py-1.5 shadow-lg border-0 hover:bg-white transition-colors duration-300">
                                <Star className="w-3 h-3 mr-1 text-yellow-500" />
                                Featured
                              </Badge>
                            </motion.div>
                          </div>
                          <div className="absolute top-4 right-4 z-20">
                            <motion.div
                              whileHover={{ scale: 1.1 }}
                              transition={{ duration: 0.2 }}
                            >
                              <Badge className="bg-gradient-to-r from-primary/90 to-primary/80 backdrop-blur-sm text-white px-3 py-1.5 shadow-lg border-0 hover:from-primary hover:to-primary/90 transition-all duration-300">
                                <TrendingUp className="w-3 h-3 mr-1" />
                                Popular
                              </Badge>
                            </motion.div>
                          </div>
                          
                          {/* Enhanced Country flag overlay */}
                          <div className="absolute bottom-4 left-4 z-20">
                            <motion.div 
                              className="w-16 h-16 bg-white/95 backdrop-blur-sm rounded-2xl flex items-center justify-center shadow-xl border-2 border-white/50 group-hover:scale-110 group-hover:rotate-6 transition-all duration-300"
                              whileHover={{ scale: 1.1, rotate: 6 }}
                            >
                              <span className="text-3xl">{getCountryFlag(page.title)}</span>
                            </motion.div>
                          </div>

                          {/* Stats overlay */}
                          <div className="absolute bottom-4 right-4 z-20">
                            <div className="bg-white/95 backdrop-blur-sm rounded-xl px-3 py-2 shadow-lg border border-white/50">
                              <span className="text-sm font-bold text-gray-800">
                                6 Categories
                              </span>
                            </div>
                          </div>
                        </div>
                        
                        <CardHeader className="pb-4 relative z-10">
                          <div className="flex items-start justify-between">
                            <div className="flex-1">
                              <CardTitle className="text-xl font-bold text-gray-900 group-hover:text-primary transition-colors duration-500 mb-3 line-clamp-1">
                                {page.title}
                              </CardTitle>
                              <CardDescription className="text-gray-600 line-clamp-2 leading-relaxed text-sm">
                                {page.description || 'Discover amazing opportunities to study in this beautiful country'}
                              </CardDescription>
                            </div>
                          </div>
                        </CardHeader>
                        
                        <CardContent className="pt-0 relative z-10">
                          {/* Quick stats */}
                          <div className="grid grid-cols-3 gap-3 mb-4">
                            <div className="text-center p-2 bg-primary/5 rounded-lg group-hover:bg-primary/10 transition-colors duration-300">
                              <div className="text-lg font-bold text-primary">{stats.universities}</div>
                              <div className="text-xs text-gray-600">Universities</div>
                            </div>
                            <div className="text-center p-2 bg-blue-50 rounded-lg group-hover:bg-blue-100 transition-colors duration-300">
                              <div className="text-lg font-bold text-blue-600">{stats.students}</div>
                              <div className="text-xs text-gray-600">Students</div>
                            </div>
                            <div className="text-center p-2 bg-green-50 rounded-lg group-hover:bg-green-100 transition-colors duration-300">
                              <div className="text-lg font-bold text-green-600">{stats.employment}</div>
                              <div className="text-xs text-gray-600">Employment</div>
                            </div>
                          </div>

                          {/* Country highlights */}
                          <div className="mb-4">
                            <div className="flex flex-wrap gap-2">
                              {getCountryHighlights(page.title).slice(0, 3).map((highlight, idx) => (
                                <motion.div
                                  key={idx}
                                  whileHover={{ scale: 1.05 }}
                                  transition={{ duration: 0.2 }}
                                >
                                  <Badge variant="secondary" className="text-xs bg-gray-100 hover:bg-gray-200 transition-colors duration-300">
                                    {highlight}
                                  </Badge>
                                </motion.div>
                              ))}
                            </div>
                          </div>

                          {/* Key benefits */}
                          <div className="mb-4">
                            <div className="space-y-2">
                              {benefits.slice(0, 2).map((benefit, idx) => (
                                <div key={idx} className="flex items-center text-xs text-gray-600 group-hover:text-gray-800 transition-colors duration-300">
                                  <CheckCircle className="w-3 h-3 mr-2 text-green-500 flex-shrink-0" />
                                  <span className="line-clamp-1">{benefit}</span>
                                </div>
                              ))}
                            </div>
                          </div>
                          
                          <div className="flex items-center justify-between">
                            <div className="flex items-center space-x-3 text-xs text-gray-500">
                              <div className="flex items-center group-hover:text-primary transition-colors duration-300">
                                <MapPin className="w-3 h-3 mr-1" />
                                <span>International</span>
                              </div>
                              <div className="flex items-center group-hover:text-blue-600 transition-colors duration-300">
                                <Users className="w-3 h-3 mr-1" />
                                <span>Popular</span>
                              </div>
                            </div>
                            
                            <motion.div
                              whileHover={{ scale: 1.05 }}
                              whileTap={{ scale: 0.95 }}
                            >
                              <Button variant="outline" className="border-2 border-primary/20 hover:border-primary hover:bg-primary hover:text-white transition-all duration-300 group text-sm px-4 py-2">
                                <span className="mr-2 group-hover:mr-3 transition-all duration-300">Explore</span>
                                <ArrowRight className="w-4 h-4 group-hover:translate-x-1 transition-transform duration-300" />
                              </Button>
                            </motion.div>
                          </div>
                        </CardContent>
                      </Card>
                    </Link>
                  </motion.div>
                )
              })}
            </div>
          )}
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-20 bg-gradient-to-r from-primary to-blue-600 text-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
          <h2 className="text-3xl md:text-4xl font-bold mb-4">
            Can't Find Your Dream Destination?
          </h2>
          <p className="text-xl mb-8 opacity-90">
            We're constantly adding new study destinations. Let us know where you'd like to study!
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Link href="/contact">
              <Button size="lg" variant="secondary" className="w-full sm:w-auto">
                Request a Destination
              </Button>
            </Link>
            <Link href="/contact">
              <Button size="lg" variant="outline" className="w-full sm:w-auto text-white border-white hover:bg-white hover:text-primary">
                Get Expert Advice
              </Button>
            </Link>
          </div>
        </div>
      </section>

      {/* Info Section */}
      <section className="py-20 bg-gray-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            <div className="text-center">
              <div className="w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4">
                <Globe className="w-8 h-8 text-primary" />
              </div>
              <h3 className="text-xl font-semibold text-gray-900 mb-2">
                Comprehensive Guides
              </h3>
              <p className="text-gray-600">
                Detailed information about universities, scholarships, visa requirements, and cost of living for each destination.
              </p>
            </div>
            <div className="text-center">
              <div className="w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4">
                <GraduationCap className="w-8 h-8 text-primary" />
              </div>
              <h3 className="text-xl font-semibold text-gray-900 mb-2">
                Expert Insights
              </h3>
              <p className="text-gray-600">
                First-hand experiences and tips from students who have successfully studied in these destinations.
              </p>
            </div>
            <div className="text-center">
              <div className="w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4">
                <Users className="w-8 h-8 text-primary" />
              </div>
              <h3 className="text-xl font-semibold text-gray-900 mb-2">
                Personalized Support
              </h3>
              <p className="text-gray-600">
                One-on-one guidance to help you choose the right destination and navigate the application process.
              </p>
            </div>
          </div>
        </div>
      </section>
    </div>
  )
}

--- File: study\[slug]\page.tsx ---
import { notFound } from 'next/navigation'
import { db } from '@/lib/db'
import StudyPageClient from '@/components/study-page-client'
import Navbar from '@/components/navbar'

interface StudyPageData {
  id: number
  title: string
  slug: string
  description: string
  bannerUrl: string | null
  seoTitle: string | null
  seoDescription: string | null
  isActive: boolean
  categories: {
    id: number
    title: string
    description: string | null
    cards: {
      id: number
      title: string
      description: string
      imageUrl: string | null
      cardCategory: string | null
      duration: string | null
      location: string | null
      intake: string | null
      requirements: string | null
    }[]
  }[]
}

async function getStudyPage(slug: string): Promise<StudyPageData | null> {
  try {
    const studyPage = await db.studyPage.findUnique({
      where: { 
        slug,
        isActive: true 
      },
      include: {
        categories: {
          include: {
            cards: {
              orderBy: { createdAt: 'asc' }
            }
          },
          orderBy: { createdAt: 'asc' }
        }
      }
    })

    return studyPage
  } catch (error) {
    console.error('Failed to fetch study page:', error)
    return null
  }
}

export async function generateMetadata({ params }: { params: Promise<{ slug: string }> }) {
  const { slug } = await params
  const studyPage = await getStudyPage(slug)
  
  if (!studyPage) {
    return {
      title: 'Page Not Found',
      description: 'The requested study page could not be found.'
    }
  }

  return {
    title: studyPage.seoTitle || studyPage.title,
    description: studyPage.seoDescription || studyPage.description,
    openGraph: {
      title: studyPage.seoTitle || studyPage.title,
      description: studyPage.seoDescription || studyPage.description,
      images: studyPage.bannerUrl ? [studyPage.bannerUrl] : [],
    },
  }
}

export default async function StudyPage({ params }: { params: Promise<{ slug: string }> }) {
  const { slug } = await params
  const studyPage = await getStudyPage(slug)

  if (!studyPage) {
    notFound()
  }

  // Get country-specific data
  const getCountryData = (title: string) => {
    const countryData: Record<string, { 
      flag: string; 
      highlights: string[]; 
      stats: { universities: string; students: string; employment: string };
      benefits: string[];
      color: string;
    }> = {
      'Study in Italy': {
        flag: '🇮🇹',
        highlights: ['Rich Culture', 'Affordable Education', 'Scholarships Available'],
        stats: { universities: '50+', students: '100K+', employment: '85%' },
        benefits: ['Historical Universities', 'Art & Design Programs', 'Mediterranean Lifestyle'],
        color: 'from-green-400 to-green-600'
      },
      'Study in Canada': {
        flag: '🇨🇦',
        highlights: ['Post-Grad Work', 'Quality Education', 'Immigration Pathway'],
        stats: { universities: '100+', students: '200K+', employment: '90%' },
        benefits: ['Co-op Programs', 'Post-Graduation Work Permit', 'Pathway to PR'],
        color: 'from-red-400 to-red-600'
      },
      'Study in UK': {
        flag: '🇬🇧',
        highlights: ['Prestigious Universities', 'Shorter Programs', 'Global Recognition'],
        stats: { universities: '150+', students: '500K+', employment: '92%' },
        benefits: ['3-Year Bachelor Programs', '1-Year Master Programs', 'Global Business Hub'],
        color: 'from-blue-400 to-blue-600'
      },
      'Study in USA': {
        flag: '🇺🇸',
        highlights: ['Research Opportunities', 'Diverse Programs', 'Career Advancement'],
        stats: { universities: '200+', students: '1M+', employment: '88%' },
        benefits: ['World-Class Research', 'Diverse Campus Life', 'Silicon Valley Connections'],
        color: 'from-purple-400 to-purple-600'
      },
      'Study in Australia': {
        flag: '🇦🇺',
        highlights: ['Work Rights', 'High Quality Life', 'Research Focus'],
        stats: { universities: '40+', students: '300K+', employment: '87%' },
        benefits: ['Work While Studying', 'High Standard of Living', 'Research Excellence'],
        color: 'from-yellow-400 to-yellow-600'
      },
      'Study in Germany': {
        flag: '🇩🇪',
        highlights: ['No Tuition Fees', 'Engineering Excellence', 'Research Opportunities'],
        stats: { universities: '300+', students: '400K+', employment: '91%' },
        benefits: ['Free Tuition', 'Strong Engineering', 'Central European Location'],
        color: 'from-gray-600 to-gray-800'
      },
      'Study in France': {
        flag: '🇫🇷',
        highlights: ['Art & Culture', 'Business Schools', 'Language Learning'],
        stats: { universities: '80+', students: '250K+', employment: '86%' },
        benefits: ['Fashion & Luxury Brands', 'Culinary Arts', 'EU Business Center'],
        color: 'from-indigo-400 to-indigo-600'
      },
      'Study in Spain': {
        flag: '🇪🇸',
        highlights: ['Warm Climate', 'Affordable Living', 'Tourism & Hospitality'],
        stats: { universities: '60+', students: '150K+', employment: '84%' },
        benefits: ['Affordable Living', 'Tourism Industry', 'Warm Climate'],
        color: 'from-orange-400 to-orange-600'
      }
    }
    return countryData[title] || {
      flag: '🌍',
      highlights: ['Quality Education', 'International Experience', 'Career Opportunities'],
      stats: { universities: '50+', students: '100K+', employment: '85%' },
      benefits: ['Quality Education', 'International Environment', 'Career Opportunities'],
      color: 'from-primary to-primary/80'
    }
  }

  const countryData = getCountryData(studyPage.title)

  return (
    <div className="min-h-screen">
      <Navbar />
      <StudyPageClient studyPage={studyPage} countryData={countryData} />
    </div>
  )
}

--- File: study\[slug]\page.tsx.backup ---
import { notFound } from 'next/navigation'
import { db } from '@/lib/db'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { ArrowLeft, ArrowRight, Calendar, User, MapPin, Users, Star, Clock, CheckCircle, Award, Globe, BookOpen, Heart, Shield, TrendingUp } from 'lucide-react'
import Link from 'next/link'
import Image from 'next/image'
import Navbar from '@/components/navbar'
import { motion } from 'framer-motion'

interface StudyPageData {
  id: number
  title: string
  slug: string
  description: string
  bannerUrl: string | null
  seoTitle: string | null
  seoDescription: string | null
  isActive: boolean
  categories: {
    id: number
    title: string
    description: string | null
    cards: {
      id: number
      title: string
      description: string
      imageUrl: string | null
    }[]
  }[]
}

async function getStudyPage(slug: string): Promise<StudyPageData | null> {
  try {
    const studyPage = await db.studyPage.findUnique({
      where: { 
        slug,
        isActive: true 
      },
      include: {
        categories: {
          include: {
            cards: {
              orderBy: { createdAt: 'asc' }
            }
          },
          orderBy: { createdAt: 'asc' }
        }
      }
    })

    return studyPage
  } catch (error) {
    console.error('Failed to fetch study page:', error)
    return null
  }
}

export async function generateMetadata({ params }: { params: Promise<{ slug: string }> }) {
  const { slug } = await params
  const studyPage = await getStudyPage(slug)
  
  if (!studyPage) {
    return {
      title: 'Page Not Found',
      description: 'The requested study page could not be found.'
    }
  }

  return {
    title: studyPage.seoTitle || studyPage.title,
    description: studyPage.seoDescription || studyPage.description,
    openGraph: {
      title: studyPage.seoTitle || studyPage.title,
      description: studyPage.seoDescription || studyPage.description,
      images: studyPage.bannerUrl ? [studyPage.bannerUrl] : [],
    },
  }
}

export default async function StudyPage({ params }: { params: Promise<{ slug: string }> }) {
  const { slug } = await params
  const studyPage = await getStudyPage(slug)

  if (!studyPage) {
    notFound()
  }

  // Get country-specific data
  const getCountryData = (title: string) => {
    const countryData: Record<string, { 
      flag: string; 
      highlights: string[]; 
      stats: { universities: string; students: string; employment: string };
      benefits: string[];
      color: string;
    }> = {
      'Study in Italy': {
        flag: '🇮🇹',
        highlights: ['Rich Culture', 'Affordable Education', 'Scholarships Available'],
        stats: { universities: '50+', students: '100K+', employment: '85%' },
        benefits: ['Historical Universities', 'Art & Design Programs', 'Mediterranean Lifestyle'],
        color: 'from-green-400 to-green-600'
      },
      'Study in Canada': {
        flag: '🇨🇦',
        highlights: ['Post-Grad Work', 'Quality Education', 'Immigration Pathway'],
        stats: { universities: '100+', students: '200K+', employment: '90%' },
        benefits: ['Co-op Programs', 'Post-Graduation Work Permit', 'Pathway to PR'],
        color: 'from-red-400 to-red-600'
      },
      'Study in UK': {
        flag: '🇬🇧',
        highlights: ['Prestigious Universities', 'Shorter Programs', 'Global Recognition'],
        stats: { universities: '150+', students: '500K+', employment: '92%' },
        benefits: ['3-Year Bachelor Programs', '1-Year Master Programs', 'Global Business Hub'],
        color: 'from-blue-400 to-blue-600'
      },
      'Study in USA': {
        flag: '🇺🇸',
        highlights: ['Research Opportunities', 'Diverse Programs', 'Career Advancement'],
        stats: { universities: '200+', students: '1M+', employment: '88%' },
        benefits: ['World-Class Research', 'Diverse Campus Life', 'Silicon Valley Connections'],
        color: 'from-purple-400 to-purple-600'
      },
      'Study in Australia': {
        flag: '🇦🇺',
        highlights: ['Work Rights', 'High Quality Life', 'Research Focus'],
        stats: { universities: '40+', students: '300K+', employment: '87%' },
        benefits: ['Work While Studying', 'High Standard of Living', 'Research Excellence'],
        color: 'from-yellow-400 to-yellow-600'
      },
      'Study in Germany': {
        flag: '🇩🇪',
        highlights: ['No Tuition Fees', 'Engineering Excellence', 'Research Opportunities'],
        stats: { universities: '300+', students: '400K+', employment: '91%' },
        benefits: ['Free Tuition', 'Strong Engineering', 'Central European Location'],
        color: 'from-gray-600 to-gray-800'
      },
      'Study in France': {
        flag: '🇫🇷',
        highlights: ['Art & Culture', 'Business Schools', 'Language Learning'],
        stats: { universities: '80+', students: '250K+', employment: '86%' },
        benefits: ['Fashion & Luxury Brands', 'Culinary Arts', 'EU Business Center'],
        color: 'from-indigo-400 to-indigo-600'
      },
      'Study in Spain': {
        flag: '🇪🇸',
        highlights: ['Warm Climate', 'Affordable Living', 'Tourism & Hospitality'],
        stats: { universities: '60+', students: '150K+', employment: '84%' },
        benefits: ['Affordable Living', 'Tourism Industry', 'Warm Climate'],
        color: 'from-orange-400 to-orange-600'
      }
    }
    return countryData[title] || {
      flag: '🌍',
      highlights: ['Quality Education', 'International Experience', 'Career Opportunities'],
      stats: { universities: '50+', students: '100K+', employment: '85%' },
      benefits: ['Quality Education', 'International Environment', 'Career Opportunities'],
      color: 'from-primary to-primary/80'
    }
  }

  const countryData = getCountryData(studyPage.title)

  return (
    <div className="min-h-screen">
      <Navbar />

      {/* Enhanced Banner Section */}
      <section className="relative h-[500px] bg-gradient-to-br from-primary/20 via-blue-100 to-indigo-100 overflow-hidden">
        {studyPage.bannerUrl ? (
          <div className="absolute inset-0">
            <img 
              src={studyPage.bannerUrl} 
              alt={studyPage.title}
              className="w-full h-full object-cover"
            />
            <div className="absolute inset-0 bg-gradient-to-t from-black/80 via-black/40 to-transparent"></div>
            <div className="absolute inset-0 bg-gradient-to-r from-primary/60 to-transparent"></div>
          </div>
        ) : (
          <div className="absolute inset-0 bg-gradient-to-br from-primary/30 via-blue-200 to-indigo-200">
            <div className="absolute inset-0 bg-gradient-to-r from-primary/40 to-transparent"></div>
            {/* Animated background elements */}
            <motion.div
              className="absolute top-20 left-10 w-72 h-72 bg-white/20 rounded-full mix-blend-multiply filter blur-xl opacity-70"
              animate={{ x: [0, 100, 0], y: [0, -50, 0] }}
              transition={{ duration: 20, repeat: Infinity, repeatType: "reverse" }}
            />
            <motion.div
              className="absolute bottom-20 right-10 w-96 h-96 bg-primary/20 rounded-full mix-blend-multiply filter blur-xl opacity-70"
              animate={{ x: [0, -100, 0], y: [0, 50, 0] }}
              transition={{ duration: 25, repeat: Infinity, repeatType: "reverse" }}
            />
          </div>
        )}
        
        <div className="absolute inset-0 flex items-center justify-center">
          <motion.div 
            className="text-center text-white max-w-5xl mx-auto px-4"
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
          >
            <motion.div 
              className="mb-6"
              initial={{ scale: 0.8, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              transition={{ duration: 0.6, delay: 0.2 }}
            >
              <span className="text-6xl md:text-8xl">{countryData.flag}</span>
            </motion.div>
            <h1 className="text-4xl md:text-6xl lg:text-7xl font-bold mb-6 leading-tight">
              {studyPage.title}
            </h1>
            <p className="text-xl md:text-2xl max-w-4xl mx-auto leading-relaxed">
              {studyPage.description}
            </p>
            
            {/* Quick stats */}
            <motion.div 
              className="grid grid-cols-3 gap-6 mt-10 max-w-2xl mx-auto"
              initial={{ opacity: 0, y: 30 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8, delay: 0.4 }}
            >
              <div className="text-center">
                <div className="text-3xl font-bold text-white mb-2">{countryData.stats.universities}</div>
                <div className="text-sm text-white/80">Universities</div>
              </div>
              <div className="text-center">
                <div className="text-3xl font-bold text-white mb-2">{countryData.stats.students}</div>
                <div className="text-sm text-white/80">International Students</div>
              </div>
              <div className="text-center">
                <div className="text-3xl font-bold text-white mb-2">{countryData.stats.employment}</div>
                <div className="text-sm text-white/80">Employment Rate</div>
              </div>
            </motion.div>
          </motion.div>
        </div>
      </section>

      {/* Country Highlights */}
      <section className="py-16 bg-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <motion.div 
            className="text-center mb-12"
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
          >
            <Badge className="mb-4 bg-primary/10 text-primary hover:bg-primary/20" variant="secondary">
              <Star className="w-3 h-3 mr-1" />
              Why Study {studyPage.title.split(' in ')[1]}?
            </Badge>
            <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
              Key Highlights & Benefits
            </h2>
          </motion.div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12">
            {countryData.highlights.map((highlight, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 30 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, delay: index * 0.1 }}
                viewport={{ once: true }}
              >
                <Card className="h-full hover:shadow-lg transition-all duration-300 group border-0 shadow-md bg-gradient-to-br from-white to-gray-50">
                  <CardContent className="p-6 text-center">
                    <motion.div 
                      className={`w-16 h-16 bg-gradient-to-br ${countryData.color} rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:scale-110 group-hover:rotate-6 transition-all duration-300`}
                      whileHover={{ scale: 1.1, rotate: 6 }}
                    >
                      <Award className="w-8 h-8 text-white" />
                    </motion.div>
                    <h3 className="text-lg font-semibold text-gray-900 mb-2">{highlight}</h3>
                    <p className="text-sm text-gray-600">Experience the best of what this country has to offer</p>
                  </CardContent>
                </Card>
              </motion.div>
            ))}
          </div>

          {/* Benefits Section */}
          <div className="bg-gradient-to-r from-primary/5 to-blue-50 rounded-2xl p-8">
            <h3 className="text-2xl font-bold text-gray-900 mb-6 text-center">Key Benefits</h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {countryData.benefits.map((benefit, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, x: -20 }}
                  whileInView={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.8, delay: index * 0.1 }}
                  viewport={{ once: true }}
                  className="flex items-center space-x-3"
                >
                  <div className="w-10 h-10 bg-white rounded-full flex items-center justify-center shadow-md">
                    <CheckCircle className="w-5 h-5 text-green-500" />
                  </div>
                  <span className="text-gray-700 font-medium">{benefit}</span>
                </motion.div>
              ))}
            </div>
          </div>
        </div>
      </section>

  {/* Categories and Cards */}
        <section className="py-16 bg-gray-50">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <motion.div 
              className="text-center mb-12"
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8 }}
              viewport={{ once: true }}
            >
              <Badge className="mb-4 bg-blue-100 text-blue-800 hover:bg-blue-200" variant="secondary">
                <BookOpen className="w-3 h-3 mr-1" />
                Study Programs
              </Badge>
              <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
                Explore Study Categories
              </h2>
              <p className="text-xl text-gray-600 max-w-3xl mx-auto">
                Discover various study programs and opportunities available in {studyPage.title.split(' in ')[1]}
              </p>
            </motion.div>

            <div className="space-y-16">
              {studyPage.categories.map((category, categoryIndex) => (
                <motion.div 
                  key={category.id} 
                  className="space-y-8"
                  initial={{ opacity: 0, y: 30 }}
                  whileInView={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.8, delay: categoryIndex * 0.1 }}
                  viewport={{ once: true }}
                >
                  <div className="text-center">
                    <motion.div
                      initial={{ scale: 0.9, opacity: 0 }}
                      whileInView={{ scale: 1, opacity: 1 }}
                      transition={{ duration: 0.6 }}
                      viewport={{ once: true }}
                    >
                      <Badge className="mb-4 bg-gradient-to-r from-primary/10 to-primary/20 text-primary hover:from-primary/20 hover:to-primary/30" variant="secondary">
                        <Globe className="w-3 h-3 mr-1" />
                        {category.title}
                      </Badge>
                      <h3 className="text-2xl md:text-3xl font-bold text-gray-900 mb-4">
                        {category.title}
                      </h3>
                      {category.description && (
                        <p className="text-lg text-gray-600 max-w-3xl mx-auto">
                          {category.description}
                        </p>
                      )}
                    </motion.div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                    {category.cards.map((card, cardIndex) => (
                      <motion.div
                        key={card.id}
                        initial={{ opacity: 0, y: 30 }}
                        whileInView={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.8, delay: cardIndex * 0.1 }}
                        viewport={{ once: true }}
                        whileHover={{ y: -10 }}
                        className="group"
                      >
                        <Card className="h-full overflow-hidden border-0 shadow-lg hover:shadow-2xl transition-all duration-500 cursor-pointer bg-gradient-to-br from-white to-gray-50 group-hover:from-primary/5 group-hover:to-primary/10">
                          <div className="relative h-48 overflow-hidden">
                            {card.imageUrl ? (
                              <div className="relative w-full h-full">
                                <img 
                                  src={card.imageUrl} 
                                  alt={card.title}
                                  className="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110"
                                />
                                <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent" />
                                <div className="absolute inset-0 bg-gradient-to-r from-primary/30 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500" />
                              </div>
                            ) : (
                              <div className="w-full h-full bg-gradient-to-br from-primary/10 to-primary/20 flex items-center justify-center relative overflow-hidden">
                                <div className="absolute inset-0 bg-gradient-to-br from-primary/5 to-blue-500/5"></div>
                                <motion.div 
                                  className="text-6xl relative z-10"
                                  animate={{ rotate: [0, 5, -5, 0] }}
                                  transition={{ duration: 4, repeat: Infinity, repeatType: "reverse" }}
                                >
                                  🎓
                                </motion.div>
                                
                                {/* Floating background elements */}
                                <motion.div
                                  className="absolute top-4 right-4 w-8 h-8 bg-white/20 rounded-full"
                                  animate={{ y: [0, -10, 0] }}
                                  transition={{ duration: 3, repeat: Infinity, repeatType: "reverse" }}
                                />
                                <motion.div
                                  className="absolute bottom-4 left-4 w-6 h-6 bg-white/20 rounded-full"
                                  animate={{ y: [0, 10, 0] }}
                                  transition={{ duration: 3, repeat: Infinity, repeatType: "reverse", delay: 1 }}
                                />
                              </div>
                            )}
                            
                            {/* Category badge */}
                            <div className="absolute top-4 left-4 z-20">
                              <Badge className="bg-white/95 backdrop-blur-sm text-black px-3 py-1.5 shadow-lg border-0">
                                {category.title}
                              </Badge>
                            </div>
                            
                            {/* Popular badge */}
                            <div className="absolute top-4 right-4 z-20">
                              <Badge className="bg-gradient-to-r from-primary/90 to-primary/80 backdrop-blur-sm text-white px-3 py-1.5 shadow-lg border-0">
                                <Star className="w-3 h-3 mr-1" />
                                Popular
                              </Badge>
                            </div>
                          </div>
                          
                          <CardHeader className="pb-4">
                            <CardTitle className="text-xl font-bold text-gray-900 group-hover:text-primary transition-colors duration-500 mb-3">
                              {card.title}
                            </CardTitle>
                            <CardDescription className="text-gray-600 leading-relaxed line-clamp-3">
                              {card.description}
                            </CardDescription>
                          </CardHeader>
                          
                          <CardContent className="pt-0">
                            <div className="flex items-center justify-between mb-4">
                              <div className="flex items-center space-x-4 text-sm text-gray-500">
                                <div className="flex items-center group-hover:text-primary transition-colors duration-300">
                                  <Users className="w-4 h-4 mr-1" />
                                  <span>Popular</span>
                                </div>
                                <div className="flex items-center group-hover:text-blue-600 transition-colors duration-300">
                                  <Clock className="w-4 h-4 mr-1" />
                                  <span>Updated</span>
                                </div>
                              </div>
                            </div>
                            
                            <Link href={`/study/${studyPage.slug}/${card.id}`}>
                              <motion.div
                                whileHover={{ scale: 1.02 }}
                                whileTap={{ scale: 0.98 }}
                              >
                                <Button variant="outline" className="w-full border-2 border-primary/20 hover:border-primary hover:bg-primary hover:text-white transition-all duration-300 group">
                                  <span className="mr-2 group-hover:mr-3 transition-all duration-300">Learn More</span>
                                  <ArrowRight className="w-4 h-4 group-hover:translate-x-1 transition-transform duration-300" />
                                </Button>
                              </motion.div>
                            </Link>
                          </CardContent>
                        </Card>
                      </motion.div>
                    ))}
                  </div>
                </motion.div>
              ))}
            </div>
          </div>
        </section>

    {/* Enhanced CTA Section */}
        <section className="py-20 bg-gradient-to-r from-primary to-blue-600 text-white">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8 }}
              viewport={{ once: true }}
            >
              <Badge className="mb-4 bg-white/20 hover:bg-white/30 text-white border-white/30" variant="secondary">
                <Heart className="w-3 h-3 mr-1" />
                Start Your Journey
              </Badge>
              <h2 className="text-3xl md:text-4xl font-bold mb-4">
                Ready to Study {studyPage.title.split(' in ')[1]}?
              </h2>
              <p className="text-xl mb-8 opacity-90 max-w-3xl mx-auto">
                Get expert guidance personalized for your study abroad journey. 
                Let us help you achieve your dreams of studying in {studyPage.title.split(' in ')[1]}.
              </p>
              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <Link href="/contact">
                  <motion.div
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    <Button size="lg" variant="secondary" className="w-full sm:w-auto bg-white text-primary hover:bg-gray-100 shadow-lg hover:shadow-xl transition-all duration-300 px-8">
                      <Shield className="w-4 h-4 mr-2" />
                      Get Started Today
                    </Button>
                  </motion.div>
                </Link>
                <Link href="/contact">
                  <motion.div
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    <Button size="lg" variant="outline" className="w-full sm:w-auto text-white border-white hover:bg-white hover:text-primary transition-all duration-300 px-8">
                      <Users className="w-4 h-4 mr-2" />
                      Free Consultation
                    </Button>
                  </motion.div>
                </Link>
              </div>
              
              {/* Trust indicators */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-12 max-w-3xl mx-auto">
                <div className="text-center">
                  <div className="w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-3">
                    <Award className="w-8 h-8 text-white" />
                  </div>
                  <h3 className="text-lg font-semibold mb-1">Expert Guidance</h3>
                  <p className="text-sm opacity-80">10+ years of experience</p>
                </div>
                <div className="text-center">
                  <div className="w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-3">
                    <TrendingUp className="w-8 h-8 text-white" />
                  </div>
                  <h3 className="text-lg font-semibold mb-1">High Success Rate</h3>
                  <p className="text-sm opacity-80">98% visa approval rate</p>
                </div>
                <div className="text-center">
                  <div className="w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-3">
                    <Users className="w-8 h-8 text-white" />
                  </div>
                  <h3 className="text-lg font-semibold mb-1">500+ Students</h3>
                  <p className="text-sm opacity-80">Successfully placed</p>
                </div>
              </div>
            </motion.div>
          </div>
        </section>
      </div>
    </div>
  )
}

--- File: study\[slug]\[cardId]\page.tsx ---
import { notFound } from 'next/navigation'
import { db } from '@/lib/db'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { ArrowLeft, Calendar, MapPin, Users, Clock, BookOpen, Globe, DollarSign, CheckCircle, AlertCircle, Star, TrendingUp, Award, Shield, Plus, Edit, Trash2 } from 'lucide-react'
import Link from 'next/link'
import Image from 'next/image'
import Navbar from '@/components/navbar'
import DynamicTable from '@/components/dynamic-table'

interface CardDetailPageProps {
  params: Promise<{ slug: string; cardId: string }>
}

interface CardData {
  id: number
  title: string
  description: string
  imageUrl: string | null
  cardCategory: string | null
  duration: string | null
  location: string | null
  intake: string | null
  requirements: string | null
  category: {
    id: number
    title: string
    description: string | null
    studyPage: {
      id: number
      title: string
      slug: string
    }
  }
}

interface DynamicTableData {
  id: number
  title: string
  description: string | null
  columns: any
  rows: any
  createdAt: string
}

async function getCardDetail(slug: string, cardId: string): Promise<{ card: CardData | null; dynamicTables: DynamicTableData[] }> {
  try {
    const card = await db.card.findUnique({
      where: { 
        id: parseInt(cardId),
        category: {
          studyPage: {
            slug,
            isActive: true
          }
        }
      },
      include: {
        category: {
          include: {
            studyPage: {
              select: {
                id: true,
                title: true,
                slug: true
              }
            }
          }
        }
      }
    })

    if (!card) {
      return { card: null, dynamicTables: [] }
    }

    // Get detail page with dynamic tables
    const detailPage = await db.detailPage.findUnique({
      where: { cardId: parseInt(cardId) },
      include: {
        tables: {
          orderBy: { createdAt: 'asc' }
        }
      }
    })

    return { 
      card, 
      dynamicTables: detailPage?.tables || []
    }
  } catch (error) {
    console.error('Failed to fetch card detail:', error)
    return { card: null, dynamicTables: [] }
  }
}

export async function generateMetadata({ params }: CardDetailPageProps) {
  const { slug, cardId } = await params
  const card = await getCardDetail(slug, cardId)
  
  if (!card) {
    return {
      title: 'Program Not Found',
      description: 'The requested study program could not be found.'
    }
  }

  return {
    title: `${card.title} - ${card.category.studyPage.title}`,
    description: card.description,
    openGraph: {
      title: `${card.title} - ${card.category.studyPage.title}`,
      description: card.description,
      images: card.imageUrl ? [card.imageUrl] : [],
    },
  }
}

export default async function CardDetailPage({ params }: CardDetailPageProps) {
  const { slug, cardId } = await params
  const card = await getCardDetail(slug, cardId)

  if (!card) {
    notFound()
  }

  // Generate comparison tables data
  const getComparisonTables = () => {
    const country = card.category.studyPage.title.split(' in ')[1] || 'Unknown'
    
    return {
      tuitionFees: [
        { program: 'Undergraduate', domestic: '$15,000 - $25,000', international: '$25,000 - $45,000', duration: '3-4 years' },
        { program: 'Postgraduate', domestic: '$20,000 - $35,000', international: '$30,000 - $60,000', duration: '1-2 years' },
        { program: 'PhD/Research', domestic: '$25,000 - $40,000', international: '$35,000 - $70,000', duration: '3-5 years' },
        { program: 'Diploma/Certificate', domestic: '$10,000 - $18,000', international: '$15,000 - $30,000', duration: '1-2 years' }
      ],
      livingCosts: [
        { category: 'Accommodation', monthly: '$800 - $1,500', yearly: '$9,600 - $18,000', notes: 'Varies by city and type' },
        { category: 'Food', monthly: '$400 - $800', yearly: '$4,800 - $9,600', notes: 'Groceries and dining' },
        { category: 'Transportation', monthly: '$100 - $300', yearly: '$1,200 - $3,600', notes: 'Public transport' },
        { category: 'Health Insurance', monthly: '$100 - $200', yearly: '$1,200 - $2,400', notes: 'Mandatory for students' },
        { category: 'Personal Expenses', monthly: '$300 - $600', yearly: '$3,600 - $7,200', notes: 'Entertainment, shopping' }
      ],
      admissionRequirements: [
        { requirement: 'Academic Score', minimum: '75% - 85%', recommended: '85% - 95%', notes: 'Varies by university' },
        { requirement: 'English Proficiency', minimum: 'IELTS 6.5/TOEFL 79', recommended: 'IELTS 7.0+/TOEFL 90+', notes: 'With no band below 6.0' },
        { requirement: 'Statement of Purpose', minimum: 'Required', recommended: 'Strong SOP', notes: '500-1000 words' },
        { requirement: 'Letters of Recommendation', minimum: '2 academic', recommended: '2-3 references', notes: 'From professors/employers' },
        { requirement: 'Work Experience', minimum: 'Not required', recommended: '1-2 years', notes: 'For MBA programs' }
      ],
      universities: [
        { 
          university: 'Top Tier Universities', 
          ranking: '1-50', 
          acceptanceRate: '10-20%', 
          avgTuition: '$35,000 - $60,000',
          highlights: 'Research excellence, global reputation'
        },
        { 
          university: 'Mid Tier Universities', 
          ranking: '51-200', 
          acceptanceRate: '25-40%', 
          avgTuition: '$25,000 - $45,000',
          highlights: 'Quality education, good value'
        },
        { 
          university: 'Regional Universities', 
          ranking: '201-500', 
          acceptanceRate: '40-60%', 
          avgTuition: '$20,000 - $35,000',
          highlights: 'Affordable, practical programs'
        },
        { 
          university: 'Community Colleges', 
          ranking: 'N/A', 
          acceptanceRate: '60-80%', 
          avgTuition: '$15,000 - $25,000',
          highlights: 'Pathway programs, affordable start'
        }
      ]
    }
  }

  const tables = getComparisonTables()

  return (
    <div className="min-h-screen bg-gray-50">
      <Navbar />
      
      {/* Back Navigation */}
      <div className="bg-white border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <Link href={`/study/${slug}`}>
            <Button variant="outline" className="mb-4">
              <ArrowLeft className="w-4 h-4 mr-2" />
              Back to {card.category.studyPage.title}
            </Button>
          </Link>
        </div>
      </div>

      {/* Program Header */}
      <div className="bg-gradient-to-r from-primary to-blue-600 text-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
            <div>
              <Badge className="mb-4 bg-white/20 hover:bg-white/30 text-white border-white/30">
                <BookOpen className="w-3 h-3 mr-1" />
                {card.category.title}
              </Badge>
              <h1 className="text-4xl md:text-5xl font-bold mb-4">{card.title}</h1>
              <p className="text-xl text-white/90 mb-6 leading-relaxed">{card.description}</p>
              
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
                <div className="bg-white/10 backdrop-blur-sm rounded-lg p-4">
                  <Clock className="w-6 h-6 mb-2" />
                  <div className="text-sm text-white/80">Duration</div>
                  <div className="font-semibold">{card.duration || '4 years'}</div>
                </div>
                <div className="bg-white/10 backdrop-blur-sm rounded-lg p-4">
                  <MapPin className="w-6 h-6 mb-2" />
                  <div className="text-sm text-white/80">Location</div>
                  <div className="font-semibold">{card.location || 'Multiple campuses'}</div>
                </div>
                <div className="bg-white/10 backdrop-blur-sm rounded-lg p-4">
                  <Users className="w-6 h-6 mb-2" />
                  <div className="text-sm text-white/80">Intake</div>
                  <div className="font-semibold">{card.intake || 'Fall & Spring'}</div>
                </div>
                <div className="bg-white/10 backdrop-blur-sm rounded-lg p-4">
                  <Globe className="w-6 h-6 mb-2" />
                  <div className="text-sm text-white/80">Category</div>
                  <div className="font-semibold">{card.cardCategory || 'General'}</div>
                </div>
              </div>
            </div>
            
            {card.imageUrl && (
              <div className="relative h-96 rounded-2xl overflow-hidden shadow-2xl">
                <img 
                  src={card.imageUrl} 
                  alt={card.title}
                  className="w-full h-full object-cover"
                />
                <div className="absolute inset-0 bg-gradient-to-t from-black/30 to-transparent" />
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Requirements Section */}
      {card.requirements && (
        <section className="py-16 bg-white">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="text-center mb-12">
              <Badge className="mb-4 bg-blue-100 text-blue-800 hover:bg-blue-200">
                <AlertCircle className="w-3 h-3 mr-1" />
                Requirements
              </Badge>
              <h2 className="text-3xl font-bold text-gray-900 mb-4">Admission Requirements</h2>
            </div>
            <Card className="max-w-4xl mx-auto">
              <CardContent className="p-8">
                <div className="prose prose-lg max-w-none">
                  <p className="text-gray-700 leading-relaxed">{card.requirements}</p>
                </div>
              </CardContent>
            </Card>
          </div>
        </section>
      )}

      {/* Comparison Tables Section */}
      <section className="py-16 bg-gray-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-12">
            <Badge className="mb-4 bg-green-100 text-green-800 hover:bg-green-200">
              <TrendingUp className="w-3 h-3 mr-1" />
              Comprehensive Comparison
            </Badge>
            <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
              Study in {card.category.studyPage.title.split(' in ')[1]} - Detailed Analysis
            </h2>
            <p className="text-xl text-gray-600 max-w-3xl mx-auto">
              Compare costs, requirements, and universities to make an informed decision
            </p>
          </div>

          <div className="space-y-16">
            {/* Tuition Fees Table */}
            <div>
              <div className="flex items-center mb-6">
                <DollarSign className="w-6 h-6 text-green-600 mr-3" />
                <h3 className="text-2xl font-bold text-gray-900">Tuition Fees Comparison</h3>
              </div>
              <div className="bg-white rounded-xl shadow-lg overflow-hidden">
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead className="bg-gradient-to-r from-green-500 to-green-600 text-white">
                      <tr>
                        <th className="px-6 py-4 text-left font-semibold">Program Type</th>
                        <th className="px-6 py-4 text-left font-semibold">Domestic Students</th>
                        <th className="px-6 py-4 text-left font-semibold">International Students</th>
                        <th className="px-6 py-4 text-left font-semibold">Duration</th>
                      </tr>
                    </thead>
                    <tbody className="divide-y divide-gray-200">
                      {tables.tuitionFees.map((row, index) => (
                        <tr key={index} className="hover:bg-gray-50 transition-colors">
                          <td className="px-6 py-4 font-medium text-gray-900">{row.program}</td>
                          <td className="px-6 py-4 text-gray-700">{row.domestic}</td>
                          <td className="px-6 py-4 text-gray-700 font-semibold">{row.international}</td>
                          <td className="px-6 py-4 text-gray-700">{row.duration}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            </div>

            {/* Living Costs Table */}
            <div>
              <div className="flex items-center mb-6">
                <Shield className="w-6 h-6 text-blue-600 mr-3" />
                <h3 className="text-2xl font-bold text-gray-900">Living Costs Breakdown</h3>
              </div>
              <div className="bg-white rounded-xl shadow-lg overflow-hidden">
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead className="bg-gradient-to-r from-blue-500 to-blue-600 text-white">
                      <tr>
                        <th className="px-6 py-4 text-left font-semibold">Category</th>
                        <th className="px-6 py-4 text-left font-semibold">Monthly Cost</th>
                        <th className="px-6 py-4 text-left font-semibold">Yearly Cost</th>
                        <th className="px-6 py-4 text-left font-semibold">Notes</th>
                      </tr>
                    </thead>
                    <tbody className="divide-y divide-gray-200">
                      {tables.livingCosts.map((row, index) => (
                        <tr key={index} className="hover:bg-gray-50 transition-colors">
                          <td className="px-6 py-4 font-medium text-gray-900">{row.category}</td>
                          <td className="px-6 py-4 text-gray-700">{row.monthly}</td>
                          <td className="px-6 py-4 text-gray-700 font-semibold">{row.yearly}</td>
                          <td className="px-6 py-4 text-gray-600 text-sm">{row.notes}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            </div>

            {/* Admission Requirements Table */}
            <div>
              <div className="flex items-center mb-6">
                <CheckCircle className="w-6 h-6 text-purple-600 mr-3" />
                <h3 className="text-2xl font-bold text-gray-900">Admission Requirements</h3>
              </div>
              <div className="bg-white rounded-xl shadow-lg overflow-hidden">
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead className="bg-gradient-to-r from-purple-500 to-purple-600 text-white">
                      <tr>
                        <th className="px-6 py-4 text-left font-semibold">Requirement</th>
                        <th className="px-6 py-4 text-left font-semibold">Minimum</th>
                        <th className="px-6 py-4 text-left font-semibold">Recommended</th>
                        <th className="px-6 py-4 text-left font-semibold">Notes</th>
                      </tr>
                    </thead>
                    <tbody className="divide-y divide-gray-200">
                      {tables.admissionRequirements.map((row, index) => (
                        <tr key={index} className="hover:bg-gray-50 transition-colors">
                          <td className="px-6 py-4 font-medium text-gray-900">{row.requirement}</td>
                          <td className="px-6 py-4 text-gray-700">{row.minimum}</td>
                          <td className="px-6 py-4 text-gray-700 font-semibold">{row.recommended}</td>
                          <td className="px-6 py-4 text-gray-600 text-sm">{row.notes}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            </div>

            {/* Universities Comparison Table */}
            <div>
              <div className="flex items-center mb-6">
                <Award className="w-6 h-6 text-orange-600 mr-3" />
                <h3 className="text-2xl font-bold text-gray-900">Universities Comparison</h3>
              </div>
              <div className="bg-white rounded-xl shadow-lg overflow-hidden">
                <div className="overflow-x-auto">
                  <table className="w-full">
                    <thead className="bg-gradient-to-r from-orange-500 to-orange-600 text-white">
                      <tr>
                        <th className="px-6 py-4 text-left font-semibold">University Type</th>
                        <th className="px-6 py-4 text-left font-semibold">Ranking</th>
                        <th className="px-6 py-4 text-left font-semibold">Acceptance Rate</th>
                        <th className="px-6 py-4 text-left font-semibold">Average Tuition</th>
                        <th className="px-6 py-4 text-left font-semibold">Highlights</th>
                      </tr>
                    </thead>
                    <tbody className="divide-y divide-gray-200">
                      {tables.universities.map((row, index) => (
                        <tr key={index} className="hover:bg-gray-50 transition-colors">
                          <td className="px-6 py-4 font-medium text-gray-900">{row.university}</td>
                          <td className="px-6 py-4 text-gray-700">{row.ranking}</td>
                          <td className="px-6 py-4 text-gray-700">{row.acceptanceRate}</td>
                          <td className="px-6 py-4 text-gray-700 font-semibold">{row.avgTuition}</td>
                          <td className="px-6 py-4 text-gray-600 text-sm">{row.highlights}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-20 bg-gradient-to-r from-primary to-blue-600 text-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
          <h2 className="text-3xl md:text-4xl font-bold mb-4">
            Ready to Start Your Journey?
          </h2>
          <p className="text-xl text-white/90 mb-8 max-w-3xl mx-auto">
            Get personalized guidance and support for your study abroad application
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Link href="/contact">
              <Button size="lg" className="bg-white text-primary hover:bg-gray-100">
                Get Free Consultation
              </Button>
            </Link>
            <Link href={`/study/${slug}`}>
              <Button size="lg" variant="outline" className="border-white text-white hover:bg-white hover:text-primary">
                Explore More Programs
              </Button>
            </Link>
          </div>
        </div>
      </section>
    </div>
  )
}

--- File: tables\page.tsx ---
'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { 
  Search, 
  Filter, 
  Globe, 
  GraduationCap, 
  DollarSign, 
  Clock, 
  Star,
  TrendingUp,
  Award,
  MapPin,
  Users,
  BookOpen,
  CheckCircle,
  XCircle,
  ArrowUpDown,
  Download,
  Eye,
  Heart,
  Shield,
  Zap
} from 'lucide-react'
import Navbar from '@/components/navbar'

interface Country {
  id: number
  title: string
  slug: string
  description: string
  bannerUrl: string | null
  isActive: boolean
  categories: {
    title: string
    cards: {
      id: number
      title: string
      description: string
      duration: string | null
      location: string | null
      intake: string | null
      requirements: string | null
      cardCategory: string | null
    }[]
  }[]
}

interface ComparisonData {
  country: string
  university: string
  course: string
  duration: string
  tuitionFee: string
  livingCost: string
  requirements: string
  workRights: string
  pathway: string
  rating: number
}

export default function TablesPage() {
  const [studyPages, setStudyPages] = useState<Country[]>([])
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedCountry, setSelectedCountry] = useState('all')
  const [selectedCategory, setSelectedCategory] = useState('all')
  const [sortBy, setSortBy] = useState('rating')
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch('/api/study-pages')
        if (response.ok) {
          const data = await response.json()
          setStudyPages(data.filter((page: Country) => page.isActive !== false))
        }
      } catch (error) {
        console.error('Failed to fetch study pages:', error)
      } finally {
        setLoading(false)
      }
    }
    fetchData()
  }, [])

  // Generate comparison data from study pages
  const generateComparisonData = (): ComparisonData[] => {
    const data: ComparisonData[] = []
    
    studyPages.forEach(country => {
      const countryName = country.title.split(' in ')[1] || country.title
      
      country.categories.forEach(category => {
        category.cards.forEach(card => {
          data.push({
            country: countryName,
            university: card.location || 'Various Universities',
            course: card.title,
            duration: card.duration || '4 years',
            tuitionFee: generateRandomFee(countryName),
            livingCost: generateRandomLivingCost(countryName),
            requirements: card.requirements || 'IELTS 6.5+',
            workRights: generateWorkRights(countryName),
            pathway: generatePathway(countryName),
            rating: Math.floor(Math.random() * 2) + 4 // 4-5 stars
          })
        })
      })
    })
    
    return data
  }

  const generateRandomFee = (country: string) => {
    const fees: Record<string, string[]> = {
      'Canada': ['$15,000 - $25,000', '$20,000 - $35,000', '$18,000 - $30,000'],
      'USA': ['$25,000 - $50,000', '$30,000 - $60,000', '$35,000 - $55,000'],
      'UK': ['£15,000 - £25,000', '£18,000 - £30,000', '£20,000 - £35,000'],
      'Australia': ['AU$20,000 - $35,000', 'AU$25,000 - $40,000', 'AU$22,000 - $38,000'],
      'Germany': ['€0 - €5,000', '€500 - €3,000', '€1,000 - €4,000'],
      'Italy': ['€5,000 - €15,000', '€8,000 - €18,000', '€6,000 - €16,000'],
      'France': ['€8,000 - €20,000', '€10,000 - €25,000', '€9,000 - €22,000'],
      'Spain': ['€6,000 - €15,000', '€8,000 - €18,000', '€7,000 - €16,000']
    }
    const countryFees = fees[country] || ['$10,000 - $25,000']
    return countryFees[Math.floor(Math.random() * countryFees.length)]
  }

  const generateRandomLivingCost = (country: string) => {
    const costs: Record<string, string[]> = {
      'Canada': ['$10,000 - $15,000', '$12,000 - $18,000'],
      'USA': ['$12,000 - $20,000', '$15,000 - $25,000'],
      'UK': ['£10,000 - £15,000', '£12,000 - £18,000'],
      'Australia': ['AU$15,000 - $20,000', 'AU$18,000 - $25,000'],
      'Germany': ['€8,000 - €12,000', '€10,000 - €14,000'],
      'Italy': ['€8,000 - €12,000', '€9,000 - €13,000'],
      'France': ['€10,000 - €15,000', '€12,000 - €18,000'],
      'Spain': ['€8,000 - €12,000', '€9,000 - €14,000']
    }
    const countryCosts = costs[country] || ['$8,000 - $15,000']
    return countryCosts[Math.floor(Math.random() * countryCosts.length)]
  }

  const generateWorkRights = (country: string) => {
    const rights: Record<string, string> = {
      'Canada': '20 hrs/week + full-time breaks',
      'USA': 'On-campus only',
      'UK': '20 hrs/week + holidays',
      'Australia': '40 hrs/fortnight',
      'Germany': '120 full days / 240 half days',
      'Italy': '20 hrs/week',
      'France': '964 hrs/year',
      'Spain': '20 hrs/week'
    }
    return rights[country] || '20 hrs/week'
  }

  const generatePathway = (country: string) => {
    const pathways: Record<string, string> = {
      'Canada': 'PGWP → PR',
      'USA': 'OPT → H1B',
      'UK': 'Graduate Route → Skilled Worker',
      'Australia': 'Temporary Graduate → Skilled Visa',
      'Germany': '18-month job search visa',
      'Italy': 'Residence permit after graduation',
      'France': 'APS visa → Work permit',
      'Spain': '1-year job search visa'
    }
    return pathways[country] || 'Student → Work Visa'
  }

  const comparisonData = generateComparisonData()
  
  // Filter and sort data
  const filteredData = comparisonData
    .filter(item => {
      const matchesSearch = item.course.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           item.university.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           item.country.toLowerCase().includes(searchTerm.toLowerCase())
      const matchesCountry = selectedCountry === 'all' || item.country === selectedCountry
      return matchesSearch && matchesCountry
    })
    .sort((a, b) => {
      if (sortBy === 'rating') return b.rating - a.rating
      if (sortBy === 'country') return a.country.localeCompare(b.country)
      if (sortBy === 'course') return a.course.localeCompare(b.course)
      return 0
    })

  const countries = [...new Set(comparisonData.map(item => item.country))]

  const renderStars = (rating: number) => {
    return Array.from({ length: 5 }, (_, i) => (
      <Star
        key={i}
        className={`w-4 h-4 ${i < rating ? 'text-yellow-400 fill-current' : 'text-gray-300'}`}
      />
    ))
  }

  if (loading) {
    return (
      <div className="min-h-screen">
        <Navbar />
        <div className="flex items-center justify-center min-h-[60vh]">
          <div className="text-center">
            <div className="w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4 animate-pulse">
              <Globe className="w-8 h-8 text-primary animate-spin" />
            </div>
            <h2 className="text-xl font-semibold text-gray-900 mb-2">Loading Comparison Tables</h2>
            <p className="text-gray-600">Preparing comprehensive study destination comparisons...</p>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Navbar />
      
      {/* Header Section */}
      <section className="bg-gradient-to-br from-primary/10 via-blue-50 to-indigo-50 py-16">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            className="text-center"
          >
            <Badge className="mb-4 bg-primary/10 text-primary hover:bg-primary/20" variant="secondary">
              <BookOpen className="w-3 h-3 mr-1" />
              Comprehensive Comparison
            </Badge>
            <h1 className="text-4xl md:text-5xl font-bold text-gray-900 mb-4">
              Study Destination Comparison Tables
            </h1>
            <p className="text-xl text-gray-600 max-w-3xl mx-auto">
              Compare universities, courses, costs, and benefits across different countries to make the best choice for your future.
            </p>
          </motion.div>
        </div>
      </section>

      {/* Filters Section */}
      <section className="py-8 bg-white border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex flex-col lg:flex-row gap-4 items-center justify-between">
            <div className="flex flex-col sm:flex-row gap-4 flex-1">
              <div className="relative flex-1 max-w-md">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                <Input
                  placeholder="Search courses, universities..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10"
                />
              </div>
              
              <Select value={selectedCountry} onValueChange={setSelectedCountry}>
                <SelectTrigger className="w-full sm:w-48">
                  <SelectValue placeholder="Select Country" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Countries</SelectItem>
                  {countries.map(country => (
                    <SelectItem key={country} value={country}>{country}</SelectItem>
                  ))}
                </SelectContent>
              </Select>

              <Select value={sortBy} onValueChange={setSortBy}>
                <SelectTrigger className="w-full sm:w-48">
                  <SelectValue placeholder="Sort by" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="rating">Highest Rated</SelectItem>
                  <SelectItem value="country">Country A-Z</SelectItem>
                  <SelectItem value="course">Course A-Z</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <Button variant="outline" className="w-full sm:w-auto">
              <Download className="w-4 h-4 mr-2" />
              Export Data
            </Button>
          </div>
        </div>
      </section>

      {/* Main Content */}
      <section className="py-12">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <Tabs defaultValue="comparison" className="space-y-8">
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="comparison">Course Comparison</TabsTrigger>
              <TabsTrigger value="countries">Country Overview</TabsTrigger>
              <TabsTrigger value="costs">Cost Analysis</TabsTrigger>
            </TabsList>

            <TabsContent value="comparison" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <GraduationCap className="w-5 h-5 mr-2" />
                    Course & University Comparison
                  </CardTitle>
                  <CardDescription>
                    Detailed comparison of courses, universities, and their features across different countries
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="overflow-x-auto">
                    <table className="w-full border-collapse">
                      <thead>
                        <tr className="border-b bg-gray-50">
                          <th className="text-left p-4 font-semibold">Country</th>
                          <th className="text-left p-4 font-semibold">University</th>
                          <th className="text-left p-4 font-semibold">Course</th>
                          <th className="text-left p-4 font-semibold">Duration</th>
                          <th className="text-left p-4 font-semibold">Tuition Fee</th>
                          <th className="text-left p-4 font-semibold">Living Cost</th>
                          <th className="text-left p-4 font-semibold">Work Rights</th>
                          <th className="text-left p-4 font-semibold">Pathway</th>
                          <th className="text-left p-4 font-semibold">Rating</th>
                        </tr>
                      </thead>
                      <tbody>
                        {filteredData.map((item, index) => (
                          <motion.tr
                            key={index}
                            className="border-b hover:bg-gray-50 transition-colors"
                            initial={{ opacity: 0, y: 20 }}
                            animate={{ opacity: 1, y: 0 }}
                            transition={{ duration: 0.3, delay: index * 0.05 }}
                          >
                            <td className="p-4">
                              <div className="flex items-center">
                                <span className="text-lg mr-2">
                                  {item.country === 'Canada' && '🇨🇦'}
                                  {item.country === 'USA' && '🇺🇸'}
                                  {item.country === 'UK' && '🇬🇧'}
                                  {item.country === 'Australia' && '🇦🇺'}
                                  {item.country === 'Germany' && '🇩🇪'}
                                  {item.country === 'Italy' && '🇮🇹'}
                                  {item.country === 'France' && '🇫🇷'}
                                  {item.country === 'Spain' && '🇪🇸'}
                                </span>
                                <span className="font-medium">{item.country}</span>
                              </div>
                            </td>
                            <td className="p-4">{item.university}</td>
                            <td className="p-4">
                              <div>
                                <div className="font-medium">{item.course}</div>
                                <div className="text-sm text-gray-500">{item.requirements}</div>
                              </div>
                            </td>
                            <td className="p-4">
                              <div className="flex items-center">
                                <Clock className="w-4 h-4 mr-1 text-gray-400" />
                                {item.duration}
                              </div>
                            </td>
                            <td className="p-4">
                              <div className="flex items-center">
                                <DollarSign className="w-4 h-4 mr-1 text-green-600" />
                                <span className="font-medium text-green-600">{item.tuitionFee}</span>
                              </div>
                            </td>
                            <td className="p-4">
                              <div className="flex items-center">
                                <DollarSign className="w-4 h-4 mr-1 text-blue-600" />
                                <span className="text-blue-600">{item.livingCost}</span>
                              </div>
                            </td>
                            <td className="p-4">
                              <div className="text-sm">
                                <div className="flex items-center mb-1">
                                  <CheckCircle className="w-3 h-3 mr-1 text-green-500" />
                                  {item.workRights}
                                </div>
                              </div>
                            </td>
                            <td className="p-4">
                              <Badge variant="secondary" className="text-xs">
                                {item.pathway}
                              </Badge>
                            </td>
                            <td className="p-4">
                              <div className="flex items-center">
                                {renderStars(item.rating)}
                              </div>
                            </td>
                          </motion.tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                  
                  {filteredData.length === 0 && (
                    <div className="text-center py-12">
                      <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                        <Search className="w-8 h-8 text-gray-400" />
                      </div>
                      <h3 className="text-lg font-semibold text-gray-900 mb-2">No Results Found</h3>
                      <p className="text-gray-600">Try adjusting your search criteria or filters</p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="countries" className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {countries.map(country => {
                  const countryData = comparisonData.filter(item => item.country === country)
                  const avgRating = (countryData.reduce((acc, item) => acc + item.rating, 0) / countryData.length).toFixed(1)
                  
                  return (
                    <motion.div
                      key={country}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.3 }}
                    >
                      <Card className="h-full hover:shadow-lg transition-shadow">
                        <CardHeader>
                          <CardTitle className="flex items-center">
                            <span className="text-2xl mr-2">
                              {country === 'Canada' && '🇨🇦'}
                              {country === 'USA' && '🇺🇸'}
                              {country === 'UK' && '🇬🇧'}
                              {country === 'Australia' && '🇦🇺'}
                              {country === 'Germany' && '🇩🇪'}
                              {country === 'Italy' && '🇮🇹'}
                              {country === 'France' && '🇫🇷'}
                              {country === 'Spain' && '🇪🇸'}
                            </span>
                            {country}
                          </CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-4">
                          <div className="flex items-center justify-between">
                            <span className="text-sm text-gray-600">Available Courses</span>
                            <Badge variant="secondary">{countryData.length}</Badge>
                          </div>
                          <div className="flex items-center justify-between">
                            <span className="text-sm text-gray-600">Average Rating</span>
                            <div className="flex items-center">
                              {renderStars(parseFloat(avgRating))}
                              <span className="ml-2 text-sm font-medium">{avgRating}</span>
                            </div>
                          </div>
                          <div className="flex items-center justify-between">
                            <span className="text-sm text-gray-600">Work Rights</span>
                            <div className="flex items-center">
                              <CheckCircle className="w-4 h-4 mr-1 text-green-500" />
                              <span className="text-sm">Available</span>
                            </div>
                          </div>
                          <div className="flex items-center justify-between">
                            <span className="text-sm text-gray-600">Pathway to PR</span>
                            <div className="flex items-center">
                              <TrendingUp className="w-4 h-4 mr-1 text-blue-500" />
                              <span className="text-sm">Available</span>
                            </div>
                          </div>
                          <Button className="w-full mt-4" variant="outline">
                            <Eye className="w-4 h-4 mr-2" />
                            View Details
                          </Button>
                        </CardContent>
                      </Card>
                    </motion.div>
                  )
                })}
              </div>
            </TabsContent>

            <TabsContent value="costs" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <DollarSign className="w-5 h-5 mr-2" />
                    Cost Analysis by Country
                  </CardTitle>
                  <CardDescription>
                    Comprehensive breakdown of tuition fees and living costs across different study destinations
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-6">
                    {countries.map(country => {
                      const countryData = comparisonData.filter(item => item.country === country)
                      const tuitionFees = countryData.map(item => item.tuitionFee)
                      const livingCosts = countryData.map(item => item.livingCost)
                      
                      return (
                        <div key={country} className="border rounded-lg p-6">
                          <div className="flex items-center mb-4">
                            <span className="text-2xl mr-2">
                              {country === 'Canada' && '🇨🇦'}
                              {country === 'USA' && '🇺🇸'}
                              {country === 'UK' && '🇬🇧'}
                              {country === 'Australia' && '🇦🇺'}
                              {country === 'Germany' && '🇩🇪'}
                              {country === 'Italy' && '🇮🇹'}
                              {country === 'France' && '🇫🇷'}
                              {country === 'Spain' && '🇪🇸'}
                            </span>
                            <h3 className="text-lg font-semibold">{country}</h3>
                          </div>
                          
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                              <h4 className="font-medium text-gray-700 mb-3">Tuition Fees Range</h4>
                              <div className="space-y-2">
                                {tuitionFees.map((fee, index) => (
                                  <div key={index} className="flex items-center justify-between p-2 bg-green-50 rounded">
                                    <span className="text-sm text-green-700">{fee}</span>
                                    <Badge variant="outline" className="text-green-600 border-green-200">
                                      Per Year
                                    </Badge>
                                  </div>
                                ))}
                              </div>
                            </div>
                            
                            <div>
                              <h4 className="font-medium text-gray-700 mb-3">Living Costs Range</h4>
                              <div className="space-y-2">
                                {livingCosts.map((cost, index) => (
                                  <div key={index} className="flex items-center justify-between p-2 bg-blue-50 rounded">
                                    <span className="text-sm text-blue-700">{cost}</span>
                                    <Badge variant="outline" className="text-blue-600 border-blue-200">
                                      Per Year
                                    </Badge>
                                  </div>
                                ))}
                              </div>
                            </div>
                          </div>
                        </div>
                      )
                    })}
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-20 bg-primary text-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
          >
            <Badge className="mb-4 bg-white/20 hover:bg-white/30 text-white border-white/30" variant="secondary">
              <Heart className="w-3 h-3 mr-1" />
              Need Help Deciding?
            </Badge>
            <h2 className="text-3xl md:text-4xl font-bold mb-4">
              Let Our Experts Guide You
            </h2>
            <p className="text-xl mb-8 opacity-90">
              Get personalized advice based on your preferences, budget, and career goals
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Button size="lg" variant="secondary" className="w-full sm:w-auto">
                <Users className="w-4 h-4 mr-2" />
                Book Consultation
              </Button>
              <Button size="lg" variant="outline" className="w-full sm:w-auto text-white border-white hover:bg-white hover:text-primary">
                <Shield className="w-4 h-4 mr-2" />
                Free Assessment
              </Button>
            </div>
          </motion.div>
        </div>
      </section>
    </div>
  )
}

--- File: _docs\.project_structure_ignore ---

